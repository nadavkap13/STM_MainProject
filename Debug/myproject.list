
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee0  08007ee0  00020460  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee8  08007ee8  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  08007ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000460  08008350  00020460  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08008350  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156d7  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e13  00000000  00000000  00035b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00038980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00039ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002922d  00000000  00000000  0003ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015634  00000000  00000000  00063d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f60e6  00000000  00000000  00079369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f44f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  0016f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c28 	.word	0x08007c28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	08007c28 	.word	0x08007c28

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ledInit>:
#include <stdlib.h>
#include "LED.h"
#include "main.h"

extern TIM_HandleTypeDef htim4;
void ledInit(LED* led,GPIO_TypeDef* port, uint16_t pin, uint32_t CHANNEL,TIM_HandleTypeDef* htim){
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4613      	mov	r3, r2
 80005b2:	80fb      	strh	r3, [r7, #6]
	led->state = LED_STATE_OFF;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	led->count = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
	led->GPIOx= port;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	60da      	str	r2, [r3, #12]
	led->GPIO_Pin=pin;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	88fa      	ldrh	r2, [r7, #6]
 80005ca:	821a      	strh	r2, [r3, #16]
	led->maxcount=0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
	led->CHANNEL=CHANNEL;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	615a      	str	r2, [r3, #20]
	led->htim = htim;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	619a      	str	r2, [r3, #24]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <ledOn>:
void ledOn(LED* led){
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	led->state = LED_STATE_ON;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68d8      	ldr	r0, [r3, #12]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	8a1b      	ldrh	r3, [r3, #16]
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f001 fc12 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <ledOff>:
void ledOff(LED* led){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	led->state = LED_STATE_OFF;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	68d8      	ldr	r0, [r3, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8a1b      	ldrh	r3, [r3, #16]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f001 fbff 	bl	8001e2c <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <ledBlink>:
void ledBlink(LED* led, int period){
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
	led->state = LED_STATE_BLINK;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
	led->maxcount=period;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	609a      	str	r2, [r3, #8]

}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <ledOnTimerInterrupt>:
void ledOnTimerInterrupt(LED* led){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if(led->state== LED_STATE_BLINK){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d110      	bne.n	800068a <ledOnTimerInterrupt+0x32>
	if (led->count >= led->maxcount){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	429a      	cmp	r2, r3
 8000672:	db0a      	blt.n	800068a <ledOnTimerInterrupt+0x32>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68da      	ldr	r2, [r3, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8a1b      	ldrh	r3, [r3, #16]
 800067c:	4619      	mov	r1, r3
 800067e:	4610      	mov	r0, r2
 8000680:	f001 fbec 	bl	8001e5c <HAL_GPIO_TogglePin>
			led->count = 0;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
			}
	}
		led->count++;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	605a      	str	r2, [r3, #4]
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <ledsetbrightness>:
			break;
	}

	return currentstate;
}
void ledsetbrightness(LED* led,int brightness){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]

		brightness= (brightness*10);
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4613      	mov	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	603b      	str	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d105      	bne.n	80006c6 <ledsetbrightness+0x2a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34


}
 80006c4:	e02c      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d105      	bne.n	80006da <ledsetbrightness+0x3e>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80006d8:	e022      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	2b08      	cmp	r3, #8
 80006e0:	d105      	bne.n	80006ee <ledsetbrightness+0x52>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80006ec:	e018      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	2b0c      	cmp	r3, #12
 80006f4:	d105      	bne.n	8000702 <ledsetbrightness+0x66>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000700:	e00e      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	2b10      	cmp	r3, #16
 8000708:	d105      	bne.n	8000716 <ledsetbrightness+0x7a>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000714:	e004      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <clockInit>:
#include "main.h"
#include "mymain.h"
#include "clock.h"


void clockInit(CLOCK* clock,TIM_HandleTypeDef *htim){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	clock->htim = htim;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	601a      	str	r2, [r3, #0]
	clock->tick_counter = 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
	//clock->state = CLOCK_STATE_OFF;
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <getClockTick>:
void getClockTick(CLOCK* clock,uint32_t* tick){
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
	*tick = clock->tick_counter;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <getTime>:
void getTime( CLOCK* clock, uint32_t* sec,uint32_t* min, uint32_t* hour){
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
	*sec = (clock->tick_counter/1000);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <getTime+0x80>)
 8000780:	fba2 2303 	umull	r2, r3, r2, r3
 8000784:	099a      	lsrs	r2, r3, #6
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	601a      	str	r2, [r3, #0]
	*min = *sec / 60;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <getTime+0x84>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	095a      	lsrs	r2, r3, #5
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
	*sec = *sec % 60;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <getTime+0x84>)
 80007a0:	fba3 2301 	umull	r2, r3, r3, r1
 80007a4:	095a      	lsrs	r2, r3, #5
 80007a6:	4613      	mov	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	1aca      	subs	r2, r1, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	601a      	str	r2, [r3, #0]
	*hour = *min / 60;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <getTime+0x84>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	095a      	lsrs	r2, r3, #5
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	601a      	str	r2, [r3, #0]
	*min = *min % 60;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6819      	ldr	r1, [r3, #0]
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <getTime+0x84>)
 80007ca:	fba3 2301 	umull	r2, r3, r3, r1
 80007ce:	095a      	lsrs	r2, r3, #5
 80007d0:	4613      	mov	r3, r2
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	1a9b      	subs	r3, r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	1aca      	subs	r2, r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	10624dd3 	.word	0x10624dd3
 80007f0:	88888889 	.word	0x88888889

080007f4 <clockInInterrupt>:
void clockInInterrupt(CLOCK* clock){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
		clock->tick_counter++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	605a      	str	r2, [r3, #4]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 ff53 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f80f 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f99f 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000822:	f000 f96d 	bl	8000b00 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000826:	f000 f85b 	bl	80008e0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800082a:	f000 f933 	bl	8000a94 <MX_TIM6_Init>
  MX_TIM4_Init();
 800082e:	f000 f8b1 	bl	8000994 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   maininit();
 8000832:	f000 fc97 	bl	8001164 <maininit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 	 mainloop();
 8000836:	f000 fce5 	bl	8001204 <mainloop>
  {
 800083a:	e7fc      	b.n	8000836 <main+0x24>

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	; 0x58
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2244      	movs	r2, #68	; 0x44
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 fcde 	bl	800620c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000862:	f001 fb3b 	bl	8001edc <HAL_PWREx_ControlVoltageScaling>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800086c:	f000 f9e6 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	2310      	movs	r3, #16
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000882:	2302      	movs	r3, #2
 8000884:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088a:	230a      	movs	r3, #10
 800088c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800088e:	2307      	movs	r3, #7
 8000890:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fb72 	bl	8001f88 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008aa:	f000 f9c7 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2303      	movs	r3, #3
 80008b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	2104      	movs	r1, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 ff3a 	bl	8002740 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d2:	f000 f9b3 	bl	8000c3c <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3758      	adds	r7, #88	; 0x58
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_TIM3_Init+0xac>)
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_TIM3_Init+0xb0>)
 8000908:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_TIM3_Init+0xac>)
 800090c:	f240 321f 	movw	r2, #799	; 0x31f
 8000910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_TIM3_Init+0xac>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_TIM3_Init+0xac>)
 800091a:	22c8      	movs	r2, #200	; 0xc8
 800091c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_TIM3_Init+0xac>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_TIM3_Init+0xac>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_TIM3_Init+0xac>)
 800092c:	f002 ff40 	bl	80037b0 <HAL_TIM_PWM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000936:	f000 f981 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <MX_TIM3_Init+0xac>)
 800094a:	f004 f9c5 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000954:	f000 f972 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_TIM3_Init+0xac>)
 8000970:	f003 fb86 	bl	8004080 <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800097a:	f000 f95f 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800097e:	4803      	ldr	r0, [pc, #12]	; (800098c <MX_TIM3_Init+0xac>)
 8000980:	f000 fcee 	bl	8001360 <HAL_TIM_MspPostInit>

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000047c 	.word	0x2000047c
 8000990:	40000400 	.word	0x40000400

08000994 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009c8:	4a31      	ldr	r2, [pc, #196]	; (8000a90 <MX_TIM4_Init+0xfc>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009ce:	f240 321f 	movw	r2, #799	; 0x31f
 80009d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009dc:	2264      	movs	r2, #100	; 0x64
 80009de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009ec:	4827      	ldr	r0, [pc, #156]	; (8000a8c <MX_TIM4_Init+0xf8>)
 80009ee:	f002 fd87 	bl	8003500 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009f8:	f000 f920 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4820      	ldr	r0, [pc, #128]	; (8000a8c <MX_TIM4_Init+0xf8>)
 8000a0a:	f003 fc4d 	bl	80042a8 <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a14:	f000 f912 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a18:	481c      	ldr	r0, [pc, #112]	; (8000a8c <MX_TIM4_Init+0xf8>)
 8000a1a:	f002 fec9 	bl	80037b0 <HAL_TIM_PWM_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a24:	f000 f90a 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4815      	ldr	r0, [pc, #84]	; (8000a8c <MX_TIM4_Init+0xf8>)
 8000a38:	f004 f94e 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a42:	f000 f8fb 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	; 0x60
 8000a48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_TIM4_Init+0xf8>)
 8000a5e:	f003 fb0f 	bl	8004080 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000a68:	f000 f8e8 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2204      	movs	r2, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <MX_TIM4_Init+0xf8>)
 8000a74:	f003 fb04 	bl	8004080 <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000a7e:	f000 f8dd 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200004c8 	.word	0x200004c8
 8000a90:	40000800 	.word	0x40000800

08000a94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_TIM6_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000aac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ab0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000ac6:	f002 fd1b 	bl	8003500 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ad0:	f000 f8b4 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM6_Init+0x64>)
 8000ae2:	f004 f8f9 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 f8a6 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000514 	.word	0x20000514
 8000afc:	40001000 	.word	0x40001000

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART2_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b44:	f004 f96e 	bl	8004e24 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f875 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000560 	.word	0x20000560
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a2e      	ldr	r2, [pc, #184]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2160      	movs	r1, #96	; 0x60
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 f925 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480f      	ldr	r0, [pc, #60]	; (8000c38 <MX_GPIO_Init+0xd8>)
 8000bfa:	f000 ff6d 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RED_LED_Pin;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f000 ff5e 	bl	8001ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2028      	movs	r0, #40	; 0x28
 8000c22:	f000 fea4 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c26:	2028      	movs	r0, #40	; 0x28
 8000c28:	f000 febd 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000800 	.word	0x48000800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>

08000c46 <buzzerInit>:
#include "mybuzzer.h"
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;
int count = 0;
uint32_t frame;
void buzzerInit(BUZZER* buzzer,TIM_HandleTypeDef *htim){
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
	buzzer->htim = htim;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <buzzerStartPlay>:
void buzzerStartPlay(BUZZER* buzzer,int* song, int* frames){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	buzzer->song = song;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	605a      	str	r2, [r3, #4]
	buzzer->frames = frames;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim3,buzzer->song[count]/2);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <buzzerStartPlay+0x84>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0fda      	lsrs	r2, r3, #31
 8000c8c:	4413      	add	r3, r2
 8000c8e:	105b      	asrs	r3, r3, #1
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <buzzerStartPlay+0x88>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <buzzerStartPlay+0x84>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	0fda      	lsrs	r2, r3, #31
 8000ca8:	4413      	add	r3, r2
 8000caa:	105b      	asrs	r3, r3, #1
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <buzzerStartPlay+0x88>)
 8000cb0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,((buzzer->song[count]/2)/2));
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <buzzerStartPlay+0x84>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da00      	bge.n	8000cc6 <buzzerStartPlay+0x62>
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	109b      	asrs	r3, r3, #2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <buzzerStartPlay+0x88>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Base_Start(&htim3);
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <buzzerStartPlay+0x88>)
 8000cd2:	f002 fc6d 	bl	80035b0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <buzzerStartPlay+0x88>)
 8000cda:	f002 fdc1 	bl	8003860 <HAL_TIM_PWM_Start>
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200005e4 	.word	0x200005e4
 8000cec:	2000047c 	.word	0x2000047c

08000cf0 <buzzerStopPlay>:
void buzzerStopPlay(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <buzzerStopPlay+0x18>)
 8000cf6:	f002 fcc3 	bl	8003680 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <buzzerStopPlay+0x18>)
 8000cfe:	f002 feb5 	bl	8003a6c <HAL_TIM_PWM_Stop>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000047c 	.word	0x2000047c

08000d0c <buzzerOnInterrupt>:

void buzzerOnInterrupt(BUZZER* buzzer){
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	frame++;
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <buzzerOnInterrupt+0xcc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <buzzerOnInterrupt+0xcc>)
 8000d1c:	6013      	str	r3, [r2, #0]
	if(frame >= buzzer->frames[count] ){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <buzzerOnInterrupt+0xcc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d835      	bhi.n	8000da2 <buzzerOnInterrupt+0x96>
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <buzzerOnInterrupt+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim3,buzzer->song[count]/2);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0fda      	lsrs	r2, r3, #31
 8000d4e:	4413      	add	r3, r2
 8000d50:	105b      	asrs	r3, r3, #1
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <buzzerOnInterrupt+0xd4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0fda      	lsrs	r2, r3, #31
 8000d6a:	4413      	add	r3, r2
 8000d6c:	105b      	asrs	r3, r3, #1
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <buzzerOnInterrupt+0xd4>)
 8000d72:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,((buzzer->song[count]/2)/2));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da00      	bge.n	8000d88 <buzzerOnInterrupt+0x7c>
 8000d86:	3303      	adds	r3, #3
 8000d88:	109b      	asrs	r3, r3, #2
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <buzzerOnInterrupt+0xd4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
		count++;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000d9a:	6013      	str	r3, [r2, #0]
		frame = 0;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <buzzerOnInterrupt+0xcc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
	}
	if(buzzer->song[count]==0 && buzzer->frames[count]== 0){
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10b      	bne.n	8000dcc <buzzerOnInterrupt+0xc0>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <buzzerOnInterrupt+0xc0>
		count=0;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <buzzerOnInterrupt+0xd0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
	}
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	200005e8 	.word	0x200005e8
 8000ddc:	200005e4 	.word	0x200005e4
 8000de0:	2000047c 	.word	0x2000047c

08000de4 <_write>:
LED ledred;
LED ledblue;
BUTTON button;
CLOCK clock;
BUZZER buzz;
int _write(int fd, char* ptr, int len) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
      HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <_write+0x28>)
 8000dfc:	f004 f860 	bl	8004ec0 <HAL_UART_Transmit>
      return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
  }
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000560 	.word	0x20000560

08000e10 <commTask>:
int commTask()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000e16:	1db9      	adds	r1, r7, #6
 8000e18:	230a      	movs	r3, #10
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <commTask+0xe8>)
 8000e1e:	f004 f8e3 	bl	8004fe8 <HAL_UART_Receive>
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d020      	beq.n	8000e6e <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <commTask+0xe8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d011      	beq.n	8000e5e <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <commTask+0xe8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2208      	movs	r2, #8
 8000e40:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000e42:	e00c      	b.n	8000e5e <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <commTask+0xec>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	492c      	ldr	r1, [pc, #176]	; (8000efc <commTask+0xec>)
 8000e4c:	600a      	str	r2, [r1, #0]
 8000e4e:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <commTask+0xf0>)
 8000e50:	1899      	adds	r1, r3, r2
 8000e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e56:	2201      	movs	r2, #1
 8000e58:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <commTask+0xe8>)
 8000e5a:	f004 f831 	bl	8004ec0 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <commTask+0xec>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <commTask+0xf4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dbec      	blt.n	8000e44 <commTask+0x34>
		}

		return 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e03f      	b.n	8000eee <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	2b0d      	cmp	r3, #13
 8000e72:	d023      	beq.n	8000ebc <commTask+0xac>
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d020      	beq.n	8000ebc <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <commTask+0xf4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b63      	cmp	r3, #99	; 0x63
 8000e80:	dd05      	ble.n	8000e8e <commTask+0x7e>
		{
			cmdcount = 0;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <commTask+0xf4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <commTask+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <commTask+0xf4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	491b      	ldr	r1, [pc, #108]	; (8000f04 <commTask+0xf4>)
 8000e96:	600a      	str	r2, [r1, #0]
 8000e98:	79b9      	ldrb	r1, [r7, #6]
 8000e9a:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <commTask+0xf0>)
 8000e9c:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e025      	b.n	8000eee <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <commTask+0xec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	4914      	ldr	r1, [pc, #80]	; (8000efc <commTask+0xec>)
 8000eaa:	600a      	str	r2, [r1, #0]
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <commTask+0xf0>)
 8000eae:	1899      	adds	r1, r3, r2
 8000eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <commTask+0xe8>)
 8000eb8:	f004 f802 	bl	8004ec0 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <commTask+0xec>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <commTask+0xf4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbec      	blt.n	8000ea2 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ecc:	2202      	movs	r2, #2
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <commTask+0xf8>)
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <commTask+0xe8>)
 8000ed2:	f003 fff5 	bl	8004ec0 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <commTask+0xf4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <commTask+0xf0>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <commTask+0xf4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <commTask+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000560 	.word	0x20000560
 8000efc:	20000654 	.word	0x20000654
 8000f00:	200005ec 	.word	0x200005ec
 8000f04:	20000650 	.word	0x20000650
 8000f08:	08007c40 	.word	0x08007c40

08000f0c <handleCommand>:

void handleCommand()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	f107 0208 	add.w	r2, r7, #8
 8000f18:	494f      	ldr	r1, [pc, #316]	; (8001058 <handleCommand+0x14c>)
 8000f1a:	4850      	ldr	r0, [pc, #320]	; (800105c <handleCommand+0x150>)
 8000f1c:	f005 fa0c 	bl	8006338 <siscanf>
 8000f20:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8092 	beq.w	800104e <handleCommand+0x142>
  {
	  return;
  }

  if (strcmp(cmd, "startled") == 0)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	494c      	ldr	r1, [pc, #304]	; (8001060 <handleCommand+0x154>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f94d 	bl	80001d0 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d106      	bne.n	8000f4a <handleCommand+0x3e>
  {
	  ledOn(&ledblue);
 8000f3c:	4849      	ldr	r0, [pc, #292]	; (8001064 <handleCommand+0x158>)
 8000f3e:	f7ff fb54 	bl	80005ea <ledOn>
	  ledOn(&ledred);
 8000f42:	4849      	ldr	r0, [pc, #292]	; (8001068 <handleCommand+0x15c>)
 8000f44:	f7ff fb51 	bl	80005ea <ledOn>
 8000f48:	e082      	b.n	8001050 <handleCommand+0x144>


  }
  else if (strcmp(cmd, "stopled") == 0)
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4947      	ldr	r1, [pc, #284]	; (800106c <handleCommand+0x160>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f93d 	bl	80001d0 <strcmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <handleCommand+0x5e>
  {
	  ledOff(&ledred);
 8000f5c:	4842      	ldr	r0, [pc, #264]	; (8001068 <handleCommand+0x15c>)
 8000f5e:	f7ff fb57 	bl	8000610 <ledOff>
	  ledOff(&ledblue);
 8000f62:	4840      	ldr	r0, [pc, #256]	; (8001064 <handleCommand+0x158>)
 8000f64:	f7ff fb54 	bl	8000610 <ledOff>
 8000f68:	e072      	b.n	8001050 <handleCommand+0x144>


  }
  else if (strcmp(cmd, "ledblink") == 0)
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4940      	ldr	r1, [pc, #256]	; (8001070 <handleCommand+0x164>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f92d 	bl	80001d0 <strcmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10a      	bne.n	8000f92 <handleCommand+0x86>
   {
	 ledBlink(&ledred, maxCount);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <handleCommand+0x15c>)
 8000f82:	f7ff fb58 	bl	8000636 <ledBlink>
	 ledBlink(&ledblue, maxCount);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4836      	ldr	r0, [pc, #216]	; (8001064 <handleCommand+0x158>)
 8000f8c:	f7ff fb53 	bl	8000636 <ledBlink>
 8000f90:	e05e      	b.n	8001050 <handleCommand+0x144>
   }
  else if (strcmp(cmd, "setled") == 0)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4937      	ldr	r1, [pc, #220]	; (8001074 <handleCommand+0x168>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f919 	bl	80001d0 <strcmp>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d108      	bne.n	8000fb6 <handleCommand+0xaa>
   {
	  HAL_TIM_Base_Start_IT(&htim4);
 8000fa4:	4834      	ldr	r0, [pc, #208]	; (8001078 <handleCommand+0x16c>)
 8000fa6:	f002 fb93 	bl	80036d0 <HAL_TIM_Base_Start_IT>
	  ledsetbrightness(&ledred,maxCount);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	482e      	ldr	r0, [pc, #184]	; (8001068 <handleCommand+0x15c>)
 8000fb0:	f7ff fb74 	bl	800069c <ledsetbrightness>
 8000fb4:	e04c      	b.n	8001050 <handleCommand+0x144>

	  //ledsetbrightness(&ledblue,maxCount);
   }
  else if (strcmp(cmd, "gettick") == 0)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4930      	ldr	r1, [pc, #192]	; (800107c <handleCommand+0x170>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff f907 	bl	80001d0 <strcmp>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10a      	bne.n	8000fde <handleCommand+0xd2>
    {
 	  getClockTick(&clock, &tick);
 8000fc8:	492d      	ldr	r1, [pc, #180]	; (8001080 <handleCommand+0x174>)
 8000fca:	482e      	ldr	r0, [pc, #184]	; (8001084 <handleCommand+0x178>)
 8000fcc:	f7ff fbbf 	bl	800074e <getClockTick>
 	  printf("tick is %u\n\r", tick);
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <handleCommand+0x174>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	482c      	ldr	r0, [pc, #176]	; (8001088 <handleCommand+0x17c>)
 8000fd8:	f005 f920 	bl	800621c <iprintf>
 8000fdc:	e038      	b.n	8001050 <handleCommand+0x144>
    }
  else if (strcmp(cmd, "gettime") == 0)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	492a      	ldr	r1, [pc, #168]	; (800108c <handleCommand+0x180>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f8f3 	bl	80001d0 <strcmp>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10f      	bne.n	8001010 <handleCommand+0x104>
    {
 	  getTime(&clock, &sec, &min, &hour);
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <handleCommand+0x184>)
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <handleCommand+0x188>)
 8000ff4:	4928      	ldr	r1, [pc, #160]	; (8001098 <handleCommand+0x18c>)
 8000ff6:	4823      	ldr	r0, [pc, #140]	; (8001084 <handleCommand+0x178>)
 8000ff8:	f7ff fbb8 	bl	800076c <getTime>
	  printf("time is %zu,%zu,%zu\n\r", hour, min, sec);
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <handleCommand+0x184>)
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <handleCommand+0x188>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <handleCommand+0x18c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4824      	ldr	r0, [pc, #144]	; (800109c <handleCommand+0x190>)
 800100a:	f005 f907 	bl	800621c <iprintf>
 800100e:	e01f      	b.n	8001050 <handleCommand+0x144>
    }

  else if (strcmp(cmd, "startbuzzer") == 0)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4922      	ldr	r1, [pc, #136]	; (80010a0 <handleCommand+0x194>)
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff f8da 	bl	80001d0 <strcmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <handleCommand+0x122>
   {
	  buzzerStartPlay(&buzz, song, length);
 8001022:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <handleCommand+0x198>)
 8001024:	4920      	ldr	r1, [pc, #128]	; (80010a8 <handleCommand+0x19c>)
 8001026:	4821      	ldr	r0, [pc, #132]	; (80010ac <handleCommand+0x1a0>)
 8001028:	f7ff fe1c 	bl	8000c64 <buzzerStartPlay>
 800102c:	e010      	b.n	8001050 <handleCommand+0x144>
   }
  else if (strcmp(cmd, "stopbuzzer") == 0)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	491f      	ldr	r1, [pc, #124]	; (80010b0 <handleCommand+0x1a4>)
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f8cb 	bl	80001d0 <strcmp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <handleCommand+0x13a>
   {
	  buzzerStopPlay();
 8001040:	f7ff fe56 	bl	8000cf0 <buzzerStopPlay>
 8001044:	e004      	b.n	8001050 <handleCommand+0x144>
   }
  else
  {
	  printf("Invalid command\r\n");
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <handleCommand+0x1a8>)
 8001048:	f005 f96e 	bl	8006328 <puts>
 800104c:	e000      	b.n	8001050 <handleCommand+0x144>
	  return;
 800104e:	bf00      	nop
  }
}
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08007c44 	.word	0x08007c44
 800105c:	200005ec 	.word	0x200005ec
 8001060:	08007c4c 	.word	0x08007c4c
 8001064:	20000684 	.word	0x20000684
 8001068:	20000668 	.word	0x20000668
 800106c:	08007c58 	.word	0x08007c58
 8001070:	08007c60 	.word	0x08007c60
 8001074:	08007c6c 	.word	0x08007c6c
 8001078:	200004c8 	.word	0x200004c8
 800107c:	08007c74 	.word	0x08007c74
 8001080:	20000658 	.word	0x20000658
 8001084:	200006b4 	.word	0x200006b4
 8001088:	08007c7c 	.word	0x08007c7c
 800108c:	08007c8c 	.word	0x08007c8c
 8001090:	20000664 	.word	0x20000664
 8001094:	20000660 	.word	0x20000660
 8001098:	2000065c 	.word	0x2000065c
 800109c:	08007c94 	.word	0x08007c94
 80010a0:	08007cac 	.word	0x08007cac
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	20000000 	.word	0x20000000
 80010ac:	200006c0 	.word	0x200006c0
 80010b0:	08007cb8 	.word	0x08007cb8
 80010b4:	08007cc4 	.word	0x08007cc4

080010b8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if(htim==&htim4){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d107      	bne.n	80010d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		  HAL_GPIO_WritePin(ledred.GPIOx, ledred.GPIO_Pin, 0);
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80010ce:	8a11      	ldrh	r1, [r2, #16]
 80010d0:	2200      	movs	r2, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 feaa 	bl	8001e2c <HAL_GPIO_WritePin>
	}
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200004c8 	.word	0x200004c8
 80010e4:	20000668 	.word	0x20000668

080010e8 <HAL_GPIO_EXTI_Callback>:

  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]

  }
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_TIM_PeriodElapsedCallback>:
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	  if(htim == &htim6){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d10c      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x2a>
		  clockInInterrupt(&clock);
 8001110:	480f      	ldr	r0, [pc, #60]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001112:	f7ff fb6f 	bl	80007f4 <clockInInterrupt>
		  buzzerOnInterrupt(&buzz);
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001118:	f7ff fdf8 	bl	8000d0c <buzzerOnInterrupt>
		  ledOnTimerInterrupt(&ledblue);
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800111e:	f7ff fa9b 	bl	8000658 <ledOnTimerInterrupt>
		  ledOnTimerInterrupt(&ledred);
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001124:	f7ff fa98 	bl	8000658 <ledOnTimerInterrupt>

	  }
	  else if(htim==&htim4){
		  HAL_GPIO_WritePin(ledred.GPIOx, ledred.GPIO_Pin, 1);
	  }
}
 8001128:	e00b      	b.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x42>
	  else if(htim==&htim4){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d107      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x42>
		  HAL_GPIO_WritePin(ledred.GPIOx, ledred.GPIO_Pin, 1);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001138:	8a11      	ldrh	r1, [r2, #16]
 800113a:	2201      	movs	r2, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fe75 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000514 	.word	0x20000514
 8001150:	200006b4 	.word	0x200006b4
 8001154:	200006c0 	.word	0x200006c0
 8001158:	20000684 	.word	0x20000684
 800115c:	20000668 	.word	0x20000668
 8001160:	200004c8 	.word	0x200004c8

08001164 <maininit>:
//		ledBlink(led, max);
//		break;
//	}
//	return 0;
//}
int maininit(){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af02      	add	r7, sp, #8
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800116a:	2036      	movs	r0, #54	; 0x36
 800116c:	f000 fc1b 	bl	80019a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001170:	201e      	movs	r0, #30
 8001172:	f000 fc18 	bl	80019a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001176:	201d      	movs	r0, #29
 8001178:	f000 fc15 	bl	80019a6 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start(&htim3);
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <maininit+0x7c>)
 800117e:	f002 fa17 	bl	80035b0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <maininit+0x80>)
 8001184:	f002 faa4 	bl	80036d0 <HAL_TIM_Base_Start_IT>


	buttoninit(&button, SWO_GPIO_Port, SWO_Pin);
 8001188:	2208      	movs	r2, #8
 800118a:	4917      	ldr	r1, [pc, #92]	; (80011e8 <maininit+0x84>)
 800118c:	4817      	ldr	r0, [pc, #92]	; (80011ec <maininit+0x88>)
 800118e:	f000 f845 	bl	800121c <buttoninit>
	ledInit(&ledred, RED_LED_GPIO_Port, RED_LED_Pin,TIM_CHANNEL_1,&htim4);
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <maininit+0x8c>)
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <maininit+0x90>)
 80011a0:	f7ff fa00 	bl	80005a4 <ledInit>
	ledInit(&ledblue, GPIOA, GPIO_PIN_5,TIM_CHANNEL_2,&htim4);
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <maininit+0x8c>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2304      	movs	r3, #4
 80011aa:	2220      	movs	r2, #32
 80011ac:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <maininit+0x94>)
 80011b2:	f7ff f9f7 	bl	80005a4 <ledInit>

	HAL_TIM_PWM_Start_IT(ledred.htim, ledred.CHANNEL);
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <maininit+0x90>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <maininit+0x90>)
 80011bc:	6952      	ldr	r2, [r2, #20]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fce9 	bl	8003b98 <HAL_TIM_PWM_Start_IT>
	clockInit(&clock,&htim6);
 80011c6:	4907      	ldr	r1, [pc, #28]	; (80011e4 <maininit+0x80>)
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <maininit+0x98>)
 80011ca:	f7ff faaf 	bl	800072c <clockInit>
	buzzerInit(&buzz,&htim3);
 80011ce:	4904      	ldr	r1, [pc, #16]	; (80011e0 <maininit+0x7c>)
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <maininit+0x9c>)
 80011d2:	f7ff fd38 	bl	8000c46 <buzzerInit>
	return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000047c 	.word	0x2000047c
 80011e4:	20000514 	.word	0x20000514
 80011e8:	48000400 	.word	0x48000400
 80011ec:	200006a0 	.word	0x200006a0
 80011f0:	200004c8 	.word	0x200004c8
 80011f4:	20000668 	.word	0x20000668
 80011f8:	20000684 	.word	0x20000684
 80011fc:	200006b4 	.word	0x200006b4
 8001200:	200006c0 	.word	0x200006c0

08001204 <mainloop>:
int mainloop(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	 if (commTask())
 8001208:	f7ff fe02 	bl	8000e10 <commTask>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <mainloop+0x12>
	 {
		 handleCommand();
 8001212:	f7ff fe7b 	bl	8000f0c <handleCommand>
	 }

	return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	bd80      	pop	{r7, pc}

0800121c <buttoninit>:
#include <stdint.h>
#include <stdlib.h>
#include "new_button.h"
#include "main.h"

void buttoninit(BUTTON* button, GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
	button->GPIOx= GPIOx;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin=GPIO_Pin;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	809a      	strh	r2, [r3, #4]
	 button->pushtime = 0;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
	 button->relesetime = 0;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
	 button->state=STATE_NOT_PRESSED;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x44>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x44>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x44>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_TIM_PWM_MspInit+0x38>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10b      	bne.n	80012c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40000400 	.word	0x40000400
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_TIM_Base_MspInit+0x78>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d114      	bne.n	8001318 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_TIM_Base_MspInit+0x7c>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_TIM_Base_MspInit+0x7c>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_TIM_Base_MspInit+0x7c>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	201e      	movs	r0, #30
 800130c:	f000 fb2f 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001310:	201e      	movs	r0, #30
 8001312:	f000 fb48 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001316:	e018      	b.n	800134a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_TIM_Base_MspInit+0x80>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d113      	bne.n	800134a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x7c>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_TIM_Base_MspInit+0x7c>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6593      	str	r3, [r2, #88]	; 0x58
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_TIM_Base_MspInit+0x7c>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2036      	movs	r0, #54	; 0x36
 8001340:	f000 fb15 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001344:	2036      	movs	r0, #54	; 0x36
 8001346:	f000 fb2e 	bl	80019a6 <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000800 	.word	0x40000800
 8001358:	40021000 	.word	0x40021000
 800135c:	40001000 	.word	0x40001000

08001360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_TIM_MspPostInit+0x64>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d11b      	bne.n	80013ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_TIM_MspPostInit+0x68>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_TIM_MspPostInit+0x68>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_TIM_MspPostInit+0x68>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139a:	2310      	movs	r3, #16
 800139c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_TIM_MspPostInit+0x6c>)
 80013b6:	f000 fb8f 	bl	8001ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ac      	sub	sp, #176	; 0xb0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2288      	movs	r2, #136	; 0x88
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 ff0b 	bl	800620c <memset>
  if(huart->Instance==USART2)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a25      	ldr	r2, [pc, #148]	; (8001490 <HAL_UART_MspInit+0xc0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d143      	bne.n	8001488 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001400:	2302      	movs	r3, #2
 8001402:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fbbb 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001418:	f7ff fc10 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_UART_MspInit+0xc4>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <HAL_UART_MspInit+0xc4>)
 8001422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001426:	6593      	str	r3, [r2, #88]	; 0x58
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_UART_MspInit+0xc4>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_UART_MspInit+0xc4>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_UART_MspInit+0xc4>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_UART_MspInit+0xc4>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800144c:	230c      	movs	r3, #12
 800144e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001464:	2307      	movs	r3, #7
 8001466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f000 fb30 	bl	8001ad8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2026      	movs	r0, #38	; 0x26
 800147e:	f000 fa76 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001482:	2026      	movs	r0, #38	; 0x26
 8001484:	f000 fa8f 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	37b0      	adds	r7, #176	; 0xb0
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40004400 	.word	0x40004400
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f948 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM4_IRQHandler+0x10>)
 80014f2:	f002 fca5 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200004c8 	.word	0x200004c8

08001500 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART2_IRQHandler+0x10>)
 8001506:	f003 fe41 	bl	800518c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000560 	.word	0x20000560

08001514 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800151c:	f000 fcb8 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <TIM6_DAC_IRQHandler+0x10>)
 800152a:	f002 fc89 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000514 	.word	0x20000514

08001538 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e00a      	b.n	8001560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800154a:	f3af 8000 	nop.w
 800154e:	4601      	mov	r1, r0
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	60ba      	str	r2, [r7, #8]
 8001556:	b2ca      	uxtb	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf0      	blt.n	800154a <_read+0x12>
	}

return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	605a      	str	r2, [r3, #4]
	return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_isatty>:

int _isatty(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	return 1;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
	return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f004 fdd4 	bl	80061b8 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20018000 	.word	0x20018000
 800163c:	00000400 	.word	0x00000400
 8001640:	200006cc 	.word	0x200006cc
 8001644:	200006e8 	.word	0x200006e8

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f004 fd93 	bl	80061c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7ff f8b8 	bl	8000812 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 80016b0:	08007ef0 	.word	0x08007ef0
  ldr r2, =_sbss
 80016b4:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 80016b8:	200006e4 	.word	0x200006e4

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_Init+0x3c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_Init+0x3c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f93e 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f80f 	bl	8001700 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	e001      	b.n	80016f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ee:	f7ff fdb1 	bl	8001254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_InitTick+0x6c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_InitTick+0x70>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f949 	bl	80019c2 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d809      	bhi.n	8001750 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f913 	bl	800196e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_InitTick+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e007      	b.n	8001760 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e004      	b.n	8001760 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e001      	b.n	8001760 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003f8 	.word	0x200003f8
 8001770:	200003f0 	.word	0x200003f0
 8001774:	200003f4 	.word	0x200003f4

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200003f8 	.word	0x200003f8
 800179c:	200006d0 	.word	0x200006d0

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200006d0 	.word	0x200006d0

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d008      	beq.n	8001a04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2204      	movs	r2, #4
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e022      	b.n	8001a4a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 020e 	bic.w	r2, r2, #14
 8001a12:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 021c 	and.w	r2, r3, #28
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d005      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2204      	movs	r2, #4
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e029      	b.n	8001ace <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 020e 	bic.w	r2, r2, #14
 8001a88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f003 021c 	and.w	r2, r3, #28
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
    }
  }
  return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	e17f      	b.n	8001de8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8171 	beq.w	8001de2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d005      	beq.n	8001b18 <HAL_GPIO_Init+0x40>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d130      	bne.n	8001b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b4e:	2201      	movs	r2, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 0201 	and.w	r2, r3, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d118      	bne.n	8001bb8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	6939      	ldr	r1, [r7, #16]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ac 	beq.w	8001de2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	; (8001e08 <HAL_GPIO_Init+0x330>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	4a5e      	ldr	r2, [pc, #376]	; (8001e08 <HAL_GPIO_Init+0x330>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6613      	str	r3, [r2, #96]	; 0x60
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <HAL_GPIO_Init+0x330>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca2:	4a5a      	ldr	r2, [pc, #360]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ccc:	d025      	beq.n	8001d1a <HAL_GPIO_Init+0x242>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x338>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <HAL_GPIO_Init+0x23e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x33c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x23a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x340>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x236>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x344>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x232>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	; (8001e20 <HAL_GPIO_Init+0x348>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x22e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_GPIO_Init+0x34c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x22a>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e00c      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e00a      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e008      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x244>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d2c:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5e:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d88:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <HAL_GPIO_Init+0x350>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae78 	bne.w	8001ae8 <HAL_GPIO_Init+0x10>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	48000400 	.word	0x48000400
 8001e14:	48000800 	.word	0x48000800
 8001e18:	48000c00 	.word	0x48000c00
 8001e1c:	48001000 	.word	0x48001000
 8001e20:	48001400 	.word	0x48001400
 8001e24:	48001800 	.word	0x48001800
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43d9      	mvns	r1, r3
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f91a 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40007000 	.word	0x40007000

08001edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eea:	d130      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef8:	d038      	beq.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2232      	movs	r2, #50	; 0x32
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0c9b      	lsrs	r3, r3, #18
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f20:	e002      	b.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f34:	d102      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f2      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d110      	bne.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e00f      	b.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	d007      	beq.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f64:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	200003f0 	.word	0x200003f0
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e3ca      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9a:	4b97      	ldr	r3, [pc, #604]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa4:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80e4 	beq.w	8002184 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4a>
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	f040 808b 	bne.w	80020e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	f040 8087 	bne.w	80020e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fd2:	4b89      	ldr	r3, [pc, #548]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x62>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e3a2      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_RCC_OscConfig+0x7c>
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002002:	e005      	b.n	8002010 <HAL_RCC_OscConfig+0x88>
 8002004:	4b7c      	ldr	r3, [pc, #496]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	4293      	cmp	r3, r2
 8002012:	d223      	bcs.n	800205c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fd55 	bl	8002ac8 <RCC_SetFlashLatencyFromMSIRange>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e383      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002028:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	496d      	ldr	r1, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002046:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4968      	ldr	r1, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
 800205a:	e025      	b.n	80020a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4960      	ldr	r1, [pc, #384]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	495b      	ldr	r1, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fd15 	bl	8002ac8 <RCC_SetFlashLatencyFromMSIRange>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e343      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020a8:	f000 fc4a 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	4950      	ldr	r1, [pc, #320]	; (80021fc <HAL_RCC_OscConfig+0x274>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	4a4e      	ldr	r2, [pc, #312]	; (8002200 <HAL_RCC_OscConfig+0x278>)
 80020c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb17 	bl	8001700 <HAL_InitTick>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d052      	beq.n	8002182 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	e327      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d032      	beq.n	800214e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a42      	ldr	r2, [pc, #264]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fb54 	bl	80017a0 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020fc:	f7ff fb50 	bl	80017a0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e310      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800210e:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a36      	ldr	r2, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4931      	ldr	r1, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	492c      	ldr	r1, [pc, #176]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e01a      	b.n	8002184 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800215a:	f7ff fb21 	bl	80017a0 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002162:	f7ff fb1d 	bl	80017a0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e2dd      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x1da>
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002182:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d074      	beq.n	800227a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b08      	cmp	r3, #8
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x21a>
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d10e      	bne.n	80021ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d064      	beq.n	8002278 <HAL_RCC_OscConfig+0x2f0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d160      	bne.n	8002278 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e2ba      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x24a>
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e026      	b.n	8002220 <HAL_RCC_OscConfig+0x298>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021da:	d115      	bne.n	8002208 <HAL_RCC_OscConfig+0x280>
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a02      	ldr	r2, [pc, #8]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x298>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08007ce4 	.word	0x08007ce4
 8002200:	200003f0 	.word	0x200003f0
 8002204:	200003f4 	.word	0x200003f4
 8002208:	4ba0      	ldr	r3, [pc, #640]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a9f      	ldr	r2, [pc, #636]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b9d      	ldr	r3, [pc, #628]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a9c      	ldr	r2, [pc, #624]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff faba 	bl	80017a0 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff fab6 	bl	80017a0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e276      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002242:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x2a8>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff faa6 	bl	80017a0 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff faa2 	bl	80017a0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e262      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x2d0>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d060      	beq.n	8002348 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x310>
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d116      	bne.n	80022c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002298:	4b7c      	ldr	r3, [pc, #496]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_OscConfig+0x328>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e23f      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	4973      	ldr	r1, [pc, #460]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c4:	e040      	b.n	8002348 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d023      	beq.n	8002316 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ce:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff fa61 	bl	80017a0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fa5d 	bl	80017a0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e21d      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	495f      	ldr	r1, [pc, #380]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e018      	b.n	8002348 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5c      	ldr	r2, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800231c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff fa3d 	bl	80017a0 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff fa39 	bl	80017a0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1f9      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d03c      	beq.n	80023ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01c      	beq.n	8002396 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	4a4a      	ldr	r2, [pc, #296]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7ff fa18 	bl	80017a0 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fa14 	bl	80017a0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e1d4      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ef      	beq.n	8002374 <HAL_RCC_OscConfig+0x3ec>
 8002394:	e01b      	b.n	80023ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239c:	4a3b      	ldr	r2, [pc, #236]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7ff f9fb 	bl	80017a0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7ff f9f7 	bl	80017a0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1b7      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c0:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80023c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80a6 	beq.w	8002528 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10d      	bne.n	8002408 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x504>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_RCC_OscConfig+0x508>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d118      	bne.n	8002446 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_RCC_OscConfig+0x508>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x508>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002420:	f7ff f9be 	bl	80017a0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002428:	f7ff f9ba 	bl	80017a0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e17a      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x508>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_RCC_OscConfig+0x4d8>
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800245e:	e029      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d115      	bne.n	8002494 <HAL_RCC_OscConfig+0x50c>
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_RCC_OscConfig+0x504>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_RCC_OscConfig+0x504>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	4b9c      	ldr	r3, [pc, #624]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	4a9b      	ldr	r2, [pc, #620]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024a4:	4b98      	ldr	r3, [pc, #608]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	4a97      	ldr	r2, [pc, #604]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d016      	beq.n	80024ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7ff f970 	bl	80017a0 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7ff f96c 	bl	80017a0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e12a      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	4b8b      	ldr	r3, [pc, #556]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ed      	beq.n	80024c4 <HAL_RCC_OscConfig+0x53c>
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7ff f959 	bl	80017a0 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7ff f955 	bl	80017a0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e113      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002508:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ed      	bne.n	80024f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002516:	7ffb      	ldrb	r3, [r7, #31]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b7a      	ldr	r3, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	4a79      	ldr	r2, [pc, #484]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80fe 	beq.w	800272e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 80d0 	bne.w	80026dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800253c:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d130      	bne.n	80025b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	3b01      	subs	r3, #1
 800255c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d127      	bne.n	80025b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800257c:	2a07      	cmp	r2, #7
 800257e:	bf14      	ite	ne
 8002580:	2201      	movne	r2, #1
 8002582:	2200      	moveq	r2, #0
 8002584:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002586:	4293      	cmp	r3, r2
 8002588:	d113      	bne.n	80025b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d06e      	beq.n	8002690 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d069      	beq.n	800268c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0ad      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025d4:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025e0:	f7ff f8de 	bl	80017a0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff f8da 	bl	80017a0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e09a      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_OscConfig+0x784>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002616:	3a01      	subs	r2, #1
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002620:	0212      	lsls	r2, r2, #8
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0552      	lsls	r2, r2, #21
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002634:	0852      	lsrs	r2, r2, #1
 8002636:	3a01      	subs	r2, #1
 8002638:	0652      	lsls	r2, r2, #25
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002640:	0912      	lsrs	r2, r2, #4
 8002642:	0452      	lsls	r2, r2, #17
 8002644:	430a      	orrs	r2, r1
 8002646:	4930      	ldr	r1, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002648:	4313      	orrs	r3, r2
 800264a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2d      	ldr	r2, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800265e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002662:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002664:	f7ff f89c 	bl	80017a0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff f898 	bl	80017a0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e058      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800268a:	e050      	b.n	800272e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e04f      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d148      	bne.n	800272e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026b4:	f7ff f874 	bl	80017a0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff f870 	bl	80017a0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e030      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x734>
 80026da:	e028      	b.n	800272e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d023      	beq.n	800272a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x780>)
 80026e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff f857 	bl	80017a0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f4:	e00c      	b.n	8002710 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7ff f853 	bl	80017a0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d905      	bls.n	8002710 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e013      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
 8002708:	40021000 	.word	0x40021000
 800270c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_OscConfig+0x7b0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ec      	bne.n	80026f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x7b0>)
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	4905      	ldr	r1, [pc, #20]	; (8002738 <HAL_RCC_OscConfig+0x7b0>)
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_OscConfig+0x7b4>)
 8002724:	4013      	ands	r3, r2
 8002726:	60cb      	str	r3, [r1, #12]
 8002728:	e001      	b.n	800272e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	feeefffc 	.word	0xfeeefffc

08002740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0e7      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d910      	bls.n	8002784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4970      	ldr	r1, [pc, #448]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0cf      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d010      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279c:	429a      	cmp	r2, r3
 800279e:	d908      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4960      	ldr	r1, [pc, #384]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d04c      	beq.n	8002858 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	4b5a      	ldr	r3, [pc, #360]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d121      	bne.n	8002816 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0a6      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027de:	4b54      	ldr	r3, [pc, #336]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e09a      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f6:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e08e      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e086      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4943      	ldr	r1, [pc, #268]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe ffba 	bl	80017a0 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe ffb6 	bl	80017a0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e06e      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002870:	429a      	cmp	r2, r3
 8002872:	d208      	bcs.n	8002886 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	492b      	ldr	r1, [pc, #172]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d210      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	4923      	ldr	r1, [pc, #140]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_RCC_ClockConfig+0x1ec>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e036      	b.n	8002924 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4918      	ldr	r1, [pc, #96]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4910      	ldr	r1, [pc, #64]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f4:	f000 f824 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	490b      	ldr	r1, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1f4>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1f8>)
 8002912:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1fc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fef1 	bl	8001700 <HAL_InitTick>
 800291e:	4603      	mov	r3, r0
 8002920:	72fb      	strb	r3, [r7, #11]

  return status;
 8002922:	7afb      	ldrb	r3, [r7, #11]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40022000 	.word	0x40022000
 8002930:	40021000 	.word	0x40021000
 8002934:	08007ce4 	.word	0x08007ce4
 8002938:	200003f0 	.word	0x200003f0
 800293c:	200003f4 	.word	0x200003f4

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002958:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d121      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d11e      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e005      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d102      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	e004      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d134      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d003      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0xac>
 80029e4:	e005      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80029e8:	617b      	str	r3, [r7, #20]
      break;
 80029ea:	e005      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ee:	617b      	str	r3, [r7, #20]
      break;
 80029f0:	e002      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	3301      	adds	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	0e5b      	lsrs	r3, r3, #25
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a38:	69bb      	ldr	r3, [r7, #24]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08007cfc 	.word	0x08007cfc
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	200003f0 	.word	0x200003f0

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a74:	f7ff fff0 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08007cf4 	.word	0x08007cf4

08002a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa0:	f7ff ffda 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0adb      	lsrs	r3, r3, #11
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08007cf4 	.word	0x08007cf4

08002ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ae0:	f7ff f9ee 	bl	8001ec0 <HAL_PWREx_GetVoltageRange>
 8002ae4:	6178      	str	r0, [r7, #20]
 8002ae6:	e014      	b.n	8002b12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b00:	f7ff f9de 	bl	8001ec0 <HAL_PWREx_GetVoltageRange>
 8002b04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d10b      	bne.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d919      	bls.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2ba0      	cmp	r3, #160	; 0xa0
 8002b24:	d902      	bls.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b26:	2302      	movs	r3, #2
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e013      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e010      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d902      	bls.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b38:	2303      	movs	r3, #3
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e00a      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d102      	bne.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b44:	2302      	movs	r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e004      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d101      	bne.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b50:	2301      	movs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4909      	ldr	r1, [pc, #36]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40022000 	.word	0x40022000

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b94:	2300      	movs	r3, #0
 8002b96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d041      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bac:	d02a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb2:	d824      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bbe:	d81e      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc8:	d010      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bca:	e018      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bcc:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a85      	ldr	r2, [pc, #532]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd8:	e015      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fabb 	bl	800315c <RCCEx_PLLSAI1_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bea:	e00c      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3320      	adds	r3, #32
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fba6 	bl	8003344 <RCCEx_PLLSAI2_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bfc:	e003      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	74fb      	strb	r3, [r7, #19]
      break;
 8002c02:	e000      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c0c:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1a:	4973      	ldr	r1, [pc, #460]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c22:	e001      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d041      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c3c:	d02a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c42:	d824      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c4e:	d81e      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d010      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c5c:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a61      	ldr	r2, [pc, #388]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c68:	e015      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fa73 	bl	800315c <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c7a:	e00c      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3320      	adds	r3, #32
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fb5e 	bl	8003344 <RCCEx_PLLSAI2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c8c:	e003      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	74fb      	strb	r3, [r7, #19]
      break;
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c9c:	4b52      	ldr	r3, [pc, #328]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002caa:	494f      	ldr	r1, [pc, #316]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cb2:	e001      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a0 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6593      	str	r3, [r2, #88]	; 0x58
 8002cec:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3a      	ldr	r2, [pc, #232]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fd4a 	bl	80017a0 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d0e:	e009      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d10:	f7fe fd46 	bl	80017a0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	74fb      	strb	r3, [r7, #19]
        break;
 8002d22:	e005      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ef      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d15c      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d36:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01f      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d019      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d60:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fd05 	bl	80017a0 <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d98:	e00b      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fd01 	bl	80017a0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d902      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	74fb      	strb	r3, [r7, #19]
            break;
 8002db0:	e006      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ec      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b9e      	ldr	r3, [pc, #632]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	4a9d      	ldr	r2, [pc, #628]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4b98      	ldr	r3, [pc, #608]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f023 0203 	bic.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	4994      	ldr	r1, [pc, #592]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f023 020c 	bic.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	498c      	ldr	r1, [pc, #560]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e56:	4b87      	ldr	r3, [pc, #540]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4983      	ldr	r1, [pc, #524]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	497b      	ldr	r1, [pc, #492]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	4972      	ldr	r1, [pc, #456]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ebc:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	496a      	ldr	r1, [pc, #424]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	4961      	ldr	r1, [pc, #388]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f00:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	4959      	ldr	r1, [pc, #356]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f22:	4b54      	ldr	r3, [pc, #336]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	4950      	ldr	r1, [pc, #320]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	4948      	ldr	r1, [pc, #288]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	493f      	ldr	r1, [pc, #252]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d028      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f88:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f96:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa8:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb2:	60d3      	str	r3, [r2, #12]
 8002fb4:	e011      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f8c8 	bl	800315c <RCCEx_PLLSAI1_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d028      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fe6:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	491f      	ldr	r1, [pc, #124]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003004:	d106      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003010:	60d3      	str	r3, [r2, #12]
 8003012:	e011      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301c:	d10c      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f899 	bl	800315c <RCCEx_PLLSAI1_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02b      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003062:	d109      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a02      	ldr	r2, [pc, #8]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306e:	60d3      	str	r3, [r2, #12]
 8003070:	e014      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003080:	d10c      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f867 	bl	800315c <RCCEx_PLLSAI1_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02f      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b6:	4928      	ldr	r1, [pc, #160]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f844 	bl	800315c <RCCEx_PLLSAI1_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d014      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	74bb      	strb	r3, [r7, #18]
 80030e2:	e011      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3320      	adds	r3, #32
 80030f2:	2102      	movs	r1, #2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f925 	bl	8003344 <RCCEx_PLLSAI2_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003122:	490d      	ldr	r1, [pc, #52]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003146:	4904      	ldr	r1, [pc, #16]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800314e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000

0800315c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800316a:	4b75      	ldr	r3, [pc, #468]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003176:	4b72      	ldr	r3, [pc, #456]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0203 	and.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d10d      	bne.n	80031a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
       ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800318e:	4b6c      	ldr	r3, [pc, #432]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
       ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d047      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e044      	b.n	8003232 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d018      	beq.n	80031e2 <RCCEx_PLLSAI1_Config+0x86>
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d825      	bhi.n	8003200 <RCCEx_PLLSAI1_Config+0xa4>
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d002      	beq.n	80031be <RCCEx_PLLSAI1_Config+0x62>
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d009      	beq.n	80031d0 <RCCEx_PLLSAI1_Config+0x74>
 80031bc:	e020      	b.n	8003200 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031be:	4b60      	ldr	r3, [pc, #384]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11d      	bne.n	8003206 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ce:	e01a      	b.n	8003206 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031d0:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d116      	bne.n	800320a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e0:	e013      	b.n	800320a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031e2:	4b57      	ldr	r3, [pc, #348]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ee:	4b54      	ldr	r3, [pc, #336]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031fe:	e006      	b.n	800320e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      break;
 8003204:	e004      	b.n	8003210 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800320e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10d      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003216:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	430b      	orrs	r3, r1
 800322c:	4944      	ldr	r1, [pc, #272]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d17d      	bne.n	8003334 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003238:	4b41      	ldr	r3, [pc, #260]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a40      	ldr	r2, [pc, #256]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003244:	f7fe faac 	bl	80017a0 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800324a:	e009      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800324c:	f7fe faa8 	bl	80017a0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d902      	bls.n	8003260 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	73fb      	strb	r3, [r7, #15]
        break;
 800325e:	e005      	b.n	800326c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003260:	4b37      	ldr	r3, [pc, #220]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ef      	bne.n	800324c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d160      	bne.n	8003334 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d111      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6892      	ldr	r2, [r2, #8]
 8003288:	0211      	lsls	r1, r2, #8
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68d2      	ldr	r2, [r2, #12]
 800328e:	0912      	lsrs	r2, r2, #4
 8003290:	0452      	lsls	r2, r2, #17
 8003292:	430a      	orrs	r2, r1
 8003294:	492a      	ldr	r1, [pc, #168]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	610b      	str	r3, [r1, #16]
 800329a:	e027      	b.n	80032ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d112      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6892      	ldr	r2, [r2, #8]
 80032b2:	0211      	lsls	r1, r2, #8
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6912      	ldr	r2, [r2, #16]
 80032b8:	0852      	lsrs	r2, r2, #1
 80032ba:	3a01      	subs	r2, #1
 80032bc:	0552      	lsls	r2, r2, #21
 80032be:	430a      	orrs	r2, r1
 80032c0:	491f      	ldr	r1, [pc, #124]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	610b      	str	r3, [r1, #16]
 80032c6:	e011      	b.n	80032ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	0211      	lsls	r1, r2, #8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6952      	ldr	r2, [r2, #20]
 80032de:	0852      	lsrs	r2, r2, #1
 80032e0:	3a01      	subs	r2, #1
 80032e2:	0652      	lsls	r2, r2, #25
 80032e4:	430a      	orrs	r2, r1
 80032e6:	4916      	ldr	r1, [pc, #88]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe fa52 	bl	80017a0 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032fe:	e009      	b.n	8003314 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003300:	f7fe fa4e 	bl	80017a0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d902      	bls.n	8003314 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	73fb      	strb	r3, [r7, #15]
          break;
 8003312:	e005      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	4904      	ldr	r1, [pc, #16]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000

08003344 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003352:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d018      	beq.n	8003390 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800335e:	4b67      	ldr	r3, [pc, #412]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0203 	and.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d10d      	bne.n	800338a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
       ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
       ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d047      	beq.n	800341a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e044      	b.n	800341a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d018      	beq.n	80033ca <RCCEx_PLLSAI2_Config+0x86>
 8003398:	2b03      	cmp	r3, #3
 800339a:	d825      	bhi.n	80033e8 <RCCEx_PLLSAI2_Config+0xa4>
 800339c:	2b01      	cmp	r3, #1
 800339e:	d002      	beq.n	80033a6 <RCCEx_PLLSAI2_Config+0x62>
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d009      	beq.n	80033b8 <RCCEx_PLLSAI2_Config+0x74>
 80033a4:	e020      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033a6:	4b55      	ldr	r3, [pc, #340]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11d      	bne.n	80033ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b6:	e01a      	b.n	80033ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c8:	e013      	b.n	80033f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033ca:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033d6:	4b49      	ldr	r3, [pc, #292]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033e6:	e006      	b.n	80033f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e004      	b.n	80033f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ee:	bf00      	nop
 80033f0:	e002      	b.n	80033f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10d      	bne.n	800341a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	430b      	orrs	r3, r1
 8003414:	4939      	ldr	r1, [pc, #228]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d167      	bne.n	80034f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003420:	4b36      	ldr	r3, [pc, #216]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a35      	ldr	r2, [pc, #212]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fe f9b8 	bl	80017a0 <HAL_GetTick>
 8003430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003432:	e009      	b.n	8003448 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003434:	f7fe f9b4 	bl	80017a0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d902      	bls.n	8003448 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	73fb      	strb	r3, [r7, #15]
        break;
 8003446:	e005      	b.n	8003454 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003448:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ef      	bne.n	8003434 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d14a      	bne.n	80034f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d111      	bne.n	8003484 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003460:	4b26      	ldr	r3, [pc, #152]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	0211      	lsls	r1, r2, #8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	0912      	lsrs	r2, r2, #4
 8003478:	0452      	lsls	r2, r2, #17
 800347a:	430a      	orrs	r2, r1
 800347c:	491f      	ldr	r1, [pc, #124]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800347e:	4313      	orrs	r3, r2
 8003480:	614b      	str	r3, [r1, #20]
 8003482:	e011      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800348c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6892      	ldr	r2, [r2, #8]
 8003494:	0211      	lsls	r1, r2, #8
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6912      	ldr	r2, [r2, #16]
 800349a:	0852      	lsrs	r2, r2, #1
 800349c:	3a01      	subs	r2, #1
 800349e:	0652      	lsls	r2, r2, #25
 80034a0:	430a      	orrs	r2, r1
 80034a2:	4916      	ldr	r1, [pc, #88]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe f974 	bl	80017a0 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ba:	e009      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034bc:	f7fe f970 	bl	80017a0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d902      	bls.n	80034d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	73fb      	strb	r3, [r7, #15]
          break;
 80034ce:	e005      	b.n	80034dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4904      	ldr	r1, [pc, #16]	; (80034fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e049      	b.n	80035a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fed8 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 ff9a 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e047      	b.n	8003658 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_TIM_Base_Start+0xb4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_TIM_Base_Start+0x66>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d018      	beq.n	8003616 <HAL_TIM_Base_Start+0x66>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_TIM_Base_Start+0xb8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_TIM_Base_Start+0x66>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1e      	ldr	r2, [pc, #120]	; (800366c <HAL_TIM_Base_Start+0xbc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_TIM_Base_Start+0x66>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <HAL_TIM_Base_Start+0xc0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_TIM_Base_Start+0x66>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_TIM_Base_Start+0xc4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIM_Base_Start+0x66>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_TIM_Base_Start+0xc8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d115      	bne.n	8003642 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_TIM_Base_Start+0xcc>)
 800361e:	4013      	ands	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d015      	beq.n	8003654 <HAL_TIM_Base_Start+0xa4>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d011      	beq.n	8003654 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	e008      	b.n	8003654 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e000      	b.n	8003656 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	00010007 	.word	0x00010007

08003680 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <HAL_TIM_Base_Stop+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	f240 4344 	movw	r3, #1092	; 0x444
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_Base_Stop+0x38>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04f      	b.n	8003788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_TIM_Base_Start_IT+0xc4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d018      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_TIM_Base_Start_IT+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_TIM_Base_Start_IT+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d115      	bne.n	8003772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_TIM_Base_Start_IT+0xdc>)
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d015      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375e:	d011      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003770:	e008      	b.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e000      	b.n	8003786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40013400 	.word	0x40013400
 80037a8:	40014000 	.word	0x40014000
 80037ac:	00010007 	.word	0x00010007

080037b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e049      	b.n	8003856 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fd60 	bl	800129c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fe42 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start+0x24>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e03c      	b.n	80038fe <HAL_TIM_PWM_Start+0x9e>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d109      	bne.n	800389e <HAL_TIM_PWM_Start+0x3e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e02f      	b.n	80038fe <HAL_TIM_PWM_Start+0x9e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d109      	bne.n	80038b8 <HAL_TIM_PWM_Start+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e022      	b.n	80038fe <HAL_TIM_PWM_Start+0x9e>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	d109      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x72>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	e015      	b.n	80038fe <HAL_TIM_PWM_Start+0x9e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d109      	bne.n	80038ec <HAL_TIM_PWM_Start+0x8c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e008      	b.n	80038fe <HAL_TIM_PWM_Start+0x9e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e09c      	b.n	8003a40 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <HAL_TIM_PWM_Start+0xb6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003914:	e023      	b.n	800395e <HAL_TIM_PWM_Start+0xfe>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d104      	bne.n	8003926 <HAL_TIM_PWM_Start+0xc6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003924:	e01b      	b.n	800395e <HAL_TIM_PWM_Start+0xfe>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Start+0xd6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003934:	e013      	b.n	800395e <HAL_TIM_PWM_Start+0xfe>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Start+0xe6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003944:	e00b      	b.n	800395e <HAL_TIM_PWM_Start+0xfe>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d104      	bne.n	8003956 <HAL_TIM_PWM_Start+0xf6>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003954:	e003      	b.n	800395e <HAL_TIM_PWM_Start+0xfe>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f990 	bl	8004c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a35      	ldr	r2, [pc, #212]	; (8003a48 <HAL_TIM_PWM_Start+0x1e8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_TIM_PWM_Start+0x13e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <HAL_TIM_PWM_Start+0x1ec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_TIM_PWM_Start+0x13e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <HAL_TIM_PWM_Start+0x1f0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_TIM_PWM_Start+0x13e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <HAL_TIM_PWM_Start+0x1f4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_TIM_PWM_Start+0x13e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <HAL_TIM_PWM_Start+0x1f8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_PWM_Start+0x142>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_TIM_PWM_Start+0x144>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_TIM_PWM_Start+0x1e8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01d      	beq.n	80039fe <HAL_TIM_PWM_Start+0x19e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d018      	beq.n	80039fe <HAL_TIM_PWM_Start+0x19e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_TIM_PWM_Start+0x1fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_TIM_PWM_Start+0x19e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_TIM_PWM_Start+0x200>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIM_PWM_Start+0x19e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_TIM_PWM_Start+0x204>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_TIM_PWM_Start+0x19e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_TIM_PWM_Start+0x1ec>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_PWM_Start+0x19e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_TIM_PWM_Start+0x1f0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d115      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_TIM_PWM_Start+0x208>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d015      	beq.n	8003a3c <HAL_TIM_PWM_Start+0x1dc>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a16:	d011      	beq.n	8003a3c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	e008      	b.n	8003a3c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e000      	b.n	8003a3e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	00010007 	.word	0x00010007

08003a6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f904 	bl	8004c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3e      	ldr	r2, [pc, #248]	; (8003b84 <HAL_TIM_PWM_Stop+0x118>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_TIM_PWM_Stop+0x4a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3d      	ldr	r2, [pc, #244]	; (8003b88 <HAL_TIM_PWM_Stop+0x11c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIM_PWM_Stop+0x4a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <HAL_TIM_PWM_Stop+0x120>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIM_PWM_Stop+0x4a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <HAL_TIM_PWM_Stop+0x124>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_PWM_Stop+0x4a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a38      	ldr	r2, [pc, #224]	; (8003b94 <HAL_TIM_PWM_Stop+0x128>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_PWM_Stop+0x4e>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_TIM_PWM_Stop+0x50>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d017      	beq.n	8003af0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a1a      	ldr	r2, [r3, #32]
 8003ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_TIM_PWM_Stop+0x84>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_PWM_Stop+0x84>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <HAL_TIM_PWM_Stop+0xb4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	f240 4344 	movw	r3, #1092	; 0x444
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_TIM_PWM_Stop+0xb4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_TIM_PWM_Stop+0xc4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2e:	e023      	b.n	8003b78 <HAL_TIM_PWM_Stop+0x10c>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d104      	bne.n	8003b40 <HAL_TIM_PWM_Stop+0xd4>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3e:	e01b      	b.n	8003b78 <HAL_TIM_PWM_Stop+0x10c>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d104      	bne.n	8003b50 <HAL_TIM_PWM_Stop+0xe4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4e:	e013      	b.n	8003b78 <HAL_TIM_PWM_Stop+0x10c>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d104      	bne.n	8003b60 <HAL_TIM_PWM_Stop+0xf4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b5e:	e00b      	b.n	8003b78 <HAL_TIM_PWM_Stop+0x10c>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d104      	bne.n	8003b70 <HAL_TIM_PWM_Stop+0x104>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6e:	e003      	b.n	8003b78 <HAL_TIM_PWM_Stop+0x10c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800

08003b98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x28>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e03c      	b.n	8003c3a <HAL_TIM_PWM_Start_IT+0xa2>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d109      	bne.n	8003bda <HAL_TIM_PWM_Start_IT+0x42>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	e02f      	b.n	8003c3a <HAL_TIM_PWM_Start_IT+0xa2>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start_IT+0x5c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e022      	b.n	8003c3a <HAL_TIM_PWM_Start_IT+0xa2>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d109      	bne.n	8003c0e <HAL_TIM_PWM_Start_IT+0x76>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e015      	b.n	8003c3a <HAL_TIM_PWM_Start_IT+0xa2>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start_IT+0x90>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e008      	b.n	8003c3a <HAL_TIM_PWM_Start_IT+0xa2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0e7      	b.n	8003e12 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start_IT+0xba>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	e023      	b.n	8003c9a <HAL_TIM_PWM_Start_IT+0x102>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start_IT+0xca>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c60:	e01b      	b.n	8003c9a <HAL_TIM_PWM_Start_IT+0x102>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start_IT+0xda>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_PWM_Start_IT+0x102>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start_IT+0xea>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_PWM_Start_IT+0x102>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start_IT+0xfa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_PWM_Start_IT+0x102>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d841      	bhi.n	8003d24 <HAL_TIM_PWM_Start_IT+0x18c>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_TIM_PWM_Start_IT+0x110>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003d25 	.word	0x08003d25
 8003cb0:	08003d25 	.word	0x08003d25
 8003cb4:	08003d25 	.word	0x08003d25
 8003cb8:	08003cef 	.word	0x08003cef
 8003cbc:	08003d25 	.word	0x08003d25
 8003cc0:	08003d25 	.word	0x08003d25
 8003cc4:	08003d25 	.word	0x08003d25
 8003cc8:	08003d01 	.word	0x08003d01
 8003ccc:	08003d25 	.word	0x08003d25
 8003cd0:	08003d25 	.word	0x08003d25
 8003cd4:	08003d25 	.word	0x08003d25
 8003cd8:	08003d13 	.word	0x08003d13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0202 	orr.w	r2, r2, #2
 8003cea:	60da      	str	r2, [r3, #12]
      break;
 8003cec:	e01d      	b.n	8003d2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0204 	orr.w	r2, r2, #4
 8003cfc:	60da      	str	r2, [r3, #12]
      break;
 8003cfe:	e014      	b.n	8003d2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	60da      	str	r2, [r3, #12]
      break;
 8003d10:	e00b      	b.n	8003d2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0210 	orr.w	r2, r2, #16
 8003d20:	60da      	str	r2, [r3, #12]
      break;
 8003d22:	e002      	b.n	8003d2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d16f      	bne.n	8003e10 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2201      	movs	r2, #1
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ffa7 	bl	8004c8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <HAL_TIM_PWM_Start_IT+0x284>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a34      	ldr	r2, [pc, #208]	; (8003e20 <HAL_TIM_PWM_Start_IT+0x288>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_TIM_PWM_Start_IT+0x290>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_TIM_PWM_Start_IT+0x294>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIM_PWM_Start_IT+0x1dc>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_TIM_PWM_Start_IT+0x1de>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_TIM_PWM_Start_IT+0x284>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d01d      	beq.n	8003dd0 <HAL_TIM_PWM_Start_IT+0x238>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d018      	beq.n	8003dd0 <HAL_TIM_PWM_Start_IT+0x238>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <HAL_TIM_PWM_Start_IT+0x298>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_TIM_PWM_Start_IT+0x238>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_TIM_PWM_Start_IT+0x29c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_PWM_Start_IT+0x238>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_PWM_Start_IT+0x238>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_TIM_PWM_Start_IT+0x288>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_PWM_Start_IT+0x238>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d115      	bne.n	8003dfc <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d015      	beq.n	8003e0e <HAL_TIM_PWM_Start_IT+0x276>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d011      	beq.n	8003e0e <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	e008      	b.n	8003e0e <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e000      	b.n	8003e10 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40013400 	.word	0x40013400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	00010007 	.word	0x00010007

08003e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0202 	mvn.w	r2, #2
 8003e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fae3 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fad5 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fd f911 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0204 	mvn.w	r2, #4
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fab9 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 faab 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fd f8e7 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0208 	mvn.w	r2, #8
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fa8f 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa81 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fd f8bd 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0210 	mvn.w	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa65 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa57 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fd f893 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0201 	mvn.w	r2, #1
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd f89e 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 ff06 	bl	8004dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffe:	d10e      	bne.n	800401e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d107      	bne.n	800401e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fef9 	bl	8004e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d10e      	bne.n	800404a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d107      	bne.n	800404a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa0c 	bl	8004462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b20      	cmp	r3, #32
 8004056:	d10e      	bne.n	8004076 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d107      	bne.n	8004076 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0220 	mvn.w	r2, #32
 800406e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 feb9 	bl	8004de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800409a:	2302      	movs	r3, #2
 800409c:	e0ff      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b14      	cmp	r3, #20
 80040aa:	f200 80f0 	bhi.w	800428e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	08004109 	.word	0x08004109
 80040b8:	0800428f 	.word	0x0800428f
 80040bc:	0800428f 	.word	0x0800428f
 80040c0:	0800428f 	.word	0x0800428f
 80040c4:	08004149 	.word	0x08004149
 80040c8:	0800428f 	.word	0x0800428f
 80040cc:	0800428f 	.word	0x0800428f
 80040d0:	0800428f 	.word	0x0800428f
 80040d4:	0800418b 	.word	0x0800418b
 80040d8:	0800428f 	.word	0x0800428f
 80040dc:	0800428f 	.word	0x0800428f
 80040e0:	0800428f 	.word	0x0800428f
 80040e4:	080041cb 	.word	0x080041cb
 80040e8:	0800428f 	.word	0x0800428f
 80040ec:	0800428f 	.word	0x0800428f
 80040f0:	0800428f 	.word	0x0800428f
 80040f4:	0800420d 	.word	0x0800420d
 80040f8:	0800428f 	.word	0x0800428f
 80040fc:	0800428f 	.word	0x0800428f
 8004100:	0800428f 	.word	0x0800428f
 8004104:	0800424d 	.word	0x0800424d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fa4c 	bl	80045ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	619a      	str	r2, [r3, #24]
      break;
 8004146:	e0a5      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fabc 	bl	80046cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6999      	ldr	r1, [r3, #24]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	021a      	lsls	r2, r3, #8
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	619a      	str	r2, [r3, #24]
      break;
 8004188:	e084      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fb25 	bl	80047e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0208 	orr.w	r2, r2, #8
 80041a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0204 	bic.w	r2, r2, #4
 80041b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69d9      	ldr	r1, [r3, #28]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	61da      	str	r2, [r3, #28]
      break;
 80041c8:	e064      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fb8d 	bl	80048f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69d9      	ldr	r1, [r3, #28]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	021a      	lsls	r2, r3, #8
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	61da      	str	r2, [r3, #28]
      break;
 800420a:	e043      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fbd6 	bl	80049c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0208 	orr.w	r2, r2, #8
 8004226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0204 	bic.w	r2, r2, #4
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800424a:	e023      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc1a 	bl	8004a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004266:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	021a      	lsls	r2, r3, #8
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800428c:	e002      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
      break;
 8004292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop

080042a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIM_ConfigClockSource+0x1c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e0b6      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x18a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d03e      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0xd8>
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	f200 8087 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x170>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	f000 8086 	beq.w	800441e <HAL_TIM_ConfigClockSource+0x176>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d87f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004318:	2b70      	cmp	r3, #112	; 0x70
 800431a:	d01a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0xaa>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d87b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004320:	2b60      	cmp	r3, #96	; 0x60
 8004322:	d050      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x11e>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d877      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004328:	2b50      	cmp	r3, #80	; 0x50
 800432a:	d03c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xfe>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d873      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d058      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x13e>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d86f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d064      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15e>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d86b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d060      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15e>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d867      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05c      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15e>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d05a      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15e>
 8004350:	e062      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f000 fc73 	bl	8004c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]
      break;
 800437e:	e04f      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f000 fc5c 	bl	8004c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a2:	609a      	str	r2, [r3, #8]
      break;
 80043a4:	e03c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 fbd0 	bl	8004b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2150      	movs	r1, #80	; 0x50
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fc29 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e02c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 fbef 	bl	8004bb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2160      	movs	r1, #96	; 0x60
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fc19 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e01c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f000 fbb0 	bl	8004b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2140      	movs	r1, #64	; 0x40
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fc09 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 8004404:	e00c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f000 fc00 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 8004416:	e003      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e000      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800441e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a40      	ldr	r2, [pc, #256]	; (800458c <TIM_Base_SetConfig+0x114>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d00f      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <TIM_Base_SetConfig+0x118>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <TIM_Base_SetConfig+0x11c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <TIM_Base_SetConfig+0x120>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3a      	ldr	r2, [pc, #232]	; (800459c <TIM_Base_SetConfig+0x124>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2f      	ldr	r2, [pc, #188]	; (800458c <TIM_Base_SetConfig+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01f      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d01b      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2c      	ldr	r2, [pc, #176]	; (8004590 <TIM_Base_SetConfig+0x118>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d017      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2b      	ldr	r2, [pc, #172]	; (8004594 <TIM_Base_SetConfig+0x11c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <TIM_Base_SetConfig+0x120>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a29      	ldr	r2, [pc, #164]	; (800459c <TIM_Base_SetConfig+0x124>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <TIM_Base_SetConfig+0x128>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <TIM_Base_SetConfig+0x12c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <TIM_Base_SetConfig+0x130>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <TIM_Base_SetConfig+0x114>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0xf8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <TIM_Base_SetConfig+0x124>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <TIM_Base_SetConfig+0x128>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0xf8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <TIM_Base_SetConfig+0x12c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0xf8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <TIM_Base_SetConfig+0x130>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d103      	bne.n	8004578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	615a      	str	r2, [r3, #20]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800

080045ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 0302 	bic.w	r3, r3, #2
 80045f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a2c      	ldr	r2, [pc, #176]	; (80046b8 <TIM_OC1_SetConfig+0x10c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00f      	beq.n	800462c <TIM_OC1_SetConfig+0x80>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <TIM_OC1_SetConfig+0x110>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00b      	beq.n	800462c <TIM_OC1_SetConfig+0x80>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <TIM_OC1_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_OC1_SetConfig+0x80>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <TIM_OC1_SetConfig+0x118>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_OC1_SetConfig+0x80>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a28      	ldr	r2, [pc, #160]	; (80046c8 <TIM_OC1_SetConfig+0x11c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10c      	bne.n	8004646 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0308 	bic.w	r3, r3, #8
 8004632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <TIM_OC1_SetConfig+0x10c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00f      	beq.n	800466e <TIM_OC1_SetConfig+0xc2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <TIM_OC1_SetConfig+0x110>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_OC1_SetConfig+0xc2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <TIM_OC1_SetConfig+0x114>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_OC1_SetConfig+0xc2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <TIM_OC1_SetConfig+0x118>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC1_SetConfig+0xc2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <TIM_OC1_SetConfig+0x11c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d111      	bne.n	8004692 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0210 	bic.w	r2, r3, #16
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a28      	ldr	r2, [pc, #160]	; (80047cc <TIM_OC2_SetConfig+0x100>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0x6c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <TIM_OC2_SetConfig+0x104>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <TIM_OC2_SetConfig+0x100>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00f      	beq.n	800477c <TIM_OC2_SetConfig+0xb0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <TIM_OC2_SetConfig+0x104>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_OC2_SetConfig+0xb0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <TIM_OC2_SetConfig+0x108>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_OC2_SetConfig+0xb0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <TIM_OC2_SetConfig+0x10c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC2_SetConfig+0xb0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <TIM_OC2_SetConfig+0x110>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d113      	bne.n	80047a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800478a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40013400 	.word	0x40013400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a27      	ldr	r2, [pc, #156]	; (80048dc <TIM_OC3_SetConfig+0xfc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC3_SetConfig+0x6a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <TIM_OC3_SetConfig+0x100>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10d      	bne.n	8004866 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <TIM_OC3_SetConfig+0xfc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00f      	beq.n	800488e <TIM_OC3_SetConfig+0xae>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <TIM_OC3_SetConfig+0x100>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_OC3_SetConfig+0xae>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <TIM_OC3_SetConfig+0x104>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <TIM_OC3_SetConfig+0xae>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_OC3_SetConfig+0x108>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC3_SetConfig+0xae>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <TIM_OC3_SetConfig+0x10c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d113      	bne.n	80048b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	031b      	lsls	r3, r3, #12
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <TIM_OC4_SetConfig+0xc0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00f      	beq.n	8004974 <TIM_OC4_SetConfig+0x84>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <TIM_OC4_SetConfig+0xc4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_OC4_SetConfig+0x84>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <TIM_OC4_SetConfig+0xc8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_OC4_SetConfig+0x84>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <TIM_OC4_SetConfig+0xcc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_OC4_SetConfig+0x84>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <TIM_OC4_SetConfig+0xd0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d109      	bne.n	8004988 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	019b      	lsls	r3, r3, #6
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40013400 	.word	0x40013400
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40014400 	.word	0x40014400
 80049c0:	40014800 	.word	0x40014800

080049c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <TIM_OC5_SetConfig+0xb4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_OC5_SetConfig+0x7a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <TIM_OC5_SetConfig+0xb8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_OC5_SetConfig+0x7a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <TIM_OC5_SetConfig+0xbc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_OC5_SetConfig+0x7a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <TIM_OC5_SetConfig+0xc0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC5_SetConfig+0x7a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <TIM_OC5_SetConfig+0xc4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d109      	bne.n	8004a52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800

08004a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	051b      	lsls	r3, r3, #20
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <TIM_OC6_SetConfig+0xb8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00f      	beq.n	8004b08 <TIM_OC6_SetConfig+0x7c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <TIM_OC6_SetConfig+0xbc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <TIM_OC6_SetConfig+0x7c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <TIM_OC6_SetConfig+0xc0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_OC6_SetConfig+0x7c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <TIM_OC6_SetConfig+0xc4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC6_SetConfig+0x7c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <TIM_OC6_SetConfig+0xc8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d109      	bne.n	8004b1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800

08004b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 030a 	bic.w	r3, r3, #10
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	031b      	lsls	r3, r3, #12
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f043 0307 	orr.w	r3, r3, #7
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	021a      	lsls	r2, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e068      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2e      	ldr	r2, [pc, #184]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d018      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40013400 	.word	0x40013400
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40014000 	.word	0x40014000

08004de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e040      	b.n	8004eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fac2 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fc94 	bl	8005790 <UART_SetConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e022      	b.n	8004eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 ff40 	bl	8005d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 ffc7 	bl	8005e44 <UART_CheckIdleState>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f040 8082 	bne.w	8004fde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UART_Transmit+0x26>
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07a      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit+0x38>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e073      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2221      	movs	r2, #33	; 0x21
 8004f0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0e:	f7fc fc47 	bl	80017a0 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d108      	bne.n	8004f40 <HAL_UART_Transmit+0x80>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	e003      	b.n	8004f48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f50:	e02d      	b.n	8004fae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 ffba 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e039      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	881a      	ldrh	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	3302      	adds	r3, #2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e008      	b.n	8004f9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	b292      	uxth	r2, r2
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1cb      	bne.n	8004f52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 ff86 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e005      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	f040 80bf 	bne.w	8005180 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Receive+0x26>
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e0b7      	b.n	8005182 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Receive+0x38>
 800501c:	2302      	movs	r3, #2
 800501e:	e0b0      	b.n	8005182 <HAL_UART_Receive+0x19a>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2222      	movs	r2, #34	; 0x22
 8005034:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503c:	f7fc fbb0 	bl	80017a0 <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d10e      	bne.n	800507a <HAL_UART_Receive+0x92>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <HAL_UART_Receive+0x88>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f240 12ff 	movw	r2, #511	; 0x1ff
 800506a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800506e:	e02d      	b.n	80050cc <HAL_UART_Receive+0xe4>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	22ff      	movs	r2, #255	; 0xff
 8005074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005078:	e028      	b.n	80050cc <HAL_UART_Receive+0xe4>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10d      	bne.n	800509e <HAL_UART_Receive+0xb6>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_UART_Receive+0xac>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	22ff      	movs	r2, #255	; 0xff
 800508e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005092:	e01b      	b.n	80050cc <HAL_UART_Receive+0xe4>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	227f      	movs	r2, #127	; 0x7f
 8005098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800509c:	e016      	b.n	80050cc <HAL_UART_Receive+0xe4>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a6:	d10d      	bne.n	80050c4 <HAL_UART_Receive+0xdc>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_UART_Receive+0xd2>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	227f      	movs	r2, #127	; 0x7f
 80050b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050b8:	e008      	b.n	80050cc <HAL_UART_Receive+0xe4>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	223f      	movs	r2, #63	; 0x3f
 80050be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050c2:	e003      	b.n	80050cc <HAL_UART_Receive+0xe4>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050dc:	d108      	bne.n	80050f0 <HAL_UART_Receive+0x108>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e003      	b.n	80050f8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005100:	e033      	b.n	800516a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2120      	movs	r1, #32
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fee2 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e032      	b.n	8005182 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10c      	bne.n	800513c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005128:	b29a      	uxth	r2, r3
 800512a:	8a7b      	ldrh	r3, [r7, #18]
 800512c:	4013      	ands	r3, r2
 800512e:	b29a      	uxth	r2, r3
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	3302      	adds	r3, #2
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e00d      	b.n	8005158 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005142:	b29b      	uxth	r3, r3
 8005144:	b2da      	uxtb	r2, r3
 8005146:	8a7b      	ldrh	r3, [r7, #18]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	4013      	ands	r3, r2
 800514c:	b2da      	uxtb	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1c5      	bne.n	8005102 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b0ba      	sub	sp, #232	; 0xe8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80051ba:	4013      	ands	r3, r2
 80051bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d115      	bne.n	80051f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00f      	beq.n	80051f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 82a6 	beq.w	8005736 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
      }
      return;
 80051f2:	e2a0      	b.n	8005736 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80051f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8117 	beq.w	800542c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800520a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800520e:	4b85      	ldr	r3, [pc, #532]	; (8005424 <HAL_UART_IRQHandler+0x298>)
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 810a 	beq.w	800542c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <HAL_UART_IRQHandler+0xbc>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800523e:	f043 0201 	orr.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <HAL_UART_IRQHandler+0xec>
 8005254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2202      	movs	r2, #2
 8005266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <HAL_UART_IRQHandler+0x11c>
 8005284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2204      	movs	r2, #4
 8005296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2208      	movs	r2, #8
 80052d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052da:	f043 0208 	orr.w	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_UART_IRQHandler+0x18a>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 820c 	beq.w	800573a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d005      	beq.n	800536e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005366:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d04f      	beq.n	800540e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fe75 	bl	800605e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d141      	bne.n	8005406 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800539c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1d9      	bne.n	8005382 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d013      	beq.n	80053fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a13      	ldr	r2, [pc, #76]	; (8005428 <HAL_UART_IRQHandler+0x29c>)
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fb37 	bl	8001a56 <HAL_DMA_Abort_IT>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d017      	beq.n	800541e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e00f      	b.n	800541e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9b0 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e00b      	b.n	800541e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f9ac 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	e007      	b.n	800541e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f9a8 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800541c:	e18d      	b.n	800573a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541e:	bf00      	nop
    return;
 8005420:	e18b      	b.n	800573a <HAL_UART_IRQHandler+0x5ae>
 8005422:	bf00      	nop
 8005424:	04000120 	.word	0x04000120
 8005428:	08006125 	.word	0x08006125

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	2b01      	cmp	r3, #1
 8005432:	f040 8146 	bne.w	80056c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 813f 	beq.w	80056c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8138 	beq.w	80056c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2210      	movs	r2, #16
 8005458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	f040 80b4 	bne.w	80055d2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005476:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 815f 	beq.w	800573e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800548a:	429a      	cmp	r2, r3
 800548c:	f080 8157 	bcs.w	800573e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005496:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8085 	bne.w	80055b6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1da      	bne.n	80054ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800551a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800551e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800552c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e1      	bne.n	80054f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800555c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005586:	f023 0310 	bic.w	r3, r3, #16
 800558a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005598:	65bb      	str	r3, [r7, #88]	; 0x58
 800559a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800559e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e4      	bne.n	8005576 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fc fa12 	bl	80019da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8d4 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055d0:	e0b5      	b.n	800573e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80a7 	beq.w	8005742 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80055f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80a2 	beq.w	8005742 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
 8005622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e4      	bne.n	80055fe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	623b      	str	r3, [r7, #32]
   return(result);
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005658:	633a      	str	r2, [r7, #48]	; 0x30
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800565e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e3      	bne.n	8005634 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	60fb      	str	r3, [r7, #12]
   return(result);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0310 	bic.w	r3, r3, #16
 8005692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	617b      	str	r3, [r7, #20]
   return(result);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e4      	bne.n	800567e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f85c 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056c0:	e03f      	b.n	8005742 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00e      	beq.n	80056ec <HAL_UART_IRQHandler+0x560>
 80056ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fd5d 	bl	80061a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056ea:	e02d      	b.n	8005748 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01c      	beq.n	8005746 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
    }
    return;
 8005714:	e017      	b.n	8005746 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <HAL_UART_IRQHandler+0x5bc>
 8005722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fd0e 	bl	8006150 <UART_EndTransmit_IT>
    return;
 8005734:	e008      	b.n	8005748 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005736:	bf00      	nop
 8005738:	e006      	b.n	8005748 <HAL_UART_IRQHandler+0x5bc>
    return;
 800573a:	bf00      	nop
 800573c:	e004      	b.n	8005748 <HAL_UART_IRQHandler+0x5bc>
      return;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005746:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005748:	37e8      	adds	r7, #232	; 0xe8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop

08005750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08a      	sub	sp, #40	; 0x28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4ba4      	ldr	r3, [pc, #656]	; (8005a50 <UART_SetConfig+0x2c0>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a99      	ldr	r2, [pc, #612]	; (8005a54 <UART_SetConfig+0x2c4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	4313      	orrs	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a90      	ldr	r2, [pc, #576]	; (8005a58 <UART_SetConfig+0x2c8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d126      	bne.n	8005868 <UART_SetConfig+0xd8>
 800581a:	4b90      	ldr	r3, [pc, #576]	; (8005a5c <UART_SetConfig+0x2cc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b03      	cmp	r3, #3
 8005826:	d81b      	bhi.n	8005860 <UART_SetConfig+0xd0>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0xa0>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005841 	.word	0x08005841
 8005834:	08005851 	.word	0x08005851
 8005838:	08005849 	.word	0x08005849
 800583c:	08005859 	.word	0x08005859
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005846:	e116      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584e:	e112      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e10e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e10a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e106      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7c      	ldr	r2, [pc, #496]	; (8005a60 <UART_SetConfig+0x2d0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d138      	bne.n	80058e4 <UART_SetConfig+0x154>
 8005872:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <UART_SetConfig+0x2cc>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d82d      	bhi.n	80058dc <UART_SetConfig+0x14c>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0xf8>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c2:	e0d8      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ca:	e0d4      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d2:	e0d0      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e0cc      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e0c8      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5e      	ldr	r2, [pc, #376]	; (8005a64 <UART_SetConfig+0x2d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d125      	bne.n	800593a <UART_SetConfig+0x1aa>
 80058ee:	4b5b      	ldr	r3, [pc, #364]	; (8005a5c <UART_SetConfig+0x2cc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d016      	beq.n	800592a <UART_SetConfig+0x19a>
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d818      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d00a      	beq.n	800591a <UART_SetConfig+0x18a>
 8005904:	2b20      	cmp	r3, #32
 8005906:	d814      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <UART_SetConfig+0x182>
 800590c:	2b10      	cmp	r3, #16
 800590e:	d008      	beq.n	8005922 <UART_SetConfig+0x192>
 8005910:	e00f      	b.n	8005932 <UART_SetConfig+0x1a2>
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005918:	e0ad      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800591a:	2302      	movs	r3, #2
 800591c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005920:	e0a9      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005922:	2304      	movs	r3, #4
 8005924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005928:	e0a5      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800592a:	2308      	movs	r3, #8
 800592c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005930:	e0a1      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005932:	2310      	movs	r3, #16
 8005934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005938:	e09d      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4a      	ldr	r2, [pc, #296]	; (8005a68 <UART_SetConfig+0x2d8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d125      	bne.n	8005990 <UART_SetConfig+0x200>
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <UART_SetConfig+0x2cc>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800594e:	2bc0      	cmp	r3, #192	; 0xc0
 8005950:	d016      	beq.n	8005980 <UART_SetConfig+0x1f0>
 8005952:	2bc0      	cmp	r3, #192	; 0xc0
 8005954:	d818      	bhi.n	8005988 <UART_SetConfig+0x1f8>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d00a      	beq.n	8005970 <UART_SetConfig+0x1e0>
 800595a:	2b80      	cmp	r3, #128	; 0x80
 800595c:	d814      	bhi.n	8005988 <UART_SetConfig+0x1f8>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <UART_SetConfig+0x1d8>
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d008      	beq.n	8005978 <UART_SetConfig+0x1e8>
 8005966:	e00f      	b.n	8005988 <UART_SetConfig+0x1f8>
 8005968:	2300      	movs	r3, #0
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e082      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005970:	2302      	movs	r3, #2
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e07e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597e:	e07a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005986:	e076      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598e:	e072      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a35      	ldr	r2, [pc, #212]	; (8005a6c <UART_SetConfig+0x2dc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d12a      	bne.n	80059f0 <UART_SetConfig+0x260>
 800599a:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <UART_SetConfig+0x2cc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d01a      	beq.n	80059e0 <UART_SetConfig+0x250>
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ae:	d81b      	bhi.n	80059e8 <UART_SetConfig+0x258>
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b4:	d00c      	beq.n	80059d0 <UART_SetConfig+0x240>
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ba:	d815      	bhi.n	80059e8 <UART_SetConfig+0x258>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <UART_SetConfig+0x238>
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c4:	d008      	beq.n	80059d8 <UART_SetConfig+0x248>
 80059c6:	e00f      	b.n	80059e8 <UART_SetConfig+0x258>
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e052      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e04e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059de:	e04a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e6:	e046      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ee:	e042      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <UART_SetConfig+0x2c4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d13a      	bne.n	8005a70 <UART_SetConfig+0x2e0>
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <UART_SetConfig+0x2cc>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a08:	d01a      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0e:	d81b      	bhi.n	8005a48 <UART_SetConfig+0x2b8>
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a14:	d00c      	beq.n	8005a30 <UART_SetConfig+0x2a0>
 8005a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1a:	d815      	bhi.n	8005a48 <UART_SetConfig+0x2b8>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <UART_SetConfig+0x298>
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x2a8>
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x2b8>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e022      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a36:	e01e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3e:	e01a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a46:	e016      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4e:	e012      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a50:	efff69f3 	.word	0xefff69f3
 8005a54:	40008000 	.word	0x40008000
 8005a58:	40013800 	.word	0x40013800
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40004400 	.word	0x40004400
 8005a64:	40004800 	.word	0x40004800
 8005a68:	40004c00 	.word	0x40004c00
 8005a6c:	40005000 	.word	0x40005000
 8005a70:	2310      	movs	r3, #16
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a9f      	ldr	r2, [pc, #636]	; (8005cf8 <UART_SetConfig+0x568>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d17a      	bne.n	8005b76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d824      	bhi.n	8005ad2 <UART_SetConfig+0x342>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x300>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ab5 	.word	0x08005ab5
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ac3 	.word	0x08005ac3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005ad3 	.word	0x08005ad3
 8005aac:	08005ad3 	.word	0x08005ad3
 8005ab0:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab4:	f7fc ffdc 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	61f8      	str	r0, [r7, #28]
        break;
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b8f      	ldr	r3, [pc, #572]	; (8005cfc <UART_SetConfig+0x56c>)
 8005abe:	61fb      	str	r3, [r7, #28]
        break;
 8005ac0:	e00d      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fc ff3d 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8005ac6:	61f8      	str	r0, [r7, #28]
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	61fb      	str	r3, [r7, #28]
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80fb 	beq.w	8005cdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d305      	bcc.n	8005b02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d903      	bls.n	8005b0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b08:	e0e8      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	461c      	mov	r4, r3
 8005b10:	4615      	mov	r5, r2
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	022b      	lsls	r3, r5, #8
 8005b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b20:	0222      	lsls	r2, r4, #8
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	6849      	ldr	r1, [r1, #4]
 8005b26:	0849      	lsrs	r1, r1, #1
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4688      	mov	r8, r1
 8005b2c:	4681      	mov	r9, r0
 8005b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8005b32:	eb43 0b09 	adc.w	fp, r3, r9
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b44:	4650      	mov	r0, sl
 8005b46:	4659      	mov	r1, fp
 8005b48:	f7fa fbaa 	bl	80002a0 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4613      	mov	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5a:	d308      	bcc.n	8005b6e <UART_SetConfig+0x3de>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b62:	d204      	bcs.n	8005b6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	e0b6      	b.n	8005cdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b74:	e0b2      	b.n	8005cdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7e:	d15e      	bne.n	8005c3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d828      	bhi.n	8005bda <UART_SetConfig+0x44a>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0x400>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bb5 	.word	0x08005bb5
 8005b94:	08005bbd 	.word	0x08005bbd
 8005b98:	08005bc5 	.word	0x08005bc5
 8005b9c:	08005bdb 	.word	0x08005bdb
 8005ba0:	08005bcb 	.word	0x08005bcb
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005bdb 	.word	0x08005bdb
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	08005bd3 	.word	0x08005bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f7fc ff5c 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8005bb8:	61f8      	str	r0, [r7, #28]
        break;
 8005bba:	e014      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fc ff6e 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
        break;
 8005bc2:	e010      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <UART_SetConfig+0x56c>)
 8005bc6:	61fb      	str	r3, [r7, #28]
        break;
 8005bc8:	e00d      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fc feb9 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8005bce:	61f8      	str	r0, [r7, #28]
        break;
 8005bd0:	e009      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd6:	61fb      	str	r3, [r7, #28]
        break;
 8005bd8:	e005      	b.n	8005be6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d077      	beq.n	8005cdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005a      	lsls	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d916      	bls.n	8005c36 <UART_SetConfig+0x4a6>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0e:	d212      	bcs.n	8005c36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f023 030f 	bic.w	r3, r3, #15
 8005c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	8afb      	ldrh	r3, [r7, #22]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	8afa      	ldrh	r2, [r7, #22]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	e052      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c3c:	e04e      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d827      	bhi.n	8005c96 <UART_SetConfig+0x506>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x4bc>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fc fefe 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8005c74:	61f8      	str	r0, [r7, #28]
        break;
 8005c76:	e014      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c78:	f7fc ff10 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <UART_SetConfig+0x56c>)
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fc fe5b 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61f8      	str	r0, [r7, #28]
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d019      	beq.n	8005cdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	085a      	lsrs	r2, r3, #1
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d909      	bls.n	8005cd6 <UART_SetConfig+0x546>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d205      	bcs.n	8005cd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e002      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	; 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40008000 	.word	0x40008000
 8005cfc:	00f42400 	.word	0x00f42400

08005d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dfe:	d10a      	bne.n	8005e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e54:	f7fb fca4 	bl	80017a0 <HAL_GetTick>
 8005e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d10e      	bne.n	8005e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f82d 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e023      	b.n	8005ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d10e      	bne.n	8005eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f817 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e00d      	b.n	8005ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b09c      	sub	sp, #112	; 0x70
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee6:	e0a5      	b.n	8006034 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	f000 80a1 	beq.w	8006034 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef2:	f7fb fc55 	bl	80017a0 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d13e      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e6      	bne.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	663b      	str	r3, [r7, #96]	; 0x60
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e5      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e067      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d04f      	beq.n	8006034 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa2:	d147      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006000:	623a      	str	r2, [r7, #32]
 8006002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	69f9      	ldr	r1, [r7, #28]
 8006006:	6a3a      	ldr	r2, [r7, #32]
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	61bb      	str	r3, [r7, #24]
   return(result);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e010      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4013      	ands	r3, r2
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	bf0c      	ite	eq
 8006044:	2301      	moveq	r3, #1
 8006046:	2300      	movne	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	429a      	cmp	r2, r3
 8006050:	f43f af4a 	beq.w	8005ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3770      	adds	r7, #112	; 0x70
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800605e:	b480      	push	{r7}
 8006060:	b095      	sub	sp, #84	; 0x54
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800607a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
 8006086:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800608a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e6      	bne.n	8006066 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d118      	bne.n	8006106 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 0310 	bic.w	r3, r3, #16
 80060e8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e6      	bne.n	80060d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006118:	bf00      	nop
 800611a:	3754      	adds	r7, #84	; 0x54
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff fb0e 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	60bb      	str	r3, [r7, #8]
   return(result);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6979      	ldr	r1, [r7, #20]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	613b      	str	r3, [r7, #16]
   return(result);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e6      	bne.n	8006158 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fada 	bl	8005750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800619c:	bf00      	nop
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <__errno>:
 80061b8:	4b01      	ldr	r3, [pc, #4]	; (80061c0 <__errno+0x8>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	200003fc 	.word	0x200003fc

080061c4 <__libc_init_array>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4d0d      	ldr	r5, [pc, #52]	; (80061fc <__libc_init_array+0x38>)
 80061c8:	4c0d      	ldr	r4, [pc, #52]	; (8006200 <__libc_init_array+0x3c>)
 80061ca:	1b64      	subs	r4, r4, r5
 80061cc:	10a4      	asrs	r4, r4, #2
 80061ce:	2600      	movs	r6, #0
 80061d0:	42a6      	cmp	r6, r4
 80061d2:	d109      	bne.n	80061e8 <__libc_init_array+0x24>
 80061d4:	4d0b      	ldr	r5, [pc, #44]	; (8006204 <__libc_init_array+0x40>)
 80061d6:	4c0c      	ldr	r4, [pc, #48]	; (8006208 <__libc_init_array+0x44>)
 80061d8:	f001 fd26 	bl	8007c28 <_init>
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	2600      	movs	r6, #0
 80061e2:	42a6      	cmp	r6, r4
 80061e4:	d105      	bne.n	80061f2 <__libc_init_array+0x2e>
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ec:	4798      	blx	r3
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7ee      	b.n	80061d0 <__libc_init_array+0xc>
 80061f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f6:	4798      	blx	r3
 80061f8:	3601      	adds	r6, #1
 80061fa:	e7f2      	b.n	80061e2 <__libc_init_array+0x1e>
 80061fc:	08007ee8 	.word	0x08007ee8
 8006200:	08007ee8 	.word	0x08007ee8
 8006204:	08007ee8 	.word	0x08007ee8
 8006208:	08007eec 	.word	0x08007eec

0800620c <memset>:
 800620c:	4402      	add	r2, r0
 800620e:	4603      	mov	r3, r0
 8006210:	4293      	cmp	r3, r2
 8006212:	d100      	bne.n	8006216 <memset+0xa>
 8006214:	4770      	bx	lr
 8006216:	f803 1b01 	strb.w	r1, [r3], #1
 800621a:	e7f9      	b.n	8006210 <memset+0x4>

0800621c <iprintf>:
 800621c:	b40f      	push	{r0, r1, r2, r3}
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <iprintf+0x2c>)
 8006220:	b513      	push	{r0, r1, r4, lr}
 8006222:	681c      	ldr	r4, [r3, #0]
 8006224:	b124      	cbz	r4, 8006230 <iprintf+0x14>
 8006226:	69a3      	ldr	r3, [r4, #24]
 8006228:	b913      	cbnz	r3, 8006230 <iprintf+0x14>
 800622a:	4620      	mov	r0, r4
 800622c:	f000 faf2 	bl	8006814 <__sinit>
 8006230:	ab05      	add	r3, sp, #20
 8006232:	9a04      	ldr	r2, [sp, #16]
 8006234:	68a1      	ldr	r1, [r4, #8]
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fedf 	bl	8006ffc <_vfiprintf_r>
 800623e:	b002      	add	sp, #8
 8006240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006244:	b004      	add	sp, #16
 8006246:	4770      	bx	lr
 8006248:	200003fc 	.word	0x200003fc

0800624c <_puts_r>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	460e      	mov	r6, r1
 8006250:	4605      	mov	r5, r0
 8006252:	b118      	cbz	r0, 800625c <_puts_r+0x10>
 8006254:	6983      	ldr	r3, [r0, #24]
 8006256:	b90b      	cbnz	r3, 800625c <_puts_r+0x10>
 8006258:	f000 fadc 	bl	8006814 <__sinit>
 800625c:	69ab      	ldr	r3, [r5, #24]
 800625e:	68ac      	ldr	r4, [r5, #8]
 8006260:	b913      	cbnz	r3, 8006268 <_puts_r+0x1c>
 8006262:	4628      	mov	r0, r5
 8006264:	f000 fad6 	bl	8006814 <__sinit>
 8006268:	4b2c      	ldr	r3, [pc, #176]	; (800631c <_puts_r+0xd0>)
 800626a:	429c      	cmp	r4, r3
 800626c:	d120      	bne.n	80062b0 <_puts_r+0x64>
 800626e:	686c      	ldr	r4, [r5, #4]
 8006270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d405      	bmi.n	8006282 <_puts_r+0x36>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	0598      	lsls	r0, r3, #22
 800627a:	d402      	bmi.n	8006282 <_puts_r+0x36>
 800627c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800627e:	f000 fb67 	bl	8006950 <__retarget_lock_acquire_recursive>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	0719      	lsls	r1, r3, #28
 8006286:	d51d      	bpl.n	80062c4 <_puts_r+0x78>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	b1db      	cbz	r3, 80062c4 <_puts_r+0x78>
 800628c:	3e01      	subs	r6, #1
 800628e:	68a3      	ldr	r3, [r4, #8]
 8006290:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006294:	3b01      	subs	r3, #1
 8006296:	60a3      	str	r3, [r4, #8]
 8006298:	bb39      	cbnz	r1, 80062ea <_puts_r+0x9e>
 800629a:	2b00      	cmp	r3, #0
 800629c:	da38      	bge.n	8006310 <_puts_r+0xc4>
 800629e:	4622      	mov	r2, r4
 80062a0:	210a      	movs	r1, #10
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 f8ba 	bl	800641c <__swbuf_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d011      	beq.n	80062d0 <_puts_r+0x84>
 80062ac:	250a      	movs	r5, #10
 80062ae:	e011      	b.n	80062d4 <_puts_r+0x88>
 80062b0:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <_puts_r+0xd4>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <_puts_r+0x6e>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7da      	b.n	8006270 <_puts_r+0x24>
 80062ba:	4b1a      	ldr	r3, [pc, #104]	; (8006324 <_puts_r+0xd8>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7d5      	b.n	8006270 <_puts_r+0x24>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f90c 	bl	80064e4 <__swsetup_r>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d0dd      	beq.n	800628c <_puts_r+0x40>
 80062d0:	f04f 35ff 	mov.w	r5, #4294967295
 80062d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062d6:	07da      	lsls	r2, r3, #31
 80062d8:	d405      	bmi.n	80062e6 <_puts_r+0x9a>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_puts_r+0x9a>
 80062e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062e2:	f000 fb36 	bl	8006952 <__retarget_lock_release_recursive>
 80062e6:	4628      	mov	r0, r5
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da04      	bge.n	80062f8 <_puts_r+0xac>
 80062ee:	69a2      	ldr	r2, [r4, #24]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	dc06      	bgt.n	8006302 <_puts_r+0xb6>
 80062f4:	290a      	cmp	r1, #10
 80062f6:	d004      	beq.n	8006302 <_puts_r+0xb6>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	7019      	strb	r1, [r3, #0]
 8006300:	e7c5      	b.n	800628e <_puts_r+0x42>
 8006302:	4622      	mov	r2, r4
 8006304:	4628      	mov	r0, r5
 8006306:	f000 f889 	bl	800641c <__swbuf_r>
 800630a:	3001      	adds	r0, #1
 800630c:	d1bf      	bne.n	800628e <_puts_r+0x42>
 800630e:	e7df      	b.n	80062d0 <_puts_r+0x84>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	250a      	movs	r5, #10
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	6022      	str	r2, [r4, #0]
 8006318:	701d      	strb	r5, [r3, #0]
 800631a:	e7db      	b.n	80062d4 <_puts_r+0x88>
 800631c:	08007d50 	.word	0x08007d50
 8006320:	08007d70 	.word	0x08007d70
 8006324:	08007d30 	.word	0x08007d30

08006328 <puts>:
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <puts+0xc>)
 800632a:	4601      	mov	r1, r0
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f7ff bf8d 	b.w	800624c <_puts_r>
 8006332:	bf00      	nop
 8006334:	200003fc 	.word	0x200003fc

08006338 <siscanf>:
 8006338:	b40e      	push	{r1, r2, r3}
 800633a:	b510      	push	{r4, lr}
 800633c:	b09f      	sub	sp, #124	; 0x7c
 800633e:	ac21      	add	r4, sp, #132	; 0x84
 8006340:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006344:	f854 2b04 	ldr.w	r2, [r4], #4
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800634e:	9004      	str	r0, [sp, #16]
 8006350:	9008      	str	r0, [sp, #32]
 8006352:	f7f9 ff47 	bl	80001e4 <strlen>
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <siscanf+0x50>)
 8006358:	9005      	str	r0, [sp, #20]
 800635a:	9009      	str	r0, [sp, #36]	; 0x24
 800635c:	930d      	str	r3, [sp, #52]	; 0x34
 800635e:	480b      	ldr	r0, [pc, #44]	; (800638c <siscanf+0x54>)
 8006360:	9a01      	ldr	r2, [sp, #4]
 8006362:	6800      	ldr	r0, [r0, #0]
 8006364:	9403      	str	r4, [sp, #12]
 8006366:	2300      	movs	r3, #0
 8006368:	9311      	str	r3, [sp, #68]	; 0x44
 800636a:	9316      	str	r3, [sp, #88]	; 0x58
 800636c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006370:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006374:	a904      	add	r1, sp, #16
 8006376:	4623      	mov	r3, r4
 8006378:	f000 fc9e 	bl	8006cb8 <__ssvfiscanf_r>
 800637c:	b01f      	add	sp, #124	; 0x7c
 800637e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006382:	b003      	add	sp, #12
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	080063b3 	.word	0x080063b3
 800638c:	200003fc 	.word	0x200003fc

08006390 <__sread>:
 8006390:	b510      	push	{r4, lr}
 8006392:	460c      	mov	r4, r1
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	f001 fa46 	bl	8007828 <_read_r>
 800639c:	2800      	cmp	r0, #0
 800639e:	bfab      	itete	ge
 80063a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063a2:	89a3      	ldrhlt	r3, [r4, #12]
 80063a4:	181b      	addge	r3, r3, r0
 80063a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063aa:	bfac      	ite	ge
 80063ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ae:	81a3      	strhlt	r3, [r4, #12]
 80063b0:	bd10      	pop	{r4, pc}

080063b2 <__seofread>:
 80063b2:	2000      	movs	r0, #0
 80063b4:	4770      	bx	lr

080063b6 <__swrite>:
 80063b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	461f      	mov	r7, r3
 80063bc:	898b      	ldrh	r3, [r1, #12]
 80063be:	05db      	lsls	r3, r3, #23
 80063c0:	4605      	mov	r5, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4616      	mov	r6, r2
 80063c6:	d505      	bpl.n	80063d4 <__swrite+0x1e>
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	2302      	movs	r3, #2
 80063ce:	2200      	movs	r2, #0
 80063d0:	f000 fac0 	bl	8006954 <_lseek_r>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	4628      	mov	r0, r5
 80063e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	f000 b869 	b.w	80064c0 <_write_r>

080063ee <__sseek>:
 80063ee:	b510      	push	{r4, lr}
 80063f0:	460c      	mov	r4, r1
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 faad 	bl	8006954 <_lseek_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	bf15      	itete	ne
 8006400:	6560      	strne	r0, [r4, #84]	; 0x54
 8006402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800640a:	81a3      	strheq	r3, [r4, #12]
 800640c:	bf18      	it	ne
 800640e:	81a3      	strhne	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__sclose>:
 8006412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006416:	f000 b8d3 	b.w	80065c0 <_close_r>
	...

0800641c <__swbuf_r>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	460e      	mov	r6, r1
 8006420:	4614      	mov	r4, r2
 8006422:	4605      	mov	r5, r0
 8006424:	b118      	cbz	r0, 800642e <__swbuf_r+0x12>
 8006426:	6983      	ldr	r3, [r0, #24]
 8006428:	b90b      	cbnz	r3, 800642e <__swbuf_r+0x12>
 800642a:	f000 f9f3 	bl	8006814 <__sinit>
 800642e:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <__swbuf_r+0x98>)
 8006430:	429c      	cmp	r4, r3
 8006432:	d12b      	bne.n	800648c <__swbuf_r+0x70>
 8006434:	686c      	ldr	r4, [r5, #4]
 8006436:	69a3      	ldr	r3, [r4, #24]
 8006438:	60a3      	str	r3, [r4, #8]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	071a      	lsls	r2, r3, #28
 800643e:	d52f      	bpl.n	80064a0 <__swbuf_r+0x84>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	b36b      	cbz	r3, 80064a0 <__swbuf_r+0x84>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1ac0      	subs	r0, r0, r3
 800644a:	6963      	ldr	r3, [r4, #20]
 800644c:	b2f6      	uxtb	r6, r6
 800644e:	4283      	cmp	r3, r0
 8006450:	4637      	mov	r7, r6
 8006452:	dc04      	bgt.n	800645e <__swbuf_r+0x42>
 8006454:	4621      	mov	r1, r4
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f948 	bl	80066ec <_fflush_r>
 800645c:	bb30      	cbnz	r0, 80064ac <__swbuf_r+0x90>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	3b01      	subs	r3, #1
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	701e      	strb	r6, [r3, #0]
 800646c:	6963      	ldr	r3, [r4, #20]
 800646e:	3001      	adds	r0, #1
 8006470:	4283      	cmp	r3, r0
 8006472:	d004      	beq.n	800647e <__swbuf_r+0x62>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	07db      	lsls	r3, r3, #31
 8006478:	d506      	bpl.n	8006488 <__swbuf_r+0x6c>
 800647a:	2e0a      	cmp	r6, #10
 800647c:	d104      	bne.n	8006488 <__swbuf_r+0x6c>
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f933 	bl	80066ec <_fflush_r>
 8006486:	b988      	cbnz	r0, 80064ac <__swbuf_r+0x90>
 8006488:	4638      	mov	r0, r7
 800648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <__swbuf_r+0x9c>)
 800648e:	429c      	cmp	r4, r3
 8006490:	d101      	bne.n	8006496 <__swbuf_r+0x7a>
 8006492:	68ac      	ldr	r4, [r5, #8]
 8006494:	e7cf      	b.n	8006436 <__swbuf_r+0x1a>
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <__swbuf_r+0xa0>)
 8006498:	429c      	cmp	r4, r3
 800649a:	bf08      	it	eq
 800649c:	68ec      	ldreq	r4, [r5, #12]
 800649e:	e7ca      	b.n	8006436 <__swbuf_r+0x1a>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 f81e 	bl	80064e4 <__swsetup_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d0cb      	beq.n	8006444 <__swbuf_r+0x28>
 80064ac:	f04f 37ff 	mov.w	r7, #4294967295
 80064b0:	e7ea      	b.n	8006488 <__swbuf_r+0x6c>
 80064b2:	bf00      	nop
 80064b4:	08007d50 	.word	0x08007d50
 80064b8:	08007d70 	.word	0x08007d70
 80064bc:	08007d30 	.word	0x08007d30

080064c0 <_write_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d07      	ldr	r5, [pc, #28]	; (80064e0 <_write_r+0x20>)
 80064c4:	4604      	mov	r4, r0
 80064c6:	4608      	mov	r0, r1
 80064c8:	4611      	mov	r1, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	602a      	str	r2, [r5, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f7fa fc88 	bl	8000de4 <_write>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_write_r+0x1e>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_write_r+0x1e>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	200006e0 	.word	0x200006e0

080064e4 <__swsetup_r>:
 80064e4:	4b32      	ldr	r3, [pc, #200]	; (80065b0 <__swsetup_r+0xcc>)
 80064e6:	b570      	push	{r4, r5, r6, lr}
 80064e8:	681d      	ldr	r5, [r3, #0]
 80064ea:	4606      	mov	r6, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	b125      	cbz	r5, 80064fa <__swsetup_r+0x16>
 80064f0:	69ab      	ldr	r3, [r5, #24]
 80064f2:	b913      	cbnz	r3, 80064fa <__swsetup_r+0x16>
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 f98d 	bl	8006814 <__sinit>
 80064fa:	4b2e      	ldr	r3, [pc, #184]	; (80065b4 <__swsetup_r+0xd0>)
 80064fc:	429c      	cmp	r4, r3
 80064fe:	d10f      	bne.n	8006520 <__swsetup_r+0x3c>
 8006500:	686c      	ldr	r4, [r5, #4]
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006508:	0719      	lsls	r1, r3, #28
 800650a:	d42c      	bmi.n	8006566 <__swsetup_r+0x82>
 800650c:	06dd      	lsls	r5, r3, #27
 800650e:	d411      	bmi.n	8006534 <__swsetup_r+0x50>
 8006510:	2309      	movs	r3, #9
 8006512:	6033      	str	r3, [r6, #0]
 8006514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	e03e      	b.n	800659e <__swsetup_r+0xba>
 8006520:	4b25      	ldr	r3, [pc, #148]	; (80065b8 <__swsetup_r+0xd4>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d101      	bne.n	800652a <__swsetup_r+0x46>
 8006526:	68ac      	ldr	r4, [r5, #8]
 8006528:	e7eb      	b.n	8006502 <__swsetup_r+0x1e>
 800652a:	4b24      	ldr	r3, [pc, #144]	; (80065bc <__swsetup_r+0xd8>)
 800652c:	429c      	cmp	r4, r3
 800652e:	bf08      	it	eq
 8006530:	68ec      	ldreq	r4, [r5, #12]
 8006532:	e7e6      	b.n	8006502 <__swsetup_r+0x1e>
 8006534:	0758      	lsls	r0, r3, #29
 8006536:	d512      	bpl.n	800655e <__swsetup_r+0x7a>
 8006538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800653a:	b141      	cbz	r1, 800654e <__swsetup_r+0x6a>
 800653c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006540:	4299      	cmp	r1, r3
 8006542:	d002      	beq.n	800654a <__swsetup_r+0x66>
 8006544:	4630      	mov	r0, r6
 8006546:	f000 fa7d 	bl	8006a44 <_free_r>
 800654a:	2300      	movs	r3, #0
 800654c:	6363      	str	r3, [r4, #52]	; 0x34
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	2300      	movs	r3, #0
 8006558:	6063      	str	r3, [r4, #4]
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f043 0308 	orr.w	r3, r3, #8
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	b94b      	cbnz	r3, 800657e <__swsetup_r+0x9a>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006574:	d003      	beq.n	800657e <__swsetup_r+0x9a>
 8006576:	4621      	mov	r1, r4
 8006578:	4630      	mov	r0, r6
 800657a:	f000 fa23 	bl	80069c4 <__smakebuf_r>
 800657e:	89a0      	ldrh	r0, [r4, #12]
 8006580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006584:	f010 0301 	ands.w	r3, r0, #1
 8006588:	d00a      	beq.n	80065a0 <__swsetup_r+0xbc>
 800658a:	2300      	movs	r3, #0
 800658c:	60a3      	str	r3, [r4, #8]
 800658e:	6963      	ldr	r3, [r4, #20]
 8006590:	425b      	negs	r3, r3
 8006592:	61a3      	str	r3, [r4, #24]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	b943      	cbnz	r3, 80065aa <__swsetup_r+0xc6>
 8006598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800659c:	d1ba      	bne.n	8006514 <__swsetup_r+0x30>
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	0781      	lsls	r1, r0, #30
 80065a2:	bf58      	it	pl
 80065a4:	6963      	ldrpl	r3, [r4, #20]
 80065a6:	60a3      	str	r3, [r4, #8]
 80065a8:	e7f4      	b.n	8006594 <__swsetup_r+0xb0>
 80065aa:	2000      	movs	r0, #0
 80065ac:	e7f7      	b.n	800659e <__swsetup_r+0xba>
 80065ae:	bf00      	nop
 80065b0:	200003fc 	.word	0x200003fc
 80065b4:	08007d50 	.word	0x08007d50
 80065b8:	08007d70 	.word	0x08007d70
 80065bc:	08007d30 	.word	0x08007d30

080065c0 <_close_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d06      	ldr	r5, [pc, #24]	; (80065dc <_close_r+0x1c>)
 80065c4:	2300      	movs	r3, #0
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	f7fa ffd1 	bl	8001572 <_close>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_close_r+0x1a>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_close_r+0x1a>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	200006e0 	.word	0x200006e0

080065e0 <__sflush_r>:
 80065e0:	898a      	ldrh	r2, [r1, #12]
 80065e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e6:	4605      	mov	r5, r0
 80065e8:	0710      	lsls	r0, r2, #28
 80065ea:	460c      	mov	r4, r1
 80065ec:	d458      	bmi.n	80066a0 <__sflush_r+0xc0>
 80065ee:	684b      	ldr	r3, [r1, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc05      	bgt.n	8006600 <__sflush_r+0x20>
 80065f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dc02      	bgt.n	8006600 <__sflush_r+0x20>
 80065fa:	2000      	movs	r0, #0
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006602:	2e00      	cmp	r6, #0
 8006604:	d0f9      	beq.n	80065fa <__sflush_r+0x1a>
 8006606:	2300      	movs	r3, #0
 8006608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800660c:	682f      	ldr	r7, [r5, #0]
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	d032      	beq.n	8006678 <__sflush_r+0x98>
 8006612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	075a      	lsls	r2, r3, #29
 8006618:	d505      	bpl.n	8006626 <__sflush_r+0x46>
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	1ac0      	subs	r0, r0, r3
 800661e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006620:	b10b      	cbz	r3, 8006626 <__sflush_r+0x46>
 8006622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006624:	1ac0      	subs	r0, r0, r3
 8006626:	2300      	movs	r3, #0
 8006628:	4602      	mov	r2, r0
 800662a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800662c:	6a21      	ldr	r1, [r4, #32]
 800662e:	4628      	mov	r0, r5
 8006630:	47b0      	blx	r6
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	d106      	bne.n	8006646 <__sflush_r+0x66>
 8006638:	6829      	ldr	r1, [r5, #0]
 800663a:	291d      	cmp	r1, #29
 800663c:	d82c      	bhi.n	8006698 <__sflush_r+0xb8>
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <__sflush_r+0x108>)
 8006640:	40ca      	lsrs	r2, r1
 8006642:	07d6      	lsls	r6, r2, #31
 8006644:	d528      	bpl.n	8006698 <__sflush_r+0xb8>
 8006646:	2200      	movs	r2, #0
 8006648:	6062      	str	r2, [r4, #4]
 800664a:	04d9      	lsls	r1, r3, #19
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	d504      	bpl.n	800665c <__sflush_r+0x7c>
 8006652:	1c42      	adds	r2, r0, #1
 8006654:	d101      	bne.n	800665a <__sflush_r+0x7a>
 8006656:	682b      	ldr	r3, [r5, #0]
 8006658:	b903      	cbnz	r3, 800665c <__sflush_r+0x7c>
 800665a:	6560      	str	r0, [r4, #84]	; 0x54
 800665c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800665e:	602f      	str	r7, [r5, #0]
 8006660:	2900      	cmp	r1, #0
 8006662:	d0ca      	beq.n	80065fa <__sflush_r+0x1a>
 8006664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006668:	4299      	cmp	r1, r3
 800666a:	d002      	beq.n	8006672 <__sflush_r+0x92>
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f9e9 	bl	8006a44 <_free_r>
 8006672:	2000      	movs	r0, #0
 8006674:	6360      	str	r0, [r4, #52]	; 0x34
 8006676:	e7c1      	b.n	80065fc <__sflush_r+0x1c>
 8006678:	6a21      	ldr	r1, [r4, #32]
 800667a:	2301      	movs	r3, #1
 800667c:	4628      	mov	r0, r5
 800667e:	47b0      	blx	r6
 8006680:	1c41      	adds	r1, r0, #1
 8006682:	d1c7      	bne.n	8006614 <__sflush_r+0x34>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0c4      	beq.n	8006614 <__sflush_r+0x34>
 800668a:	2b1d      	cmp	r3, #29
 800668c:	d001      	beq.n	8006692 <__sflush_r+0xb2>
 800668e:	2b16      	cmp	r3, #22
 8006690:	d101      	bne.n	8006696 <__sflush_r+0xb6>
 8006692:	602f      	str	r7, [r5, #0]
 8006694:	e7b1      	b.n	80065fa <__sflush_r+0x1a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	e7ad      	b.n	80065fc <__sflush_r+0x1c>
 80066a0:	690f      	ldr	r7, [r1, #16]
 80066a2:	2f00      	cmp	r7, #0
 80066a4:	d0a9      	beq.n	80065fa <__sflush_r+0x1a>
 80066a6:	0793      	lsls	r3, r2, #30
 80066a8:	680e      	ldr	r6, [r1, #0]
 80066aa:	bf08      	it	eq
 80066ac:	694b      	ldreq	r3, [r1, #20]
 80066ae:	600f      	str	r7, [r1, #0]
 80066b0:	bf18      	it	ne
 80066b2:	2300      	movne	r3, #0
 80066b4:	eba6 0807 	sub.w	r8, r6, r7
 80066b8:	608b      	str	r3, [r1, #8]
 80066ba:	f1b8 0f00 	cmp.w	r8, #0
 80066be:	dd9c      	ble.n	80065fa <__sflush_r+0x1a>
 80066c0:	6a21      	ldr	r1, [r4, #32]
 80066c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066c4:	4643      	mov	r3, r8
 80066c6:	463a      	mov	r2, r7
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b0      	blx	r6
 80066cc:	2800      	cmp	r0, #0
 80066ce:	dc06      	bgt.n	80066de <__sflush_r+0xfe>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	e78e      	b.n	80065fc <__sflush_r+0x1c>
 80066de:	4407      	add	r7, r0
 80066e0:	eba8 0800 	sub.w	r8, r8, r0
 80066e4:	e7e9      	b.n	80066ba <__sflush_r+0xda>
 80066e6:	bf00      	nop
 80066e8:	20400001 	.word	0x20400001

080066ec <_fflush_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	690b      	ldr	r3, [r1, #16]
 80066f0:	4605      	mov	r5, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	b913      	cbnz	r3, 80066fc <_fflush_r+0x10>
 80066f6:	2500      	movs	r5, #0
 80066f8:	4628      	mov	r0, r5
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	b118      	cbz	r0, 8006706 <_fflush_r+0x1a>
 80066fe:	6983      	ldr	r3, [r0, #24]
 8006700:	b90b      	cbnz	r3, 8006706 <_fflush_r+0x1a>
 8006702:	f000 f887 	bl	8006814 <__sinit>
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <_fflush_r+0x6c>)
 8006708:	429c      	cmp	r4, r3
 800670a:	d11b      	bne.n	8006744 <_fflush_r+0x58>
 800670c:	686c      	ldr	r4, [r5, #4]
 800670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ef      	beq.n	80066f6 <_fflush_r+0xa>
 8006716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006718:	07d0      	lsls	r0, r2, #31
 800671a:	d404      	bmi.n	8006726 <_fflush_r+0x3a>
 800671c:	0599      	lsls	r1, r3, #22
 800671e:	d402      	bmi.n	8006726 <_fflush_r+0x3a>
 8006720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006722:	f000 f915 	bl	8006950 <__retarget_lock_acquire_recursive>
 8006726:	4628      	mov	r0, r5
 8006728:	4621      	mov	r1, r4
 800672a:	f7ff ff59 	bl	80065e0 <__sflush_r>
 800672e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006730:	07da      	lsls	r2, r3, #31
 8006732:	4605      	mov	r5, r0
 8006734:	d4e0      	bmi.n	80066f8 <_fflush_r+0xc>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	059b      	lsls	r3, r3, #22
 800673a:	d4dd      	bmi.n	80066f8 <_fflush_r+0xc>
 800673c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800673e:	f000 f908 	bl	8006952 <__retarget_lock_release_recursive>
 8006742:	e7d9      	b.n	80066f8 <_fflush_r+0xc>
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <_fflush_r+0x70>)
 8006746:	429c      	cmp	r4, r3
 8006748:	d101      	bne.n	800674e <_fflush_r+0x62>
 800674a:	68ac      	ldr	r4, [r5, #8]
 800674c:	e7df      	b.n	800670e <_fflush_r+0x22>
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <_fflush_r+0x74>)
 8006750:	429c      	cmp	r4, r3
 8006752:	bf08      	it	eq
 8006754:	68ec      	ldreq	r4, [r5, #12]
 8006756:	e7da      	b.n	800670e <_fflush_r+0x22>
 8006758:	08007d50 	.word	0x08007d50
 800675c:	08007d70 	.word	0x08007d70
 8006760:	08007d30 	.word	0x08007d30

08006764 <std>:
 8006764:	2300      	movs	r3, #0
 8006766:	b510      	push	{r4, lr}
 8006768:	4604      	mov	r4, r0
 800676a:	e9c0 3300 	strd	r3, r3, [r0]
 800676e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006772:	6083      	str	r3, [r0, #8]
 8006774:	8181      	strh	r1, [r0, #12]
 8006776:	6643      	str	r3, [r0, #100]	; 0x64
 8006778:	81c2      	strh	r2, [r0, #14]
 800677a:	6183      	str	r3, [r0, #24]
 800677c:	4619      	mov	r1, r3
 800677e:	2208      	movs	r2, #8
 8006780:	305c      	adds	r0, #92	; 0x5c
 8006782:	f7ff fd43 	bl	800620c <memset>
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <std+0x38>)
 8006788:	6263      	str	r3, [r4, #36]	; 0x24
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <std+0x3c>)
 800678c:	62a3      	str	r3, [r4, #40]	; 0x28
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <std+0x40>)
 8006790:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <std+0x44>)
 8006794:	6224      	str	r4, [r4, #32]
 8006796:	6323      	str	r3, [r4, #48]	; 0x30
 8006798:	bd10      	pop	{r4, pc}
 800679a:	bf00      	nop
 800679c:	08006391 	.word	0x08006391
 80067a0:	080063b7 	.word	0x080063b7
 80067a4:	080063ef 	.word	0x080063ef
 80067a8:	08006413 	.word	0x08006413

080067ac <_cleanup_r>:
 80067ac:	4901      	ldr	r1, [pc, #4]	; (80067b4 <_cleanup_r+0x8>)
 80067ae:	f000 b8af 	b.w	8006910 <_fwalk_reent>
 80067b2:	bf00      	nop
 80067b4:	080066ed 	.word	0x080066ed

080067b8 <__sfmoreglue>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	2268      	movs	r2, #104	; 0x68
 80067bc:	1e4d      	subs	r5, r1, #1
 80067be:	4355      	muls	r5, r2
 80067c0:	460e      	mov	r6, r1
 80067c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067c6:	f000 f9a9 	bl	8006b1c <_malloc_r>
 80067ca:	4604      	mov	r4, r0
 80067cc:	b140      	cbz	r0, 80067e0 <__sfmoreglue+0x28>
 80067ce:	2100      	movs	r1, #0
 80067d0:	e9c0 1600 	strd	r1, r6, [r0]
 80067d4:	300c      	adds	r0, #12
 80067d6:	60a0      	str	r0, [r4, #8]
 80067d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067dc:	f7ff fd16 	bl	800620c <memset>
 80067e0:	4620      	mov	r0, r4
 80067e2:	bd70      	pop	{r4, r5, r6, pc}

080067e4 <__sfp_lock_acquire>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__sfp_lock_acquire+0x8>)
 80067e6:	f000 b8b3 	b.w	8006950 <__retarget_lock_acquire_recursive>
 80067ea:	bf00      	nop
 80067ec:	200006d5 	.word	0x200006d5

080067f0 <__sfp_lock_release>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__sfp_lock_release+0x8>)
 80067f2:	f000 b8ae 	b.w	8006952 <__retarget_lock_release_recursive>
 80067f6:	bf00      	nop
 80067f8:	200006d5 	.word	0x200006d5

080067fc <__sinit_lock_acquire>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__sinit_lock_acquire+0x8>)
 80067fe:	f000 b8a7 	b.w	8006950 <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	200006d6 	.word	0x200006d6

08006808 <__sinit_lock_release>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__sinit_lock_release+0x8>)
 800680a:	f000 b8a2 	b.w	8006952 <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	200006d6 	.word	0x200006d6

08006814 <__sinit>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	f7ff fff0 	bl	80067fc <__sinit_lock_acquire>
 800681c:	69a3      	ldr	r3, [r4, #24]
 800681e:	b11b      	cbz	r3, 8006828 <__sinit+0x14>
 8006820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006824:	f7ff bff0 	b.w	8006808 <__sinit_lock_release>
 8006828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800682c:	6523      	str	r3, [r4, #80]	; 0x50
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <__sinit+0x68>)
 8006830:	4a13      	ldr	r2, [pc, #76]	; (8006880 <__sinit+0x6c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	62a2      	str	r2, [r4, #40]	; 0x28
 8006836:	42a3      	cmp	r3, r4
 8006838:	bf04      	itt	eq
 800683a:	2301      	moveq	r3, #1
 800683c:	61a3      	streq	r3, [r4, #24]
 800683e:	4620      	mov	r0, r4
 8006840:	f000 f820 	bl	8006884 <__sfp>
 8006844:	6060      	str	r0, [r4, #4]
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f81c 	bl	8006884 <__sfp>
 800684c:	60a0      	str	r0, [r4, #8]
 800684e:	4620      	mov	r0, r4
 8006850:	f000 f818 	bl	8006884 <__sfp>
 8006854:	2200      	movs	r2, #0
 8006856:	60e0      	str	r0, [r4, #12]
 8006858:	2104      	movs	r1, #4
 800685a:	6860      	ldr	r0, [r4, #4]
 800685c:	f7ff ff82 	bl	8006764 <std>
 8006860:	68a0      	ldr	r0, [r4, #8]
 8006862:	2201      	movs	r2, #1
 8006864:	2109      	movs	r1, #9
 8006866:	f7ff ff7d 	bl	8006764 <std>
 800686a:	68e0      	ldr	r0, [r4, #12]
 800686c:	2202      	movs	r2, #2
 800686e:	2112      	movs	r1, #18
 8006870:	f7ff ff78 	bl	8006764 <std>
 8006874:	2301      	movs	r3, #1
 8006876:	61a3      	str	r3, [r4, #24]
 8006878:	e7d2      	b.n	8006820 <__sinit+0xc>
 800687a:	bf00      	nop
 800687c:	08007d2c 	.word	0x08007d2c
 8006880:	080067ad 	.word	0x080067ad

08006884 <__sfp>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	4607      	mov	r7, r0
 8006888:	f7ff ffac 	bl	80067e4 <__sfp_lock_acquire>
 800688c:	4b1e      	ldr	r3, [pc, #120]	; (8006908 <__sfp+0x84>)
 800688e:	681e      	ldr	r6, [r3, #0]
 8006890:	69b3      	ldr	r3, [r6, #24]
 8006892:	b913      	cbnz	r3, 800689a <__sfp+0x16>
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff ffbd 	bl	8006814 <__sinit>
 800689a:	3648      	adds	r6, #72	; 0x48
 800689c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	d503      	bpl.n	80068ac <__sfp+0x28>
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	b30b      	cbz	r3, 80068ec <__sfp+0x68>
 80068a8:	6836      	ldr	r6, [r6, #0]
 80068aa:	e7f7      	b.n	800689c <__sfp+0x18>
 80068ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068b0:	b9d5      	cbnz	r5, 80068e8 <__sfp+0x64>
 80068b2:	4b16      	ldr	r3, [pc, #88]	; (800690c <__sfp+0x88>)
 80068b4:	60e3      	str	r3, [r4, #12]
 80068b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ba:	6665      	str	r5, [r4, #100]	; 0x64
 80068bc:	f000 f847 	bl	800694e <__retarget_lock_init_recursive>
 80068c0:	f7ff ff96 	bl	80067f0 <__sfp_lock_release>
 80068c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068cc:	6025      	str	r5, [r4, #0]
 80068ce:	61a5      	str	r5, [r4, #24]
 80068d0:	2208      	movs	r2, #8
 80068d2:	4629      	mov	r1, r5
 80068d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068d8:	f7ff fc98 	bl	800620c <memset>
 80068dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068e4:	4620      	mov	r0, r4
 80068e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e8:	3468      	adds	r4, #104	; 0x68
 80068ea:	e7d9      	b.n	80068a0 <__sfp+0x1c>
 80068ec:	2104      	movs	r1, #4
 80068ee:	4638      	mov	r0, r7
 80068f0:	f7ff ff62 	bl	80067b8 <__sfmoreglue>
 80068f4:	4604      	mov	r4, r0
 80068f6:	6030      	str	r0, [r6, #0]
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d1d5      	bne.n	80068a8 <__sfp+0x24>
 80068fc:	f7ff ff78 	bl	80067f0 <__sfp_lock_release>
 8006900:	230c      	movs	r3, #12
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	e7ee      	b.n	80068e4 <__sfp+0x60>
 8006906:	bf00      	nop
 8006908:	08007d2c 	.word	0x08007d2c
 800690c:	ffff0001 	.word	0xffff0001

08006910 <_fwalk_reent>:
 8006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006914:	4606      	mov	r6, r0
 8006916:	4688      	mov	r8, r1
 8006918:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800691c:	2700      	movs	r7, #0
 800691e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006922:	f1b9 0901 	subs.w	r9, r9, #1
 8006926:	d505      	bpl.n	8006934 <_fwalk_reent+0x24>
 8006928:	6824      	ldr	r4, [r4, #0]
 800692a:	2c00      	cmp	r4, #0
 800692c:	d1f7      	bne.n	800691e <_fwalk_reent+0xe>
 800692e:	4638      	mov	r0, r7
 8006930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006934:	89ab      	ldrh	r3, [r5, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d907      	bls.n	800694a <_fwalk_reent+0x3a>
 800693a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800693e:	3301      	adds	r3, #1
 8006940:	d003      	beq.n	800694a <_fwalk_reent+0x3a>
 8006942:	4629      	mov	r1, r5
 8006944:	4630      	mov	r0, r6
 8006946:	47c0      	blx	r8
 8006948:	4307      	orrs	r7, r0
 800694a:	3568      	adds	r5, #104	; 0x68
 800694c:	e7e9      	b.n	8006922 <_fwalk_reent+0x12>

0800694e <__retarget_lock_init_recursive>:
 800694e:	4770      	bx	lr

08006950 <__retarget_lock_acquire_recursive>:
 8006950:	4770      	bx	lr

08006952 <__retarget_lock_release_recursive>:
 8006952:	4770      	bx	lr

08006954 <_lseek_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	; (8006974 <_lseek_r+0x20>)
 8006958:	4604      	mov	r4, r0
 800695a:	4608      	mov	r0, r1
 800695c:	4611      	mov	r1, r2
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f7fa fe2c 	bl	80015c0 <_lseek>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_lseek_r+0x1e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_lseek_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	200006e0 	.word	0x200006e0

08006978 <__swhatbuf_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	460e      	mov	r6, r1
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	2900      	cmp	r1, #0
 8006982:	b096      	sub	sp, #88	; 0x58
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	da08      	bge.n	800699c <__swhatbuf_r+0x24>
 800698a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	602a      	str	r2, [r5, #0]
 8006992:	061a      	lsls	r2, r3, #24
 8006994:	d410      	bmi.n	80069b8 <__swhatbuf_r+0x40>
 8006996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800699a:	e00e      	b.n	80069ba <__swhatbuf_r+0x42>
 800699c:	466a      	mov	r2, sp
 800699e:	f001 f8cf 	bl	8007b40 <_fstat_r>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	dbf1      	blt.n	800698a <__swhatbuf_r+0x12>
 80069a6:	9a01      	ldr	r2, [sp, #4]
 80069a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069b0:	425a      	negs	r2, r3
 80069b2:	415a      	adcs	r2, r3
 80069b4:	602a      	str	r2, [r5, #0]
 80069b6:	e7ee      	b.n	8006996 <__swhatbuf_r+0x1e>
 80069b8:	2340      	movs	r3, #64	; 0x40
 80069ba:	2000      	movs	r0, #0
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	b016      	add	sp, #88	; 0x58
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080069c4 <__smakebuf_r>:
 80069c4:	898b      	ldrh	r3, [r1, #12]
 80069c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069c8:	079d      	lsls	r5, r3, #30
 80069ca:	4606      	mov	r6, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	d507      	bpl.n	80069e0 <__smakebuf_r+0x1c>
 80069d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	2301      	movs	r3, #1
 80069da:	6163      	str	r3, [r4, #20]
 80069dc:	b002      	add	sp, #8
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	ab01      	add	r3, sp, #4
 80069e2:	466a      	mov	r2, sp
 80069e4:	f7ff ffc8 	bl	8006978 <__swhatbuf_r>
 80069e8:	9900      	ldr	r1, [sp, #0]
 80069ea:	4605      	mov	r5, r0
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f895 	bl	8006b1c <_malloc_r>
 80069f2:	b948      	cbnz	r0, 8006a08 <__smakebuf_r+0x44>
 80069f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f8:	059a      	lsls	r2, r3, #22
 80069fa:	d4ef      	bmi.n	80069dc <__smakebuf_r+0x18>
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	e7e3      	b.n	80069d0 <__smakebuf_r+0xc>
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <__smakebuf_r+0x7c>)
 8006a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	6020      	str	r0, [r4, #0]
 8006a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	6163      	str	r3, [r4, #20]
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	6120      	str	r0, [r4, #16]
 8006a1e:	b15b      	cbz	r3, 8006a38 <__smakebuf_r+0x74>
 8006a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a24:	4630      	mov	r0, r6
 8006a26:	f001 f89d 	bl	8007b64 <_isatty_r>
 8006a2a:	b128      	cbz	r0, 8006a38 <__smakebuf_r+0x74>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	89a0      	ldrh	r0, [r4, #12]
 8006a3a:	4305      	orrs	r5, r0
 8006a3c:	81a5      	strh	r5, [r4, #12]
 8006a3e:	e7cd      	b.n	80069dc <__smakebuf_r+0x18>
 8006a40:	080067ad 	.word	0x080067ad

08006a44 <_free_r>:
 8006a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d044      	beq.n	8006ad4 <_free_r+0x90>
 8006a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a4e:	9001      	str	r0, [sp, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f1a1 0404 	sub.w	r4, r1, #4
 8006a56:	bfb8      	it	lt
 8006a58:	18e4      	addlt	r4, r4, r3
 8006a5a:	f001 f8a1 	bl	8007ba0 <__malloc_lock>
 8006a5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <_free_r+0x94>)
 8006a60:	9801      	ldr	r0, [sp, #4]
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	b933      	cbnz	r3, 8006a74 <_free_r+0x30>
 8006a66:	6063      	str	r3, [r4, #4]
 8006a68:	6014      	str	r4, [r2, #0]
 8006a6a:	b003      	add	sp, #12
 8006a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a70:	f001 b89c 	b.w	8007bac <__malloc_unlock>
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	d908      	bls.n	8006a8a <_free_r+0x46>
 8006a78:	6825      	ldr	r5, [r4, #0]
 8006a7a:	1961      	adds	r1, r4, r5
 8006a7c:	428b      	cmp	r3, r1
 8006a7e:	bf01      	itttt	eq
 8006a80:	6819      	ldreq	r1, [r3, #0]
 8006a82:	685b      	ldreq	r3, [r3, #4]
 8006a84:	1949      	addeq	r1, r1, r5
 8006a86:	6021      	streq	r1, [r4, #0]
 8006a88:	e7ed      	b.n	8006a66 <_free_r+0x22>
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	b10b      	cbz	r3, 8006a94 <_free_r+0x50>
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d9fa      	bls.n	8006a8a <_free_r+0x46>
 8006a94:	6811      	ldr	r1, [r2, #0]
 8006a96:	1855      	adds	r5, r2, r1
 8006a98:	42a5      	cmp	r5, r4
 8006a9a:	d10b      	bne.n	8006ab4 <_free_r+0x70>
 8006a9c:	6824      	ldr	r4, [r4, #0]
 8006a9e:	4421      	add	r1, r4
 8006aa0:	1854      	adds	r4, r2, r1
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	6011      	str	r1, [r2, #0]
 8006aa6:	d1e0      	bne.n	8006a6a <_free_r+0x26>
 8006aa8:	681c      	ldr	r4, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	6053      	str	r3, [r2, #4]
 8006aae:	4421      	add	r1, r4
 8006ab0:	6011      	str	r1, [r2, #0]
 8006ab2:	e7da      	b.n	8006a6a <_free_r+0x26>
 8006ab4:	d902      	bls.n	8006abc <_free_r+0x78>
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	6003      	str	r3, [r0, #0]
 8006aba:	e7d6      	b.n	8006a6a <_free_r+0x26>
 8006abc:	6825      	ldr	r5, [r4, #0]
 8006abe:	1961      	adds	r1, r4, r5
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	bf04      	itt	eq
 8006ac4:	6819      	ldreq	r1, [r3, #0]
 8006ac6:	685b      	ldreq	r3, [r3, #4]
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	bf04      	itt	eq
 8006acc:	1949      	addeq	r1, r1, r5
 8006ace:	6021      	streq	r1, [r4, #0]
 8006ad0:	6054      	str	r4, [r2, #4]
 8006ad2:	e7ca      	b.n	8006a6a <_free_r+0x26>
 8006ad4:	b003      	add	sp, #12
 8006ad6:	bd30      	pop	{r4, r5, pc}
 8006ad8:	200006d8 	.word	0x200006d8

08006adc <sbrk_aligned>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	4e0e      	ldr	r6, [pc, #56]	; (8006b18 <sbrk_aligned+0x3c>)
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	6831      	ldr	r1, [r6, #0]
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	b911      	cbnz	r1, 8006aee <sbrk_aligned+0x12>
 8006ae8:	f000 feb0 	bl	800784c <_sbrk_r>
 8006aec:	6030      	str	r0, [r6, #0]
 8006aee:	4621      	mov	r1, r4
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 feab 	bl	800784c <_sbrk_r>
 8006af6:	1c43      	adds	r3, r0, #1
 8006af8:	d00a      	beq.n	8006b10 <sbrk_aligned+0x34>
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d007      	beq.n	8006b14 <sbrk_aligned+0x38>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fea0 	bl	800784c <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d101      	bne.n	8006b14 <sbrk_aligned+0x38>
 8006b10:	f04f 34ff 	mov.w	r4, #4294967295
 8006b14:	4620      	mov	r0, r4
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	200006dc 	.word	0x200006dc

08006b1c <_malloc_r>:
 8006b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b20:	1ccd      	adds	r5, r1, #3
 8006b22:	f025 0503 	bic.w	r5, r5, #3
 8006b26:	3508      	adds	r5, #8
 8006b28:	2d0c      	cmp	r5, #12
 8006b2a:	bf38      	it	cc
 8006b2c:	250c      	movcc	r5, #12
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	4607      	mov	r7, r0
 8006b32:	db01      	blt.n	8006b38 <_malloc_r+0x1c>
 8006b34:	42a9      	cmp	r1, r5
 8006b36:	d905      	bls.n	8006b44 <_malloc_r+0x28>
 8006b38:	230c      	movs	r3, #12
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	4630      	mov	r0, r6
 8006b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b44:	4e2e      	ldr	r6, [pc, #184]	; (8006c00 <_malloc_r+0xe4>)
 8006b46:	f001 f82b 	bl	8007ba0 <__malloc_lock>
 8006b4a:	6833      	ldr	r3, [r6, #0]
 8006b4c:	461c      	mov	r4, r3
 8006b4e:	bb34      	cbnz	r4, 8006b9e <_malloc_r+0x82>
 8006b50:	4629      	mov	r1, r5
 8006b52:	4638      	mov	r0, r7
 8006b54:	f7ff ffc2 	bl	8006adc <sbrk_aligned>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	d14d      	bne.n	8006bfa <_malloc_r+0xde>
 8006b5e:	6834      	ldr	r4, [r6, #0]
 8006b60:	4626      	mov	r6, r4
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	d140      	bne.n	8006be8 <_malloc_r+0xcc>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	eb04 0803 	add.w	r8, r4, r3
 8006b70:	f000 fe6c 	bl	800784c <_sbrk_r>
 8006b74:	4580      	cmp	r8, r0
 8006b76:	d13a      	bne.n	8006bee <_malloc_r+0xd2>
 8006b78:	6821      	ldr	r1, [r4, #0]
 8006b7a:	3503      	adds	r5, #3
 8006b7c:	1a6d      	subs	r5, r5, r1
 8006b7e:	f025 0503 	bic.w	r5, r5, #3
 8006b82:	3508      	adds	r5, #8
 8006b84:	2d0c      	cmp	r5, #12
 8006b86:	bf38      	it	cc
 8006b88:	250c      	movcc	r5, #12
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f7ff ffa5 	bl	8006adc <sbrk_aligned>
 8006b92:	3001      	adds	r0, #1
 8006b94:	d02b      	beq.n	8006bee <_malloc_r+0xd2>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	442b      	add	r3, r5
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	e00e      	b.n	8006bbc <_malloc_r+0xa0>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	1b52      	subs	r2, r2, r5
 8006ba2:	d41e      	bmi.n	8006be2 <_malloc_r+0xc6>
 8006ba4:	2a0b      	cmp	r2, #11
 8006ba6:	d916      	bls.n	8006bd6 <_malloc_r+0xba>
 8006ba8:	1961      	adds	r1, r4, r5
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	6025      	str	r5, [r4, #0]
 8006bae:	bf18      	it	ne
 8006bb0:	6059      	strne	r1, [r3, #4]
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	bf08      	it	eq
 8006bb6:	6031      	streq	r1, [r6, #0]
 8006bb8:	5162      	str	r2, [r4, r5]
 8006bba:	604b      	str	r3, [r1, #4]
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	f104 060b 	add.w	r6, r4, #11
 8006bc2:	f000 fff3 	bl	8007bac <__malloc_unlock>
 8006bc6:	f026 0607 	bic.w	r6, r6, #7
 8006bca:	1d23      	adds	r3, r4, #4
 8006bcc:	1af2      	subs	r2, r6, r3
 8006bce:	d0b6      	beq.n	8006b3e <_malloc_r+0x22>
 8006bd0:	1b9b      	subs	r3, r3, r6
 8006bd2:	50a3      	str	r3, [r4, r2]
 8006bd4:	e7b3      	b.n	8006b3e <_malloc_r+0x22>
 8006bd6:	6862      	ldr	r2, [r4, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	bf0c      	ite	eq
 8006bdc:	6032      	streq	r2, [r6, #0]
 8006bde:	605a      	strne	r2, [r3, #4]
 8006be0:	e7ec      	b.n	8006bbc <_malloc_r+0xa0>
 8006be2:	4623      	mov	r3, r4
 8006be4:	6864      	ldr	r4, [r4, #4]
 8006be6:	e7b2      	b.n	8006b4e <_malloc_r+0x32>
 8006be8:	4634      	mov	r4, r6
 8006bea:	6876      	ldr	r6, [r6, #4]
 8006bec:	e7b9      	b.n	8006b62 <_malloc_r+0x46>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f000 ffda 	bl	8007bac <__malloc_unlock>
 8006bf8:	e7a1      	b.n	8006b3e <_malloc_r+0x22>
 8006bfa:	6025      	str	r5, [r4, #0]
 8006bfc:	e7de      	b.n	8006bbc <_malloc_r+0xa0>
 8006bfe:	bf00      	nop
 8006c00:	200006d8 	.word	0x200006d8

08006c04 <_sungetc_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	1c4b      	adds	r3, r1, #1
 8006c08:	4614      	mov	r4, r2
 8006c0a:	d103      	bne.n	8006c14 <_sungetc_r+0x10>
 8006c0c:	f04f 35ff 	mov.w	r5, #4294967295
 8006c10:	4628      	mov	r0, r5
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	8993      	ldrh	r3, [r2, #12]
 8006c16:	f023 0320 	bic.w	r3, r3, #32
 8006c1a:	8193      	strh	r3, [r2, #12]
 8006c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c1e:	6852      	ldr	r2, [r2, #4]
 8006c20:	b2cd      	uxtb	r5, r1
 8006c22:	b18b      	cbz	r3, 8006c48 <_sungetc_r+0x44>
 8006c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c26:	4293      	cmp	r3, r2
 8006c28:	dd08      	ble.n	8006c3c <_sungetc_r+0x38>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	3301      	adds	r3, #1
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	e7e9      	b.n	8006c10 <_sungetc_r+0xc>
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	f000 ff45 	bl	8007acc <__submore>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0f1      	beq.n	8006c2a <_sungetc_r+0x26>
 8006c46:	e7e1      	b.n	8006c0c <_sungetc_r+0x8>
 8006c48:	6921      	ldr	r1, [r4, #16]
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	b151      	cbz	r1, 8006c64 <_sungetc_r+0x60>
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	d208      	bcs.n	8006c64 <_sungetc_r+0x60>
 8006c52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006c56:	42a9      	cmp	r1, r5
 8006c58:	d104      	bne.n	8006c64 <_sungetc_r+0x60>
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	6062      	str	r2, [r4, #4]
 8006c62:	e7d5      	b.n	8006c10 <_sungetc_r+0xc>
 8006c64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c6e:	2303      	movs	r3, #3
 8006c70:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c72:	4623      	mov	r3, r4
 8006c74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e7dc      	b.n	8006c38 <_sungetc_r+0x34>

08006c7e <__ssrefill_r>:
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006c84:	b169      	cbz	r1, 8006ca2 <__ssrefill_r+0x24>
 8006c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	d001      	beq.n	8006c92 <__ssrefill_r+0x14>
 8006c8e:	f7ff fed9 	bl	8006a44 <_free_r>
 8006c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	2000      	movs	r0, #0
 8006c98:	6360      	str	r0, [r4, #52]	; 0x34
 8006c9a:	b113      	cbz	r3, 8006ca2 <__ssrefill_r+0x24>
 8006c9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6063      	str	r3, [r4, #4]
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb6:	e7f3      	b.n	8006ca0 <__ssrefill_r+0x22>

08006cb8 <__ssvfiscanf_r>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006cc8:	49a6      	ldr	r1, [pc, #664]	; (8006f64 <__ssvfiscanf_r+0x2ac>)
 8006cca:	91a0      	str	r1, [sp, #640]	; 0x280
 8006ccc:	f10d 0804 	add.w	r8, sp, #4
 8006cd0:	49a5      	ldr	r1, [pc, #660]	; (8006f68 <__ssvfiscanf_r+0x2b0>)
 8006cd2:	4fa6      	ldr	r7, [pc, #664]	; (8006f6c <__ssvfiscanf_r+0x2b4>)
 8006cd4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006f70 <__ssvfiscanf_r+0x2b8>
 8006cd8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006cdc:	4606      	mov	r6, r0
 8006cde:	91a1      	str	r1, [sp, #644]	; 0x284
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	7813      	ldrb	r3, [r2, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 815a 	beq.w	8006f9e <__ssvfiscanf_r+0x2e6>
 8006cea:	5dd9      	ldrb	r1, [r3, r7]
 8006cec:	f011 0108 	ands.w	r1, r1, #8
 8006cf0:	f102 0501 	add.w	r5, r2, #1
 8006cf4:	d019      	beq.n	8006d2a <__ssvfiscanf_r+0x72>
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dd0f      	ble.n	8006d1c <__ssvfiscanf_r+0x64>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	5cba      	ldrb	r2, [r7, r2]
 8006d02:	0712      	lsls	r2, r2, #28
 8006d04:	d401      	bmi.n	8006d0a <__ssvfiscanf_r+0x52>
 8006d06:	462a      	mov	r2, r5
 8006d08:	e7eb      	b.n	8006ce2 <__ssvfiscanf_r+0x2a>
 8006d0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d0c:	3201      	adds	r2, #1
 8006d0e:	9245      	str	r2, [sp, #276]	; 0x114
 8006d10:	6862      	ldr	r2, [r4, #4]
 8006d12:	3301      	adds	r3, #1
 8006d14:	3a01      	subs	r2, #1
 8006d16:	6062      	str	r2, [r4, #4]
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	e7ec      	b.n	8006cf6 <__ssvfiscanf_r+0x3e>
 8006d1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4630      	mov	r0, r6
 8006d22:	4798      	blx	r3
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d0e9      	beq.n	8006cfc <__ssvfiscanf_r+0x44>
 8006d28:	e7ed      	b.n	8006d06 <__ssvfiscanf_r+0x4e>
 8006d2a:	2b25      	cmp	r3, #37	; 0x25
 8006d2c:	d012      	beq.n	8006d54 <__ssvfiscanf_r+0x9c>
 8006d2e:	469a      	mov	sl, r3
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f340 8091 	ble.w	8006e5a <__ssvfiscanf_r+0x1a2>
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	7813      	ldrb	r3, [r2, #0]
 8006d3c:	4553      	cmp	r3, sl
 8006d3e:	f040 812e 	bne.w	8006f9e <__ssvfiscanf_r+0x2e6>
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006d4a:	3201      	adds	r2, #1
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	6022      	str	r2, [r4, #0]
 8006d50:	9345      	str	r3, [sp, #276]	; 0x114
 8006d52:	e7d8      	b.n	8006d06 <__ssvfiscanf_r+0x4e>
 8006d54:	9141      	str	r1, [sp, #260]	; 0x104
 8006d56:	9143      	str	r1, [sp, #268]	; 0x10c
 8006d58:	7853      	ldrb	r3, [r2, #1]
 8006d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5c:	bf02      	ittt	eq
 8006d5e:	2310      	moveq	r3, #16
 8006d60:	1c95      	addeq	r5, r2, #2
 8006d62:	9341      	streq	r3, [sp, #260]	; 0x104
 8006d64:	220a      	movs	r2, #10
 8006d66:	46aa      	mov	sl, r5
 8006d68:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006d6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006d70:	2b09      	cmp	r3, #9
 8006d72:	d91d      	bls.n	8006db0 <__ssvfiscanf_r+0xf8>
 8006d74:	487e      	ldr	r0, [pc, #504]	; (8006f70 <__ssvfiscanf_r+0x2b8>)
 8006d76:	2203      	movs	r2, #3
 8006d78:	f7f9 fa42 	bl	8000200 <memchr>
 8006d7c:	b140      	cbz	r0, 8006d90 <__ssvfiscanf_r+0xd8>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	eba0 0009 	sub.w	r0, r0, r9
 8006d84:	fa03 f000 	lsl.w	r0, r3, r0
 8006d88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d8a:	4318      	orrs	r0, r3
 8006d8c:	9041      	str	r0, [sp, #260]	; 0x104
 8006d8e:	4655      	mov	r5, sl
 8006d90:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d94:	2b78      	cmp	r3, #120	; 0x78
 8006d96:	d806      	bhi.n	8006da6 <__ssvfiscanf_r+0xee>
 8006d98:	2b57      	cmp	r3, #87	; 0x57
 8006d9a:	d810      	bhi.n	8006dbe <__ssvfiscanf_r+0x106>
 8006d9c:	2b25      	cmp	r3, #37	; 0x25
 8006d9e:	d0c6      	beq.n	8006d2e <__ssvfiscanf_r+0x76>
 8006da0:	d856      	bhi.n	8006e50 <__ssvfiscanf_r+0x198>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d064      	beq.n	8006e70 <__ssvfiscanf_r+0x1b8>
 8006da6:	2303      	movs	r3, #3
 8006da8:	9347      	str	r3, [sp, #284]	; 0x11c
 8006daa:	230a      	movs	r3, #10
 8006dac:	9342      	str	r3, [sp, #264]	; 0x108
 8006dae:	e071      	b.n	8006e94 <__ssvfiscanf_r+0x1dc>
 8006db0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006db2:	fb02 1103 	mla	r1, r2, r3, r1
 8006db6:	3930      	subs	r1, #48	; 0x30
 8006db8:	9143      	str	r1, [sp, #268]	; 0x10c
 8006dba:	4655      	mov	r5, sl
 8006dbc:	e7d3      	b.n	8006d66 <__ssvfiscanf_r+0xae>
 8006dbe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006dc2:	2a20      	cmp	r2, #32
 8006dc4:	d8ef      	bhi.n	8006da6 <__ssvfiscanf_r+0xee>
 8006dc6:	a101      	add	r1, pc, #4	; (adr r1, 8006dcc <__ssvfiscanf_r+0x114>)
 8006dc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006dcc:	08006e7f 	.word	0x08006e7f
 8006dd0:	08006da7 	.word	0x08006da7
 8006dd4:	08006da7 	.word	0x08006da7
 8006dd8:	08006edd 	.word	0x08006edd
 8006ddc:	08006da7 	.word	0x08006da7
 8006de0:	08006da7 	.word	0x08006da7
 8006de4:	08006da7 	.word	0x08006da7
 8006de8:	08006da7 	.word	0x08006da7
 8006dec:	08006da7 	.word	0x08006da7
 8006df0:	08006da7 	.word	0x08006da7
 8006df4:	08006da7 	.word	0x08006da7
 8006df8:	08006ef3 	.word	0x08006ef3
 8006dfc:	08006ec9 	.word	0x08006ec9
 8006e00:	08006e57 	.word	0x08006e57
 8006e04:	08006e57 	.word	0x08006e57
 8006e08:	08006e57 	.word	0x08006e57
 8006e0c:	08006da7 	.word	0x08006da7
 8006e10:	08006ecd 	.word	0x08006ecd
 8006e14:	08006da7 	.word	0x08006da7
 8006e18:	08006da7 	.word	0x08006da7
 8006e1c:	08006da7 	.word	0x08006da7
 8006e20:	08006da7 	.word	0x08006da7
 8006e24:	08006f03 	.word	0x08006f03
 8006e28:	08006ed5 	.word	0x08006ed5
 8006e2c:	08006e77 	.word	0x08006e77
 8006e30:	08006da7 	.word	0x08006da7
 8006e34:	08006da7 	.word	0x08006da7
 8006e38:	08006eff 	.word	0x08006eff
 8006e3c:	08006da7 	.word	0x08006da7
 8006e40:	08006ec9 	.word	0x08006ec9
 8006e44:	08006da7 	.word	0x08006da7
 8006e48:	08006da7 	.word	0x08006da7
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	3b45      	subs	r3, #69	; 0x45
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d8a7      	bhi.n	8006da6 <__ssvfiscanf_r+0xee>
 8006e56:	2305      	movs	r3, #5
 8006e58:	e01b      	b.n	8006e92 <__ssvfiscanf_r+0x1da>
 8006e5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4798      	blx	r3
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f43f af68 	beq.w	8006d38 <__ssvfiscanf_r+0x80>
 8006e68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f040 808d 	bne.w	8006f8a <__ssvfiscanf_r+0x2d2>
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	e08f      	b.n	8006f96 <__ssvfiscanf_r+0x2de>
 8006e76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006e78:	f042 0220 	orr.w	r2, r2, #32
 8006e7c:	9241      	str	r2, [sp, #260]	; 0x104
 8006e7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e84:	9241      	str	r2, [sp, #260]	; 0x104
 8006e86:	2210      	movs	r2, #16
 8006e88:	2b6f      	cmp	r3, #111	; 0x6f
 8006e8a:	9242      	str	r2, [sp, #264]	; 0x108
 8006e8c:	bf34      	ite	cc
 8006e8e:	2303      	movcc	r3, #3
 8006e90:	2304      	movcs	r3, #4
 8006e92:	9347      	str	r3, [sp, #284]	; 0x11c
 8006e94:	6863      	ldr	r3, [r4, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dd42      	ble.n	8006f20 <__ssvfiscanf_r+0x268>
 8006e9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e9c:	0659      	lsls	r1, r3, #25
 8006e9e:	d404      	bmi.n	8006eaa <__ssvfiscanf_r+0x1f2>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	5cba      	ldrb	r2, [r7, r2]
 8006ea6:	0712      	lsls	r2, r2, #28
 8006ea8:	d441      	bmi.n	8006f2e <__ssvfiscanf_r+0x276>
 8006eaa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	dc50      	bgt.n	8006f52 <__ssvfiscanf_r+0x29a>
 8006eb0:	466b      	mov	r3, sp
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	a941      	add	r1, sp, #260	; 0x104
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f000 fb64 	bl	8007584 <_scanf_chars>
 8006ebc:	2801      	cmp	r0, #1
 8006ebe:	d06e      	beq.n	8006f9e <__ssvfiscanf_r+0x2e6>
 8006ec0:	2802      	cmp	r0, #2
 8006ec2:	f47f af20 	bne.w	8006d06 <__ssvfiscanf_r+0x4e>
 8006ec6:	e7cf      	b.n	8006e68 <__ssvfiscanf_r+0x1b0>
 8006ec8:	220a      	movs	r2, #10
 8006eca:	e7dd      	b.n	8006e88 <__ssvfiscanf_r+0x1d0>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9342      	str	r3, [sp, #264]	; 0x108
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e7de      	b.n	8006e92 <__ssvfiscanf_r+0x1da>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	9342      	str	r3, [sp, #264]	; 0x108
 8006ed8:	2304      	movs	r3, #4
 8006eda:	e7da      	b.n	8006e92 <__ssvfiscanf_r+0x1da>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f000 fcc4 	bl	800786c <__sccl>
 8006ee4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eea:	9341      	str	r3, [sp, #260]	; 0x104
 8006eec:	4605      	mov	r5, r0
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e7cf      	b.n	8006e92 <__ssvfiscanf_r+0x1da>
 8006ef2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef8:	9341      	str	r3, [sp, #260]	; 0x104
 8006efa:	2300      	movs	r3, #0
 8006efc:	e7c9      	b.n	8006e92 <__ssvfiscanf_r+0x1da>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e7c7      	b.n	8006e92 <__ssvfiscanf_r+0x1da>
 8006f02:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006f04:	06c3      	lsls	r3, r0, #27
 8006f06:	f53f aefe 	bmi.w	8006d06 <__ssvfiscanf_r+0x4e>
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006f0e:	1d19      	adds	r1, r3, #4
 8006f10:	9100      	str	r1, [sp, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f010 0f01 	tst.w	r0, #1
 8006f18:	bf14      	ite	ne
 8006f1a:	801a      	strhne	r2, [r3, #0]
 8006f1c:	601a      	streq	r2, [r3, #0]
 8006f1e:	e6f2      	b.n	8006d06 <__ssvfiscanf_r+0x4e>
 8006f20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f22:	4621      	mov	r1, r4
 8006f24:	4630      	mov	r0, r6
 8006f26:	4798      	blx	r3
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d0b6      	beq.n	8006e9a <__ssvfiscanf_r+0x1e2>
 8006f2c:	e79c      	b.n	8006e68 <__ssvfiscanf_r+0x1b0>
 8006f2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006f30:	3201      	adds	r2, #1
 8006f32:	9245      	str	r2, [sp, #276]	; 0x114
 8006f34:	6862      	ldr	r2, [r4, #4]
 8006f36:	3a01      	subs	r2, #1
 8006f38:	2a00      	cmp	r2, #0
 8006f3a:	6062      	str	r2, [r4, #4]
 8006f3c:	dd02      	ble.n	8006f44 <__ssvfiscanf_r+0x28c>
 8006f3e:	3301      	adds	r3, #1
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	e7ad      	b.n	8006ea0 <__ssvfiscanf_r+0x1e8>
 8006f44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f46:	4621      	mov	r1, r4
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4798      	blx	r3
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d0a7      	beq.n	8006ea0 <__ssvfiscanf_r+0x1e8>
 8006f50:	e78a      	b.n	8006e68 <__ssvfiscanf_r+0x1b0>
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	dc0e      	bgt.n	8006f74 <__ssvfiscanf_r+0x2bc>
 8006f56:	466b      	mov	r3, sp
 8006f58:	4622      	mov	r2, r4
 8006f5a:	a941      	add	r1, sp, #260	; 0x104
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 fb6b 	bl	8007638 <_scanf_i>
 8006f62:	e7ab      	b.n	8006ebc <__ssvfiscanf_r+0x204>
 8006f64:	08006c05 	.word	0x08006c05
 8006f68:	08006c7f 	.word	0x08006c7f
 8006f6c:	08007ddf 	.word	0x08007ddf
 8006f70:	08007d90 	.word	0x08007d90
 8006f74:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <__ssvfiscanf_r+0x2ec>)
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f43f aec5 	beq.w	8006d06 <__ssvfiscanf_r+0x4e>
 8006f7c:	466b      	mov	r3, sp
 8006f7e:	4622      	mov	r2, r4
 8006f80:	a941      	add	r1, sp, #260	; 0x104
 8006f82:	4630      	mov	r0, r6
 8006f84:	f3af 8000 	nop.w
 8006f88:	e798      	b.n	8006ebc <__ssvfiscanf_r+0x204>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f90:	bf18      	it	ne
 8006f92:	f04f 30ff 	movne.w	r0, #4294967295
 8006f96:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006fa0:	e7f9      	b.n	8006f96 <__ssvfiscanf_r+0x2de>
 8006fa2:	bf00      	nop
 8006fa4:	00000000 	.word	0x00000000

08006fa8 <__sfputc_r>:
 8006fa8:	6893      	ldr	r3, [r2, #8]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	b410      	push	{r4}
 8006fb0:	6093      	str	r3, [r2, #8]
 8006fb2:	da08      	bge.n	8006fc6 <__sfputc_r+0x1e>
 8006fb4:	6994      	ldr	r4, [r2, #24]
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	db01      	blt.n	8006fbe <__sfputc_r+0x16>
 8006fba:	290a      	cmp	r1, #10
 8006fbc:	d103      	bne.n	8006fc6 <__sfputc_r+0x1e>
 8006fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc2:	f7ff ba2b 	b.w	800641c <__swbuf_r>
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	1c58      	adds	r0, r3, #1
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	7019      	strb	r1, [r3, #0]
 8006fce:	4608      	mov	r0, r1
 8006fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <__sfputs_r>:
 8006fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	4614      	mov	r4, r2
 8006fde:	18d5      	adds	r5, r2, r3
 8006fe0:	42ac      	cmp	r4, r5
 8006fe2:	d101      	bne.n	8006fe8 <__sfputs_r+0x12>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e007      	b.n	8006ff8 <__sfputs_r+0x22>
 8006fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fec:	463a      	mov	r2, r7
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7ff ffda 	bl	8006fa8 <__sfputc_r>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d1f3      	bne.n	8006fe0 <__sfputs_r+0xa>
 8006ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ffc <_vfiprintf_r>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	460d      	mov	r5, r1
 8007002:	b09d      	sub	sp, #116	; 0x74
 8007004:	4614      	mov	r4, r2
 8007006:	4698      	mov	r8, r3
 8007008:	4606      	mov	r6, r0
 800700a:	b118      	cbz	r0, 8007014 <_vfiprintf_r+0x18>
 800700c:	6983      	ldr	r3, [r0, #24]
 800700e:	b90b      	cbnz	r3, 8007014 <_vfiprintf_r+0x18>
 8007010:	f7ff fc00 	bl	8006814 <__sinit>
 8007014:	4b89      	ldr	r3, [pc, #548]	; (800723c <_vfiprintf_r+0x240>)
 8007016:	429d      	cmp	r5, r3
 8007018:	d11b      	bne.n	8007052 <_vfiprintf_r+0x56>
 800701a:	6875      	ldr	r5, [r6, #4]
 800701c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800701e:	07d9      	lsls	r1, r3, #31
 8007020:	d405      	bmi.n	800702e <_vfiprintf_r+0x32>
 8007022:	89ab      	ldrh	r3, [r5, #12]
 8007024:	059a      	lsls	r2, r3, #22
 8007026:	d402      	bmi.n	800702e <_vfiprintf_r+0x32>
 8007028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800702a:	f7ff fc91 	bl	8006950 <__retarget_lock_acquire_recursive>
 800702e:	89ab      	ldrh	r3, [r5, #12]
 8007030:	071b      	lsls	r3, r3, #28
 8007032:	d501      	bpl.n	8007038 <_vfiprintf_r+0x3c>
 8007034:	692b      	ldr	r3, [r5, #16]
 8007036:	b9eb      	cbnz	r3, 8007074 <_vfiprintf_r+0x78>
 8007038:	4629      	mov	r1, r5
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff fa52 	bl	80064e4 <__swsetup_r>
 8007040:	b1c0      	cbz	r0, 8007074 <_vfiprintf_r+0x78>
 8007042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007044:	07dc      	lsls	r4, r3, #31
 8007046:	d50e      	bpl.n	8007066 <_vfiprintf_r+0x6a>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	b01d      	add	sp, #116	; 0x74
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007052:	4b7b      	ldr	r3, [pc, #492]	; (8007240 <_vfiprintf_r+0x244>)
 8007054:	429d      	cmp	r5, r3
 8007056:	d101      	bne.n	800705c <_vfiprintf_r+0x60>
 8007058:	68b5      	ldr	r5, [r6, #8]
 800705a:	e7df      	b.n	800701c <_vfiprintf_r+0x20>
 800705c:	4b79      	ldr	r3, [pc, #484]	; (8007244 <_vfiprintf_r+0x248>)
 800705e:	429d      	cmp	r5, r3
 8007060:	bf08      	it	eq
 8007062:	68f5      	ldreq	r5, [r6, #12]
 8007064:	e7da      	b.n	800701c <_vfiprintf_r+0x20>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	0598      	lsls	r0, r3, #22
 800706a:	d4ed      	bmi.n	8007048 <_vfiprintf_r+0x4c>
 800706c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706e:	f7ff fc70 	bl	8006952 <__retarget_lock_release_recursive>
 8007072:	e7e9      	b.n	8007048 <_vfiprintf_r+0x4c>
 8007074:	2300      	movs	r3, #0
 8007076:	9309      	str	r3, [sp, #36]	; 0x24
 8007078:	2320      	movs	r3, #32
 800707a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007082:	2330      	movs	r3, #48	; 0x30
 8007084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007248 <_vfiprintf_r+0x24c>
 8007088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800708c:	f04f 0901 	mov.w	r9, #1
 8007090:	4623      	mov	r3, r4
 8007092:	469a      	mov	sl, r3
 8007094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007098:	b10a      	cbz	r2, 800709e <_vfiprintf_r+0xa2>
 800709a:	2a25      	cmp	r2, #37	; 0x25
 800709c:	d1f9      	bne.n	8007092 <_vfiprintf_r+0x96>
 800709e:	ebba 0b04 	subs.w	fp, sl, r4
 80070a2:	d00b      	beq.n	80070bc <_vfiprintf_r+0xc0>
 80070a4:	465b      	mov	r3, fp
 80070a6:	4622      	mov	r2, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ff93 	bl	8006fd6 <__sfputs_r>
 80070b0:	3001      	adds	r0, #1
 80070b2:	f000 80aa 	beq.w	800720a <_vfiprintf_r+0x20e>
 80070b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b8:	445a      	add	r2, fp
 80070ba:	9209      	str	r2, [sp, #36]	; 0x24
 80070bc:	f89a 3000 	ldrb.w	r3, [sl]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80a2 	beq.w	800720a <_vfiprintf_r+0x20e>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295
 80070cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d0:	f10a 0a01 	add.w	sl, sl, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070dc:	931a      	str	r3, [sp, #104]	; 0x68
 80070de:	4654      	mov	r4, sl
 80070e0:	2205      	movs	r2, #5
 80070e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e6:	4858      	ldr	r0, [pc, #352]	; (8007248 <_vfiprintf_r+0x24c>)
 80070e8:	f7f9 f88a 	bl	8000200 <memchr>
 80070ec:	9a04      	ldr	r2, [sp, #16]
 80070ee:	b9d8      	cbnz	r0, 8007128 <_vfiprintf_r+0x12c>
 80070f0:	06d1      	lsls	r1, r2, #27
 80070f2:	bf44      	itt	mi
 80070f4:	2320      	movmi	r3, #32
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fa:	0713      	lsls	r3, r2, #28
 80070fc:	bf44      	itt	mi
 80070fe:	232b      	movmi	r3, #43	; 0x2b
 8007100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007104:	f89a 3000 	ldrb.w	r3, [sl]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d015      	beq.n	8007138 <_vfiprintf_r+0x13c>
 800710c:	9a07      	ldr	r2, [sp, #28]
 800710e:	4654      	mov	r4, sl
 8007110:	2000      	movs	r0, #0
 8007112:	f04f 0c0a 	mov.w	ip, #10
 8007116:	4621      	mov	r1, r4
 8007118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800711c:	3b30      	subs	r3, #48	; 0x30
 800711e:	2b09      	cmp	r3, #9
 8007120:	d94e      	bls.n	80071c0 <_vfiprintf_r+0x1c4>
 8007122:	b1b0      	cbz	r0, 8007152 <_vfiprintf_r+0x156>
 8007124:	9207      	str	r2, [sp, #28]
 8007126:	e014      	b.n	8007152 <_vfiprintf_r+0x156>
 8007128:	eba0 0308 	sub.w	r3, r0, r8
 800712c:	fa09 f303 	lsl.w	r3, r9, r3
 8007130:	4313      	orrs	r3, r2
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	46a2      	mov	sl, r4
 8007136:	e7d2      	b.n	80070de <_vfiprintf_r+0xe2>
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	1d19      	adds	r1, r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	9103      	str	r1, [sp, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	bfbb      	ittet	lt
 8007144:	425b      	neglt	r3, r3
 8007146:	f042 0202 	orrlt.w	r2, r2, #2
 800714a:	9307      	strge	r3, [sp, #28]
 800714c:	9307      	strlt	r3, [sp, #28]
 800714e:	bfb8      	it	lt
 8007150:	9204      	strlt	r2, [sp, #16]
 8007152:	7823      	ldrb	r3, [r4, #0]
 8007154:	2b2e      	cmp	r3, #46	; 0x2e
 8007156:	d10c      	bne.n	8007172 <_vfiprintf_r+0x176>
 8007158:	7863      	ldrb	r3, [r4, #1]
 800715a:	2b2a      	cmp	r3, #42	; 0x2a
 800715c:	d135      	bne.n	80071ca <_vfiprintf_r+0x1ce>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9203      	str	r2, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfb8      	it	lt
 800716a:	f04f 33ff 	movlt.w	r3, #4294967295
 800716e:	3402      	adds	r4, #2
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007258 <_vfiprintf_r+0x25c>
 8007176:	7821      	ldrb	r1, [r4, #0]
 8007178:	2203      	movs	r2, #3
 800717a:	4650      	mov	r0, sl
 800717c:	f7f9 f840 	bl	8000200 <memchr>
 8007180:	b140      	cbz	r0, 8007194 <_vfiprintf_r+0x198>
 8007182:	2340      	movs	r3, #64	; 0x40
 8007184:	eba0 000a 	sub.w	r0, r0, sl
 8007188:	fa03 f000 	lsl.w	r0, r3, r0
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	4303      	orrs	r3, r0
 8007190:	3401      	adds	r4, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007198:	482c      	ldr	r0, [pc, #176]	; (800724c <_vfiprintf_r+0x250>)
 800719a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800719e:	2206      	movs	r2, #6
 80071a0:	f7f9 f82e 	bl	8000200 <memchr>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d03f      	beq.n	8007228 <_vfiprintf_r+0x22c>
 80071a8:	4b29      	ldr	r3, [pc, #164]	; (8007250 <_vfiprintf_r+0x254>)
 80071aa:	bb1b      	cbnz	r3, 80071f4 <_vfiprintf_r+0x1f8>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	3307      	adds	r3, #7
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	3308      	adds	r3, #8
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ba:	443b      	add	r3, r7
 80071bc:	9309      	str	r3, [sp, #36]	; 0x24
 80071be:	e767      	b.n	8007090 <_vfiprintf_r+0x94>
 80071c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c4:	460c      	mov	r4, r1
 80071c6:	2001      	movs	r0, #1
 80071c8:	e7a5      	b.n	8007116 <_vfiprintf_r+0x11a>
 80071ca:	2300      	movs	r3, #0
 80071cc:	3401      	adds	r4, #1
 80071ce:	9305      	str	r3, [sp, #20]
 80071d0:	4619      	mov	r1, r3
 80071d2:	f04f 0c0a 	mov.w	ip, #10
 80071d6:	4620      	mov	r0, r4
 80071d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071dc:	3a30      	subs	r2, #48	; 0x30
 80071de:	2a09      	cmp	r2, #9
 80071e0:	d903      	bls.n	80071ea <_vfiprintf_r+0x1ee>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0c5      	beq.n	8007172 <_vfiprintf_r+0x176>
 80071e6:	9105      	str	r1, [sp, #20]
 80071e8:	e7c3      	b.n	8007172 <_vfiprintf_r+0x176>
 80071ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ee:	4604      	mov	r4, r0
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7f0      	b.n	80071d6 <_vfiprintf_r+0x1da>
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4b16      	ldr	r3, [pc, #88]	; (8007254 <_vfiprintf_r+0x258>)
 80071fc:	a904      	add	r1, sp, #16
 80071fe:	4630      	mov	r0, r6
 8007200:	f3af 8000 	nop.w
 8007204:	4607      	mov	r7, r0
 8007206:	1c78      	adds	r0, r7, #1
 8007208:	d1d6      	bne.n	80071b8 <_vfiprintf_r+0x1bc>
 800720a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800720c:	07d9      	lsls	r1, r3, #31
 800720e:	d405      	bmi.n	800721c <_vfiprintf_r+0x220>
 8007210:	89ab      	ldrh	r3, [r5, #12]
 8007212:	059a      	lsls	r2, r3, #22
 8007214:	d402      	bmi.n	800721c <_vfiprintf_r+0x220>
 8007216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007218:	f7ff fb9b 	bl	8006952 <__retarget_lock_release_recursive>
 800721c:	89ab      	ldrh	r3, [r5, #12]
 800721e:	065b      	lsls	r3, r3, #25
 8007220:	f53f af12 	bmi.w	8007048 <_vfiprintf_r+0x4c>
 8007224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007226:	e711      	b.n	800704c <_vfiprintf_r+0x50>
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	462a      	mov	r2, r5
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <_vfiprintf_r+0x258>)
 8007230:	a904      	add	r1, sp, #16
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f880 	bl	8007338 <_printf_i>
 8007238:	e7e4      	b.n	8007204 <_vfiprintf_r+0x208>
 800723a:	bf00      	nop
 800723c:	08007d50 	.word	0x08007d50
 8007240:	08007d70 	.word	0x08007d70
 8007244:	08007d30 	.word	0x08007d30
 8007248:	08007d94 	.word	0x08007d94
 800724c:	08007d9a 	.word	0x08007d9a
 8007250:	00000000 	.word	0x00000000
 8007254:	08006fd7 	.word	0x08006fd7
 8007258:	08007d90 	.word	0x08007d90

0800725c <_printf_common>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	4616      	mov	r6, r2
 8007262:	4699      	mov	r9, r3
 8007264:	688a      	ldr	r2, [r1, #8]
 8007266:	690b      	ldr	r3, [r1, #16]
 8007268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800726c:	4293      	cmp	r3, r2
 800726e:	bfb8      	it	lt
 8007270:	4613      	movlt	r3, r2
 8007272:	6033      	str	r3, [r6, #0]
 8007274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007278:	4607      	mov	r7, r0
 800727a:	460c      	mov	r4, r1
 800727c:	b10a      	cbz	r2, 8007282 <_printf_common+0x26>
 800727e:	3301      	adds	r3, #1
 8007280:	6033      	str	r3, [r6, #0]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	0699      	lsls	r1, r3, #26
 8007286:	bf42      	ittt	mi
 8007288:	6833      	ldrmi	r3, [r6, #0]
 800728a:	3302      	addmi	r3, #2
 800728c:	6033      	strmi	r3, [r6, #0]
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	f015 0506 	ands.w	r5, r5, #6
 8007294:	d106      	bne.n	80072a4 <_printf_common+0x48>
 8007296:	f104 0a19 	add.w	sl, r4, #25
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	6832      	ldr	r2, [r6, #0]
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dc26      	bgt.n	80072f2 <_printf_common+0x96>
 80072a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a8:	1e13      	subs	r3, r2, #0
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	bf18      	it	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	0692      	lsls	r2, r2, #26
 80072b2:	d42b      	bmi.n	800730c <_printf_common+0xb0>
 80072b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b8:	4649      	mov	r1, r9
 80072ba:	4638      	mov	r0, r7
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d01e      	beq.n	8007300 <_printf_common+0xa4>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	68e5      	ldr	r5, [r4, #12]
 80072c6:	6832      	ldr	r2, [r6, #0]
 80072c8:	f003 0306 	and.w	r3, r3, #6
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	bf08      	it	eq
 80072d0:	1aad      	subeq	r5, r5, r2
 80072d2:	68a3      	ldr	r3, [r4, #8]
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	bf0c      	ite	eq
 80072d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072dc:	2500      	movne	r5, #0
 80072de:	4293      	cmp	r3, r2
 80072e0:	bfc4      	itt	gt
 80072e2:	1a9b      	subgt	r3, r3, r2
 80072e4:	18ed      	addgt	r5, r5, r3
 80072e6:	2600      	movs	r6, #0
 80072e8:	341a      	adds	r4, #26
 80072ea:	42b5      	cmp	r5, r6
 80072ec:	d11a      	bne.n	8007324 <_printf_common+0xc8>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e008      	b.n	8007304 <_printf_common+0xa8>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4652      	mov	r2, sl
 80072f6:	4649      	mov	r1, r9
 80072f8:	4638      	mov	r0, r7
 80072fa:	47c0      	blx	r8
 80072fc:	3001      	adds	r0, #1
 80072fe:	d103      	bne.n	8007308 <_printf_common+0xac>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	3501      	adds	r5, #1
 800730a:	e7c6      	b.n	800729a <_printf_common+0x3e>
 800730c:	18e1      	adds	r1, r4, r3
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	2030      	movs	r0, #48	; 0x30
 8007312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007316:	4422      	add	r2, r4
 8007318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800731c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007320:	3302      	adds	r3, #2
 8007322:	e7c7      	b.n	80072b4 <_printf_common+0x58>
 8007324:	2301      	movs	r3, #1
 8007326:	4622      	mov	r2, r4
 8007328:	4649      	mov	r1, r9
 800732a:	4638      	mov	r0, r7
 800732c:	47c0      	blx	r8
 800732e:	3001      	adds	r0, #1
 8007330:	d0e6      	beq.n	8007300 <_printf_common+0xa4>
 8007332:	3601      	adds	r6, #1
 8007334:	e7d9      	b.n	80072ea <_printf_common+0x8e>
	...

08007338 <_printf_i>:
 8007338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	7e0f      	ldrb	r7, [r1, #24]
 800733e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007340:	2f78      	cmp	r7, #120	; 0x78
 8007342:	4691      	mov	r9, r2
 8007344:	4680      	mov	r8, r0
 8007346:	460c      	mov	r4, r1
 8007348:	469a      	mov	sl, r3
 800734a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800734e:	d807      	bhi.n	8007360 <_printf_i+0x28>
 8007350:	2f62      	cmp	r7, #98	; 0x62
 8007352:	d80a      	bhi.n	800736a <_printf_i+0x32>
 8007354:	2f00      	cmp	r7, #0
 8007356:	f000 80d8 	beq.w	800750a <_printf_i+0x1d2>
 800735a:	2f58      	cmp	r7, #88	; 0x58
 800735c:	f000 80a3 	beq.w	80074a6 <_printf_i+0x16e>
 8007360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007368:	e03a      	b.n	80073e0 <_printf_i+0xa8>
 800736a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800736e:	2b15      	cmp	r3, #21
 8007370:	d8f6      	bhi.n	8007360 <_printf_i+0x28>
 8007372:	a101      	add	r1, pc, #4	; (adr r1, 8007378 <_printf_i+0x40>)
 8007374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073e5 	.word	0x080073e5
 8007380:	08007361 	.word	0x08007361
 8007384:	08007361 	.word	0x08007361
 8007388:	08007361 	.word	0x08007361
 800738c:	08007361 	.word	0x08007361
 8007390:	080073e5 	.word	0x080073e5
 8007394:	08007361 	.word	0x08007361
 8007398:	08007361 	.word	0x08007361
 800739c:	08007361 	.word	0x08007361
 80073a0:	08007361 	.word	0x08007361
 80073a4:	080074f1 	.word	0x080074f1
 80073a8:	08007415 	.word	0x08007415
 80073ac:	080074d3 	.word	0x080074d3
 80073b0:	08007361 	.word	0x08007361
 80073b4:	08007361 	.word	0x08007361
 80073b8:	08007513 	.word	0x08007513
 80073bc:	08007361 	.word	0x08007361
 80073c0:	08007415 	.word	0x08007415
 80073c4:	08007361 	.word	0x08007361
 80073c8:	08007361 	.word	0x08007361
 80073cc:	080074db 	.word	0x080074db
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	602a      	str	r2, [r5, #0]
 80073d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0a3      	b.n	800752c <_printf_i+0x1f4>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	6829      	ldr	r1, [r5, #0]
 80073e8:	0606      	lsls	r6, r0, #24
 80073ea:	f101 0304 	add.w	r3, r1, #4
 80073ee:	d50a      	bpl.n	8007406 <_printf_i+0xce>
 80073f0:	680e      	ldr	r6, [r1, #0]
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	da03      	bge.n	8007400 <_printf_i+0xc8>
 80073f8:	232d      	movs	r3, #45	; 0x2d
 80073fa:	4276      	negs	r6, r6
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007400:	485e      	ldr	r0, [pc, #376]	; (800757c <_printf_i+0x244>)
 8007402:	230a      	movs	r3, #10
 8007404:	e019      	b.n	800743a <_printf_i+0x102>
 8007406:	680e      	ldr	r6, [r1, #0]
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800740e:	bf18      	it	ne
 8007410:	b236      	sxthne	r6, r6
 8007412:	e7ef      	b.n	80073f4 <_printf_i+0xbc>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	1d19      	adds	r1, r3, #4
 800741a:	6029      	str	r1, [r5, #0]
 800741c:	0601      	lsls	r1, r0, #24
 800741e:	d501      	bpl.n	8007424 <_printf_i+0xec>
 8007420:	681e      	ldr	r6, [r3, #0]
 8007422:	e002      	b.n	800742a <_printf_i+0xf2>
 8007424:	0646      	lsls	r6, r0, #25
 8007426:	d5fb      	bpl.n	8007420 <_printf_i+0xe8>
 8007428:	881e      	ldrh	r6, [r3, #0]
 800742a:	4854      	ldr	r0, [pc, #336]	; (800757c <_printf_i+0x244>)
 800742c:	2f6f      	cmp	r7, #111	; 0x6f
 800742e:	bf0c      	ite	eq
 8007430:	2308      	moveq	r3, #8
 8007432:	230a      	movne	r3, #10
 8007434:	2100      	movs	r1, #0
 8007436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800743a:	6865      	ldr	r5, [r4, #4]
 800743c:	60a5      	str	r5, [r4, #8]
 800743e:	2d00      	cmp	r5, #0
 8007440:	bfa2      	ittt	ge
 8007442:	6821      	ldrge	r1, [r4, #0]
 8007444:	f021 0104 	bicge.w	r1, r1, #4
 8007448:	6021      	strge	r1, [r4, #0]
 800744a:	b90e      	cbnz	r6, 8007450 <_printf_i+0x118>
 800744c:	2d00      	cmp	r5, #0
 800744e:	d04d      	beq.n	80074ec <_printf_i+0x1b4>
 8007450:	4615      	mov	r5, r2
 8007452:	fbb6 f1f3 	udiv	r1, r6, r3
 8007456:	fb03 6711 	mls	r7, r3, r1, r6
 800745a:	5dc7      	ldrb	r7, [r0, r7]
 800745c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007460:	4637      	mov	r7, r6
 8007462:	42bb      	cmp	r3, r7
 8007464:	460e      	mov	r6, r1
 8007466:	d9f4      	bls.n	8007452 <_printf_i+0x11a>
 8007468:	2b08      	cmp	r3, #8
 800746a:	d10b      	bne.n	8007484 <_printf_i+0x14c>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	07de      	lsls	r6, r3, #31
 8007470:	d508      	bpl.n	8007484 <_printf_i+0x14c>
 8007472:	6923      	ldr	r3, [r4, #16]
 8007474:	6861      	ldr	r1, [r4, #4]
 8007476:	4299      	cmp	r1, r3
 8007478:	bfde      	ittt	le
 800747a:	2330      	movle	r3, #48	; 0x30
 800747c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007480:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007484:	1b52      	subs	r2, r2, r5
 8007486:	6122      	str	r2, [r4, #16]
 8007488:	f8cd a000 	str.w	sl, [sp]
 800748c:	464b      	mov	r3, r9
 800748e:	aa03      	add	r2, sp, #12
 8007490:	4621      	mov	r1, r4
 8007492:	4640      	mov	r0, r8
 8007494:	f7ff fee2 	bl	800725c <_printf_common>
 8007498:	3001      	adds	r0, #1
 800749a:	d14c      	bne.n	8007536 <_printf_i+0x1fe>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	b004      	add	sp, #16
 80074a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a6:	4835      	ldr	r0, [pc, #212]	; (800757c <_printf_i+0x244>)
 80074a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074ac:	6829      	ldr	r1, [r5, #0]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074b4:	6029      	str	r1, [r5, #0]
 80074b6:	061d      	lsls	r5, r3, #24
 80074b8:	d514      	bpl.n	80074e4 <_printf_i+0x1ac>
 80074ba:	07df      	lsls	r7, r3, #31
 80074bc:	bf44      	itt	mi
 80074be:	f043 0320 	orrmi.w	r3, r3, #32
 80074c2:	6023      	strmi	r3, [r4, #0]
 80074c4:	b91e      	cbnz	r6, 80074ce <_printf_i+0x196>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f023 0320 	bic.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2310      	movs	r3, #16
 80074d0:	e7b0      	b.n	8007434 <_printf_i+0xfc>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f043 0320 	orr.w	r3, r3, #32
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	2378      	movs	r3, #120	; 0x78
 80074dc:	4828      	ldr	r0, [pc, #160]	; (8007580 <_printf_i+0x248>)
 80074de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074e2:	e7e3      	b.n	80074ac <_printf_i+0x174>
 80074e4:	0659      	lsls	r1, r3, #25
 80074e6:	bf48      	it	mi
 80074e8:	b2b6      	uxthmi	r6, r6
 80074ea:	e7e6      	b.n	80074ba <_printf_i+0x182>
 80074ec:	4615      	mov	r5, r2
 80074ee:	e7bb      	b.n	8007468 <_printf_i+0x130>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	6826      	ldr	r6, [r4, #0]
 80074f4:	6961      	ldr	r1, [r4, #20]
 80074f6:	1d18      	adds	r0, r3, #4
 80074f8:	6028      	str	r0, [r5, #0]
 80074fa:	0635      	lsls	r5, r6, #24
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0x1cc>
 8007500:	6019      	str	r1, [r3, #0]
 8007502:	e002      	b.n	800750a <_printf_i+0x1d2>
 8007504:	0670      	lsls	r0, r6, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0x1c8>
 8007508:	8019      	strh	r1, [r3, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	4615      	mov	r5, r2
 8007510:	e7ba      	b.n	8007488 <_printf_i+0x150>
 8007512:	682b      	ldr	r3, [r5, #0]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	602a      	str	r2, [r5, #0]
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	2100      	movs	r1, #0
 800751e:	4628      	mov	r0, r5
 8007520:	f7f8 fe6e 	bl	8000200 <memchr>
 8007524:	b108      	cbz	r0, 800752a <_printf_i+0x1f2>
 8007526:	1b40      	subs	r0, r0, r5
 8007528:	6060      	str	r0, [r4, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	2300      	movs	r3, #0
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007534:	e7a8      	b.n	8007488 <_printf_i+0x150>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	462a      	mov	r2, r5
 800753a:	4649      	mov	r1, r9
 800753c:	4640      	mov	r0, r8
 800753e:	47d0      	blx	sl
 8007540:	3001      	adds	r0, #1
 8007542:	d0ab      	beq.n	800749c <_printf_i+0x164>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	079b      	lsls	r3, r3, #30
 8007548:	d413      	bmi.n	8007572 <_printf_i+0x23a>
 800754a:	68e0      	ldr	r0, [r4, #12]
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	4298      	cmp	r0, r3
 8007550:	bfb8      	it	lt
 8007552:	4618      	movlt	r0, r3
 8007554:	e7a4      	b.n	80074a0 <_printf_i+0x168>
 8007556:	2301      	movs	r3, #1
 8007558:	4632      	mov	r2, r6
 800755a:	4649      	mov	r1, r9
 800755c:	4640      	mov	r0, r8
 800755e:	47d0      	blx	sl
 8007560:	3001      	adds	r0, #1
 8007562:	d09b      	beq.n	800749c <_printf_i+0x164>
 8007564:	3501      	adds	r5, #1
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	9903      	ldr	r1, [sp, #12]
 800756a:	1a5b      	subs	r3, r3, r1
 800756c:	42ab      	cmp	r3, r5
 800756e:	dcf2      	bgt.n	8007556 <_printf_i+0x21e>
 8007570:	e7eb      	b.n	800754a <_printf_i+0x212>
 8007572:	2500      	movs	r5, #0
 8007574:	f104 0619 	add.w	r6, r4, #25
 8007578:	e7f5      	b.n	8007566 <_printf_i+0x22e>
 800757a:	bf00      	nop
 800757c:	08007da1 	.word	0x08007da1
 8007580:	08007db2 	.word	0x08007db2

08007584 <_scanf_chars>:
 8007584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007588:	4615      	mov	r5, r2
 800758a:	688a      	ldr	r2, [r1, #8]
 800758c:	4680      	mov	r8, r0
 800758e:	460c      	mov	r4, r1
 8007590:	b932      	cbnz	r2, 80075a0 <_scanf_chars+0x1c>
 8007592:	698a      	ldr	r2, [r1, #24]
 8007594:	2a00      	cmp	r2, #0
 8007596:	bf0c      	ite	eq
 8007598:	2201      	moveq	r2, #1
 800759a:	f04f 32ff 	movne.w	r2, #4294967295
 800759e:	608a      	str	r2, [r1, #8]
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007634 <_scanf_chars+0xb0>
 80075a6:	06d1      	lsls	r1, r2, #27
 80075a8:	bf5f      	itttt	pl
 80075aa:	681a      	ldrpl	r2, [r3, #0]
 80075ac:	1d11      	addpl	r1, r2, #4
 80075ae:	6019      	strpl	r1, [r3, #0]
 80075b0:	6816      	ldrpl	r6, [r2, #0]
 80075b2:	2700      	movs	r7, #0
 80075b4:	69a0      	ldr	r0, [r4, #24]
 80075b6:	b188      	cbz	r0, 80075dc <_scanf_chars+0x58>
 80075b8:	2801      	cmp	r0, #1
 80075ba:	d107      	bne.n	80075cc <_scanf_chars+0x48>
 80075bc:	682a      	ldr	r2, [r5, #0]
 80075be:	7811      	ldrb	r1, [r2, #0]
 80075c0:	6962      	ldr	r2, [r4, #20]
 80075c2:	5c52      	ldrb	r2, [r2, r1]
 80075c4:	b952      	cbnz	r2, 80075dc <_scanf_chars+0x58>
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	d031      	beq.n	800762e <_scanf_chars+0xaa>
 80075ca:	e022      	b.n	8007612 <_scanf_chars+0x8e>
 80075cc:	2802      	cmp	r0, #2
 80075ce:	d120      	bne.n	8007612 <_scanf_chars+0x8e>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80075d8:	071b      	lsls	r3, r3, #28
 80075da:	d41a      	bmi.n	8007612 <_scanf_chars+0x8e>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	06da      	lsls	r2, r3, #27
 80075e0:	bf5e      	ittt	pl
 80075e2:	682b      	ldrpl	r3, [r5, #0]
 80075e4:	781b      	ldrbpl	r3, [r3, #0]
 80075e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80075ea:	682a      	ldr	r2, [r5, #0]
 80075ec:	686b      	ldr	r3, [r5, #4]
 80075ee:	3201      	adds	r2, #1
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	68a2      	ldr	r2, [r4, #8]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	3a01      	subs	r2, #1
 80075f8:	606b      	str	r3, [r5, #4]
 80075fa:	3701      	adds	r7, #1
 80075fc:	60a2      	str	r2, [r4, #8]
 80075fe:	b142      	cbz	r2, 8007612 <_scanf_chars+0x8e>
 8007600:	2b00      	cmp	r3, #0
 8007602:	dcd7      	bgt.n	80075b4 <_scanf_chars+0x30>
 8007604:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007608:	4629      	mov	r1, r5
 800760a:	4640      	mov	r0, r8
 800760c:	4798      	blx	r3
 800760e:	2800      	cmp	r0, #0
 8007610:	d0d0      	beq.n	80075b4 <_scanf_chars+0x30>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	f013 0310 	ands.w	r3, r3, #16
 8007618:	d105      	bne.n	8007626 <_scanf_chars+0xa2>
 800761a:	68e2      	ldr	r2, [r4, #12]
 800761c:	3201      	adds	r2, #1
 800761e:	60e2      	str	r2, [r4, #12]
 8007620:	69a2      	ldr	r2, [r4, #24]
 8007622:	b102      	cbz	r2, 8007626 <_scanf_chars+0xa2>
 8007624:	7033      	strb	r3, [r6, #0]
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	443b      	add	r3, r7
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	2000      	movs	r0, #0
 800762e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007632:	bf00      	nop
 8007634:	08007ddf 	.word	0x08007ddf

08007638 <_scanf_i>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	4698      	mov	r8, r3
 800763e:	4b76      	ldr	r3, [pc, #472]	; (8007818 <_scanf_i+0x1e0>)
 8007640:	460c      	mov	r4, r1
 8007642:	4682      	mov	sl, r0
 8007644:	4616      	mov	r6, r2
 8007646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800764a:	b087      	sub	sp, #28
 800764c:	ab03      	add	r3, sp, #12
 800764e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007652:	4b72      	ldr	r3, [pc, #456]	; (800781c <_scanf_i+0x1e4>)
 8007654:	69a1      	ldr	r1, [r4, #24]
 8007656:	4a72      	ldr	r2, [pc, #456]	; (8007820 <_scanf_i+0x1e8>)
 8007658:	2903      	cmp	r1, #3
 800765a:	bf18      	it	ne
 800765c:	461a      	movne	r2, r3
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	9201      	str	r2, [sp, #4]
 8007662:	1e5a      	subs	r2, r3, #1
 8007664:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007668:	bf88      	it	hi
 800766a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800766e:	4627      	mov	r7, r4
 8007670:	bf82      	ittt	hi
 8007672:	eb03 0905 	addhi.w	r9, r3, r5
 8007676:	f240 135d 	movwhi	r3, #349	; 0x15d
 800767a:	60a3      	strhi	r3, [r4, #8]
 800767c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007680:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007684:	bf98      	it	ls
 8007686:	f04f 0900 	movls.w	r9, #0
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	463d      	mov	r5, r7
 800768e:	f04f 0b00 	mov.w	fp, #0
 8007692:	6831      	ldr	r1, [r6, #0]
 8007694:	ab03      	add	r3, sp, #12
 8007696:	7809      	ldrb	r1, [r1, #0]
 8007698:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800769c:	2202      	movs	r2, #2
 800769e:	f7f8 fdaf 	bl	8000200 <memchr>
 80076a2:	b328      	cbz	r0, 80076f0 <_scanf_i+0xb8>
 80076a4:	f1bb 0f01 	cmp.w	fp, #1
 80076a8:	d159      	bne.n	800775e <_scanf_i+0x126>
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	b92a      	cbnz	r2, 80076ba <_scanf_i+0x82>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	2308      	movs	r3, #8
 80076b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b6:	6063      	str	r3, [r4, #4]
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	6822      	ldr	r2, [r4, #0]
 80076bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	68a2      	ldr	r2, [r4, #8]
 80076c4:	1e51      	subs	r1, r2, #1
 80076c6:	60a1      	str	r1, [r4, #8]
 80076c8:	b192      	cbz	r2, 80076f0 <_scanf_i+0xb8>
 80076ca:	6832      	ldr	r2, [r6, #0]
 80076cc:	1c51      	adds	r1, r2, #1
 80076ce:	6031      	str	r1, [r6, #0]
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	f805 2b01 	strb.w	r2, [r5], #1
 80076d6:	6872      	ldr	r2, [r6, #4]
 80076d8:	3a01      	subs	r2, #1
 80076da:	2a00      	cmp	r2, #0
 80076dc:	6072      	str	r2, [r6, #4]
 80076de:	dc07      	bgt.n	80076f0 <_scanf_i+0xb8>
 80076e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80076e4:	4631      	mov	r1, r6
 80076e6:	4650      	mov	r0, sl
 80076e8:	4790      	blx	r2
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f040 8085 	bne.w	80077fa <_scanf_i+0x1c2>
 80076f0:	f10b 0b01 	add.w	fp, fp, #1
 80076f4:	f1bb 0f03 	cmp.w	fp, #3
 80076f8:	d1cb      	bne.n	8007692 <_scanf_i+0x5a>
 80076fa:	6863      	ldr	r3, [r4, #4]
 80076fc:	b90b      	cbnz	r3, 8007702 <_scanf_i+0xca>
 80076fe:	230a      	movs	r3, #10
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	6863      	ldr	r3, [r4, #4]
 8007704:	4947      	ldr	r1, [pc, #284]	; (8007824 <_scanf_i+0x1ec>)
 8007706:	6960      	ldr	r0, [r4, #20]
 8007708:	1ac9      	subs	r1, r1, r3
 800770a:	f000 f8af 	bl	800786c <__sccl>
 800770e:	f04f 0b00 	mov.w	fp, #0
 8007712:	68a3      	ldr	r3, [r4, #8]
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d03d      	beq.n	8007796 <_scanf_i+0x15e>
 800771a:	6831      	ldr	r1, [r6, #0]
 800771c:	6960      	ldr	r0, [r4, #20]
 800771e:	f891 c000 	ldrb.w	ip, [r1]
 8007722:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007726:	2800      	cmp	r0, #0
 8007728:	d035      	beq.n	8007796 <_scanf_i+0x15e>
 800772a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800772e:	d124      	bne.n	800777a <_scanf_i+0x142>
 8007730:	0510      	lsls	r0, r2, #20
 8007732:	d522      	bpl.n	800777a <_scanf_i+0x142>
 8007734:	f10b 0b01 	add.w	fp, fp, #1
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	d003      	beq.n	8007746 <_scanf_i+0x10e>
 800773e:	3301      	adds	r3, #1
 8007740:	f109 39ff 	add.w	r9, r9, #4294967295
 8007744:	60a3      	str	r3, [r4, #8]
 8007746:	6873      	ldr	r3, [r6, #4]
 8007748:	3b01      	subs	r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	6073      	str	r3, [r6, #4]
 800774e:	dd1b      	ble.n	8007788 <_scanf_i+0x150>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	3b01      	subs	r3, #1
 800775a:	60a3      	str	r3, [r4, #8]
 800775c:	e7d9      	b.n	8007712 <_scanf_i+0xda>
 800775e:	f1bb 0f02 	cmp.w	fp, #2
 8007762:	d1ae      	bne.n	80076c2 <_scanf_i+0x8a>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800776a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800776e:	d1bf      	bne.n	80076f0 <_scanf_i+0xb8>
 8007770:	2310      	movs	r3, #16
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007778:	e7a2      	b.n	80076c0 <_scanf_i+0x88>
 800777a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800777e:	6022      	str	r2, [r4, #0]
 8007780:	780b      	ldrb	r3, [r1, #0]
 8007782:	f805 3b01 	strb.w	r3, [r5], #1
 8007786:	e7de      	b.n	8007746 <_scanf_i+0x10e>
 8007788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800778c:	4631      	mov	r1, r6
 800778e:	4650      	mov	r0, sl
 8007790:	4798      	blx	r3
 8007792:	2800      	cmp	r0, #0
 8007794:	d0df      	beq.n	8007756 <_scanf_i+0x11e>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	05db      	lsls	r3, r3, #23
 800779a:	d50d      	bpl.n	80077b8 <_scanf_i+0x180>
 800779c:	42bd      	cmp	r5, r7
 800779e:	d909      	bls.n	80077b4 <_scanf_i+0x17c>
 80077a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077a8:	4632      	mov	r2, r6
 80077aa:	4650      	mov	r0, sl
 80077ac:	4798      	blx	r3
 80077ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80077b2:	464d      	mov	r5, r9
 80077b4:	42bd      	cmp	r5, r7
 80077b6:	d02d      	beq.n	8007814 <_scanf_i+0x1dc>
 80077b8:	6822      	ldr	r2, [r4, #0]
 80077ba:	f012 0210 	ands.w	r2, r2, #16
 80077be:	d113      	bne.n	80077e8 <_scanf_i+0x1b0>
 80077c0:	702a      	strb	r2, [r5, #0]
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	9e01      	ldr	r6, [sp, #4]
 80077c6:	4639      	mov	r1, r7
 80077c8:	4650      	mov	r0, sl
 80077ca:	47b0      	blx	r6
 80077cc:	6821      	ldr	r1, [r4, #0]
 80077ce:	f8d8 3000 	ldr.w	r3, [r8]
 80077d2:	f011 0f20 	tst.w	r1, #32
 80077d6:	d013      	beq.n	8007800 <_scanf_i+0x1c8>
 80077d8:	1d1a      	adds	r2, r3, #4
 80077da:	f8c8 2000 	str.w	r2, [r8]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	68e3      	ldr	r3, [r4, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60e3      	str	r3, [r4, #12]
 80077e8:	1bed      	subs	r5, r5, r7
 80077ea:	44ab      	add	fp, r5
 80077ec:	6925      	ldr	r5, [r4, #16]
 80077ee:	445d      	add	r5, fp
 80077f0:	6125      	str	r5, [r4, #16]
 80077f2:	2000      	movs	r0, #0
 80077f4:	b007      	add	sp, #28
 80077f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fa:	f04f 0b00 	mov.w	fp, #0
 80077fe:	e7ca      	b.n	8007796 <_scanf_i+0x15e>
 8007800:	1d1a      	adds	r2, r3, #4
 8007802:	f8c8 2000 	str.w	r2, [r8]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f011 0f01 	tst.w	r1, #1
 800780c:	bf14      	ite	ne
 800780e:	8018      	strhne	r0, [r3, #0]
 8007810:	6018      	streq	r0, [r3, #0]
 8007812:	e7e6      	b.n	80077e2 <_scanf_i+0x1aa>
 8007814:	2001      	movs	r0, #1
 8007816:	e7ed      	b.n	80077f4 <_scanf_i+0x1bc>
 8007818:	08007cd8 	.word	0x08007cd8
 800781c:	08007ac9 	.word	0x08007ac9
 8007820:	080079e1 	.word	0x080079e1
 8007824:	08007ddc 	.word	0x08007ddc

08007828 <_read_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d07      	ldr	r5, [pc, #28]	; (8007848 <_read_r+0x20>)
 800782c:	4604      	mov	r4, r0
 800782e:	4608      	mov	r0, r1
 8007830:	4611      	mov	r1, r2
 8007832:	2200      	movs	r2, #0
 8007834:	602a      	str	r2, [r5, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	f7f9 fe7e 	bl	8001538 <_read>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_read_r+0x1e>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_read_r+0x1e>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	200006e0 	.word	0x200006e0

0800784c <_sbrk_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4d06      	ldr	r5, [pc, #24]	; (8007868 <_sbrk_r+0x1c>)
 8007850:	2300      	movs	r3, #0
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	f7f9 fec0 	bl	80015dc <_sbrk>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_sbrk_r+0x1a>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_sbrk_r+0x1a>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	200006e0 	.word	0x200006e0

0800786c <__sccl>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	780b      	ldrb	r3, [r1, #0]
 8007870:	4604      	mov	r4, r0
 8007872:	2b5e      	cmp	r3, #94	; 0x5e
 8007874:	bf0b      	itete	eq
 8007876:	784b      	ldrbeq	r3, [r1, #1]
 8007878:	1c48      	addne	r0, r1, #1
 800787a:	1c88      	addeq	r0, r1, #2
 800787c:	2200      	movne	r2, #0
 800787e:	bf08      	it	eq
 8007880:	2201      	moveq	r2, #1
 8007882:	1e61      	subs	r1, r4, #1
 8007884:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007888:	f801 2f01 	strb.w	r2, [r1, #1]!
 800788c:	42a9      	cmp	r1, r5
 800788e:	d1fb      	bne.n	8007888 <__sccl+0x1c>
 8007890:	b90b      	cbnz	r3, 8007896 <__sccl+0x2a>
 8007892:	3801      	subs	r0, #1
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	f082 0201 	eor.w	r2, r2, #1
 800789a:	54e2      	strb	r2, [r4, r3]
 800789c:	4605      	mov	r5, r0
 800789e:	4628      	mov	r0, r5
 80078a0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80078a4:	292d      	cmp	r1, #45	; 0x2d
 80078a6:	d006      	beq.n	80078b6 <__sccl+0x4a>
 80078a8:	295d      	cmp	r1, #93	; 0x5d
 80078aa:	d0f3      	beq.n	8007894 <__sccl+0x28>
 80078ac:	b909      	cbnz	r1, 80078b2 <__sccl+0x46>
 80078ae:	4628      	mov	r0, r5
 80078b0:	e7f0      	b.n	8007894 <__sccl+0x28>
 80078b2:	460b      	mov	r3, r1
 80078b4:	e7f1      	b.n	800789a <__sccl+0x2e>
 80078b6:	786e      	ldrb	r6, [r5, #1]
 80078b8:	2e5d      	cmp	r6, #93	; 0x5d
 80078ba:	d0fa      	beq.n	80078b2 <__sccl+0x46>
 80078bc:	42b3      	cmp	r3, r6
 80078be:	dcf8      	bgt.n	80078b2 <__sccl+0x46>
 80078c0:	3502      	adds	r5, #2
 80078c2:	4619      	mov	r1, r3
 80078c4:	3101      	adds	r1, #1
 80078c6:	428e      	cmp	r6, r1
 80078c8:	5462      	strb	r2, [r4, r1]
 80078ca:	dcfb      	bgt.n	80078c4 <__sccl+0x58>
 80078cc:	1af1      	subs	r1, r6, r3
 80078ce:	3901      	subs	r1, #1
 80078d0:	1c58      	adds	r0, r3, #1
 80078d2:	42b3      	cmp	r3, r6
 80078d4:	bfa8      	it	ge
 80078d6:	2100      	movge	r1, #0
 80078d8:	1843      	adds	r3, r0, r1
 80078da:	e7e0      	b.n	800789e <__sccl+0x32>

080078dc <_strtol_l.constprop.0>:
 80078dc:	2b01      	cmp	r3, #1
 80078de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e2:	d001      	beq.n	80078e8 <_strtol_l.constprop.0+0xc>
 80078e4:	2b24      	cmp	r3, #36	; 0x24
 80078e6:	d906      	bls.n	80078f6 <_strtol_l.constprop.0+0x1a>
 80078e8:	f7fe fc66 	bl	80061b8 <__errno>
 80078ec:	2316      	movs	r3, #22
 80078ee:	6003      	str	r3, [r0, #0]
 80078f0:	2000      	movs	r0, #0
 80078f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079dc <_strtol_l.constprop.0+0x100>
 80078fa:	460d      	mov	r5, r1
 80078fc:	462e      	mov	r6, r5
 80078fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007902:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007906:	f017 0708 	ands.w	r7, r7, #8
 800790a:	d1f7      	bne.n	80078fc <_strtol_l.constprop.0+0x20>
 800790c:	2c2d      	cmp	r4, #45	; 0x2d
 800790e:	d132      	bne.n	8007976 <_strtol_l.constprop.0+0x9a>
 8007910:	782c      	ldrb	r4, [r5, #0]
 8007912:	2701      	movs	r7, #1
 8007914:	1cb5      	adds	r5, r6, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d05b      	beq.n	80079d2 <_strtol_l.constprop.0+0xf6>
 800791a:	2b10      	cmp	r3, #16
 800791c:	d109      	bne.n	8007932 <_strtol_l.constprop.0+0x56>
 800791e:	2c30      	cmp	r4, #48	; 0x30
 8007920:	d107      	bne.n	8007932 <_strtol_l.constprop.0+0x56>
 8007922:	782c      	ldrb	r4, [r5, #0]
 8007924:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007928:	2c58      	cmp	r4, #88	; 0x58
 800792a:	d14d      	bne.n	80079c8 <_strtol_l.constprop.0+0xec>
 800792c:	786c      	ldrb	r4, [r5, #1]
 800792e:	2310      	movs	r3, #16
 8007930:	3502      	adds	r5, #2
 8007932:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007936:	f108 38ff 	add.w	r8, r8, #4294967295
 800793a:	f04f 0c00 	mov.w	ip, #0
 800793e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007942:	4666      	mov	r6, ip
 8007944:	fb03 8a19 	mls	sl, r3, r9, r8
 8007948:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800794c:	f1be 0f09 	cmp.w	lr, #9
 8007950:	d816      	bhi.n	8007980 <_strtol_l.constprop.0+0xa4>
 8007952:	4674      	mov	r4, lr
 8007954:	42a3      	cmp	r3, r4
 8007956:	dd24      	ble.n	80079a2 <_strtol_l.constprop.0+0xc6>
 8007958:	f1bc 0f00 	cmp.w	ip, #0
 800795c:	db1e      	blt.n	800799c <_strtol_l.constprop.0+0xc0>
 800795e:	45b1      	cmp	r9, r6
 8007960:	d31c      	bcc.n	800799c <_strtol_l.constprop.0+0xc0>
 8007962:	d101      	bne.n	8007968 <_strtol_l.constprop.0+0x8c>
 8007964:	45a2      	cmp	sl, r4
 8007966:	db19      	blt.n	800799c <_strtol_l.constprop.0+0xc0>
 8007968:	fb06 4603 	mla	r6, r6, r3, r4
 800796c:	f04f 0c01 	mov.w	ip, #1
 8007970:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007974:	e7e8      	b.n	8007948 <_strtol_l.constprop.0+0x6c>
 8007976:	2c2b      	cmp	r4, #43	; 0x2b
 8007978:	bf04      	itt	eq
 800797a:	782c      	ldrbeq	r4, [r5, #0]
 800797c:	1cb5      	addeq	r5, r6, #2
 800797e:	e7ca      	b.n	8007916 <_strtol_l.constprop.0+0x3a>
 8007980:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007984:	f1be 0f19 	cmp.w	lr, #25
 8007988:	d801      	bhi.n	800798e <_strtol_l.constprop.0+0xb2>
 800798a:	3c37      	subs	r4, #55	; 0x37
 800798c:	e7e2      	b.n	8007954 <_strtol_l.constprop.0+0x78>
 800798e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007992:	f1be 0f19 	cmp.w	lr, #25
 8007996:	d804      	bhi.n	80079a2 <_strtol_l.constprop.0+0xc6>
 8007998:	3c57      	subs	r4, #87	; 0x57
 800799a:	e7db      	b.n	8007954 <_strtol_l.constprop.0+0x78>
 800799c:	f04f 3cff 	mov.w	ip, #4294967295
 80079a0:	e7e6      	b.n	8007970 <_strtol_l.constprop.0+0x94>
 80079a2:	f1bc 0f00 	cmp.w	ip, #0
 80079a6:	da05      	bge.n	80079b4 <_strtol_l.constprop.0+0xd8>
 80079a8:	2322      	movs	r3, #34	; 0x22
 80079aa:	6003      	str	r3, [r0, #0]
 80079ac:	4646      	mov	r6, r8
 80079ae:	b942      	cbnz	r2, 80079c2 <_strtol_l.constprop.0+0xe6>
 80079b0:	4630      	mov	r0, r6
 80079b2:	e79e      	b.n	80078f2 <_strtol_l.constprop.0+0x16>
 80079b4:	b107      	cbz	r7, 80079b8 <_strtol_l.constprop.0+0xdc>
 80079b6:	4276      	negs	r6, r6
 80079b8:	2a00      	cmp	r2, #0
 80079ba:	d0f9      	beq.n	80079b0 <_strtol_l.constprop.0+0xd4>
 80079bc:	f1bc 0f00 	cmp.w	ip, #0
 80079c0:	d000      	beq.n	80079c4 <_strtol_l.constprop.0+0xe8>
 80079c2:	1e69      	subs	r1, r5, #1
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	e7f3      	b.n	80079b0 <_strtol_l.constprop.0+0xd4>
 80079c8:	2430      	movs	r4, #48	; 0x30
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1b1      	bne.n	8007932 <_strtol_l.constprop.0+0x56>
 80079ce:	2308      	movs	r3, #8
 80079d0:	e7af      	b.n	8007932 <_strtol_l.constprop.0+0x56>
 80079d2:	2c30      	cmp	r4, #48	; 0x30
 80079d4:	d0a5      	beq.n	8007922 <_strtol_l.constprop.0+0x46>
 80079d6:	230a      	movs	r3, #10
 80079d8:	e7ab      	b.n	8007932 <_strtol_l.constprop.0+0x56>
 80079da:	bf00      	nop
 80079dc:	08007ddf 	.word	0x08007ddf

080079e0 <_strtol_r>:
 80079e0:	f7ff bf7c 	b.w	80078dc <_strtol_l.constprop.0>

080079e4 <_strtoul_l.constprop.0>:
 80079e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079e8:	4f36      	ldr	r7, [pc, #216]	; (8007ac4 <_strtoul_l.constprop.0+0xe0>)
 80079ea:	4686      	mov	lr, r0
 80079ec:	460d      	mov	r5, r1
 80079ee:	4628      	mov	r0, r5
 80079f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079f4:	5de6      	ldrb	r6, [r4, r7]
 80079f6:	f016 0608 	ands.w	r6, r6, #8
 80079fa:	d1f8      	bne.n	80079ee <_strtoul_l.constprop.0+0xa>
 80079fc:	2c2d      	cmp	r4, #45	; 0x2d
 80079fe:	d12f      	bne.n	8007a60 <_strtoul_l.constprop.0+0x7c>
 8007a00:	782c      	ldrb	r4, [r5, #0]
 8007a02:	2601      	movs	r6, #1
 8007a04:	1c85      	adds	r5, r0, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d057      	beq.n	8007aba <_strtoul_l.constprop.0+0xd6>
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d109      	bne.n	8007a22 <_strtoul_l.constprop.0+0x3e>
 8007a0e:	2c30      	cmp	r4, #48	; 0x30
 8007a10:	d107      	bne.n	8007a22 <_strtoul_l.constprop.0+0x3e>
 8007a12:	7828      	ldrb	r0, [r5, #0]
 8007a14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007a18:	2858      	cmp	r0, #88	; 0x58
 8007a1a:	d149      	bne.n	8007ab0 <_strtoul_l.constprop.0+0xcc>
 8007a1c:	786c      	ldrb	r4, [r5, #1]
 8007a1e:	2310      	movs	r3, #16
 8007a20:	3502      	adds	r5, #2
 8007a22:	f04f 38ff 	mov.w	r8, #4294967295
 8007a26:	2700      	movs	r7, #0
 8007a28:	fbb8 f8f3 	udiv	r8, r8, r3
 8007a2c:	fb03 f908 	mul.w	r9, r3, r8
 8007a30:	ea6f 0909 	mvn.w	r9, r9
 8007a34:	4638      	mov	r0, r7
 8007a36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007a3a:	f1bc 0f09 	cmp.w	ip, #9
 8007a3e:	d814      	bhi.n	8007a6a <_strtoul_l.constprop.0+0x86>
 8007a40:	4664      	mov	r4, ip
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	dd22      	ble.n	8007a8c <_strtoul_l.constprop.0+0xa8>
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	db1d      	blt.n	8007a86 <_strtoul_l.constprop.0+0xa2>
 8007a4a:	4580      	cmp	r8, r0
 8007a4c:	d31b      	bcc.n	8007a86 <_strtoul_l.constprop.0+0xa2>
 8007a4e:	d101      	bne.n	8007a54 <_strtoul_l.constprop.0+0x70>
 8007a50:	45a1      	cmp	r9, r4
 8007a52:	db18      	blt.n	8007a86 <_strtoul_l.constprop.0+0xa2>
 8007a54:	fb00 4003 	mla	r0, r0, r3, r4
 8007a58:	2701      	movs	r7, #1
 8007a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a5e:	e7ea      	b.n	8007a36 <_strtoul_l.constprop.0+0x52>
 8007a60:	2c2b      	cmp	r4, #43	; 0x2b
 8007a62:	bf04      	itt	eq
 8007a64:	782c      	ldrbeq	r4, [r5, #0]
 8007a66:	1c85      	addeq	r5, r0, #2
 8007a68:	e7cd      	b.n	8007a06 <_strtoul_l.constprop.0+0x22>
 8007a6a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a6e:	f1bc 0f19 	cmp.w	ip, #25
 8007a72:	d801      	bhi.n	8007a78 <_strtoul_l.constprop.0+0x94>
 8007a74:	3c37      	subs	r4, #55	; 0x37
 8007a76:	e7e4      	b.n	8007a42 <_strtoul_l.constprop.0+0x5e>
 8007a78:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a7c:	f1bc 0f19 	cmp.w	ip, #25
 8007a80:	d804      	bhi.n	8007a8c <_strtoul_l.constprop.0+0xa8>
 8007a82:	3c57      	subs	r4, #87	; 0x57
 8007a84:	e7dd      	b.n	8007a42 <_strtoul_l.constprop.0+0x5e>
 8007a86:	f04f 37ff 	mov.w	r7, #4294967295
 8007a8a:	e7e6      	b.n	8007a5a <_strtoul_l.constprop.0+0x76>
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	da07      	bge.n	8007aa0 <_strtoul_l.constprop.0+0xbc>
 8007a90:	2322      	movs	r3, #34	; 0x22
 8007a92:	f8ce 3000 	str.w	r3, [lr]
 8007a96:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9a:	b932      	cbnz	r2, 8007aaa <_strtoul_l.constprop.0+0xc6>
 8007a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aa0:	b106      	cbz	r6, 8007aa4 <_strtoul_l.constprop.0+0xc0>
 8007aa2:	4240      	negs	r0, r0
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d0f9      	beq.n	8007a9c <_strtoul_l.constprop.0+0xb8>
 8007aa8:	b107      	cbz	r7, 8007aac <_strtoul_l.constprop.0+0xc8>
 8007aaa:	1e69      	subs	r1, r5, #1
 8007aac:	6011      	str	r1, [r2, #0]
 8007aae:	e7f5      	b.n	8007a9c <_strtoul_l.constprop.0+0xb8>
 8007ab0:	2430      	movs	r4, #48	; 0x30
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1b5      	bne.n	8007a22 <_strtoul_l.constprop.0+0x3e>
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	e7b3      	b.n	8007a22 <_strtoul_l.constprop.0+0x3e>
 8007aba:	2c30      	cmp	r4, #48	; 0x30
 8007abc:	d0a9      	beq.n	8007a12 <_strtoul_l.constprop.0+0x2e>
 8007abe:	230a      	movs	r3, #10
 8007ac0:	e7af      	b.n	8007a22 <_strtoul_l.constprop.0+0x3e>
 8007ac2:	bf00      	nop
 8007ac4:	08007ddf 	.word	0x08007ddf

08007ac8 <_strtoul_r>:
 8007ac8:	f7ff bf8c 	b.w	80079e4 <_strtoul_l.constprop.0>

08007acc <__submore>:
 8007acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	d11d      	bne.n	8007b18 <__submore+0x4c>
 8007adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ae0:	f7ff f81c 	bl	8006b1c <_malloc_r>
 8007ae4:	b918      	cbnz	r0, 8007aee <__submore+0x22>
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af2:	63a3      	str	r3, [r4, #56]	; 0x38
 8007af4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007af8:	6360      	str	r0, [r4, #52]	; 0x34
 8007afa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007afe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007b06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007b0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007b12:	6020      	str	r0, [r4, #0]
 8007b14:	2000      	movs	r0, #0
 8007b16:	e7e8      	b.n	8007aea <__submore+0x1e>
 8007b18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007b1a:	0077      	lsls	r7, r6, #1
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	f000 f84b 	bl	8007bb8 <_realloc_r>
 8007b22:	4605      	mov	r5, r0
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d0de      	beq.n	8007ae6 <__submore+0x1a>
 8007b28:	eb00 0806 	add.w	r8, r0, r6
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4632      	mov	r2, r6
 8007b30:	4640      	mov	r0, r8
 8007b32:	f000 f827 	bl	8007b84 <memcpy>
 8007b36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007b3a:	f8c4 8000 	str.w	r8, [r4]
 8007b3e:	e7e9      	b.n	8007b14 <__submore+0x48>

08007b40 <_fstat_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	; (8007b60 <_fstat_r+0x20>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	f7f9 fd1c 	bl	800158a <_fstat>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d102      	bne.n	8007b5c <_fstat_r+0x1c>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	b103      	cbz	r3, 8007b5c <_fstat_r+0x1c>
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	200006e0 	.word	0x200006e0

08007b64 <_isatty_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d06      	ldr	r5, [pc, #24]	; (8007b80 <_isatty_r+0x1c>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	f7f9 fd1b 	bl	80015aa <_isatty>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_isatty_r+0x1a>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_isatty_r+0x1a>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200006e0 	.word	0x200006e0

08007b84 <memcpy>:
 8007b84:	440a      	add	r2, r1
 8007b86:	4291      	cmp	r1, r2
 8007b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b8c:	d100      	bne.n	8007b90 <memcpy+0xc>
 8007b8e:	4770      	bx	lr
 8007b90:	b510      	push	{r4, lr}
 8007b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	d1f9      	bne.n	8007b92 <memcpy+0xe>
 8007b9e:	bd10      	pop	{r4, pc}

08007ba0 <__malloc_lock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	; (8007ba8 <__malloc_lock+0x8>)
 8007ba2:	f7fe bed5 	b.w	8006950 <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	200006d4 	.word	0x200006d4

08007bac <__malloc_unlock>:
 8007bac:	4801      	ldr	r0, [pc, #4]	; (8007bb4 <__malloc_unlock+0x8>)
 8007bae:	f7fe bed0 	b.w	8006952 <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	200006d4 	.word	0x200006d4

08007bb8 <_realloc_r>:
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4614      	mov	r4, r2
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	b921      	cbnz	r1, 8007bce <_realloc_r+0x16>
 8007bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	4611      	mov	r1, r2
 8007bca:	f7fe bfa7 	b.w	8006b1c <_malloc_r>
 8007bce:	b92a      	cbnz	r2, 8007bdc <_realloc_r+0x24>
 8007bd0:	f7fe ff38 	bl	8006a44 <_free_r>
 8007bd4:	4625      	mov	r5, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	f000 f81b 	bl	8007c16 <_malloc_usable_size_r>
 8007be0:	4284      	cmp	r4, r0
 8007be2:	4607      	mov	r7, r0
 8007be4:	d802      	bhi.n	8007bec <_realloc_r+0x34>
 8007be6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bea:	d812      	bhi.n	8007c12 <_realloc_r+0x5a>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f7fe ff94 	bl	8006b1c <_malloc_r>
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d0ed      	beq.n	8007bd6 <_realloc_r+0x1e>
 8007bfa:	42bc      	cmp	r4, r7
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4631      	mov	r1, r6
 8007c00:	bf28      	it	cs
 8007c02:	463a      	movcs	r2, r7
 8007c04:	f7ff ffbe 	bl	8007b84 <memcpy>
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7fe ff1a 	bl	8006a44 <_free_r>
 8007c10:	e7e1      	b.n	8007bd6 <_realloc_r+0x1e>
 8007c12:	4635      	mov	r5, r6
 8007c14:	e7df      	b.n	8007bd6 <_realloc_r+0x1e>

08007c16 <_malloc_usable_size_r>:
 8007c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1a:	1f18      	subs	r0, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bfbc      	itt	lt
 8007c20:	580b      	ldrlt	r3, [r1, r0]
 8007c22:	18c0      	addlt	r0, r0, r3
 8007c24:	4770      	bx	lr
	...

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
