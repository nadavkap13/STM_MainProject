
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a1c  08009a1c  00020464  2**0
                  CONTENTS
  4 .ARM          00000008  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a24  08009a24  00020464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000464  20000000  08009a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000464  08009e90  00020464  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08009e90  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a834  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fe  00000000  00000000  0003acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4c7  00000000  00000000  00040b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cd6  00000000  00000000  0006c017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109491  00000000  00000000  00085ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f17e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006590  00000000  00000000  0018f1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000464 	.word	0x20000464
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009764 	.word	0x08009764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000468 	.word	0x20000468
 80001cc:	08009764 	.word	0x08009764

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ledInit>:
#include <stdlib.h>
#include "LED.h"
#include "main.h"

extern TIM_HandleTypeDef htim4;
void ledInit(LED* led,GPIO_TypeDef* port, uint16_t pin, uint32_t CHANNEL,TIM_HandleTypeDef* htim){
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4613      	mov	r3, r2
 80005b2:	80fb      	strh	r3, [r7, #6]
	led->state = LED_STATE_OFF;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	led->count = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
	led->GPIOx= port;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	60da      	str	r2, [r3, #12]
	led->GPIO_Pin=pin;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	88fa      	ldrh	r2, [r7, #6]
 80005ca:	821a      	strh	r2, [r3, #16]
	led->maxcount=0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
	led->CHANNEL=CHANNEL;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	615a      	str	r2, [r3, #20]
	led->htim = htim;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	619a      	str	r2, [r3, #24]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <ledOn>:
void ledOn(LED* led){
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	led->state = LED_STATE_ON;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68d8      	ldr	r0, [r3, #12]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	8a1b      	ldrh	r3, [r3, #16]
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f003 f9b0 	bl	8003968 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <ledOff>:
void ledOff(LED* led){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	led->state = LED_STATE_OFF;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	68d8      	ldr	r0, [r3, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8a1b      	ldrh	r3, [r3, #16]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f003 f99d 	bl	8003968 <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <ledBlink>:
void ledBlink(LED* led, int period){
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
	led->state = LED_STATE_BLINK;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
	led->maxcount=period;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	609a      	str	r2, [r3, #8]

}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <ledOnTimerInterrupt>:
void ledOnTimerInterrupt(LED* led){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if(led->state== LED_STATE_BLINK){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d110      	bne.n	800068a <ledOnTimerInterrupt+0x32>
	if (led->count >= led->maxcount){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	429a      	cmp	r2, r3
 8000672:	db0a      	blt.n	800068a <ledOnTimerInterrupt+0x32>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68da      	ldr	r2, [r3, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8a1b      	ldrh	r3, [r3, #16]
 800067c:	4619      	mov	r1, r3
 800067e:	4610      	mov	r0, r2
 8000680:	f003 f98a 	bl	8003998 <HAL_GPIO_TogglePin>
			led->count = 0;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
			}
	}
		led->count++;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	605a      	str	r2, [r3, #4]
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <ledsetbrightness>:
			break;
	}

	return currentstate;
}
void ledsetbrightness(LED* led,int brightness){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]

		brightness= (brightness*10);
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4613      	mov	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	603b      	str	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d105      	bne.n	80006c6 <ledsetbrightness+0x2a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34


}
 80006c4:	e02c      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d105      	bne.n	80006da <ledsetbrightness+0x3e>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80006d8:	e022      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	2b08      	cmp	r3, #8
 80006e0:	d105      	bne.n	80006ee <ledsetbrightness+0x52>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80006ec:	e018      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	2b0c      	cmp	r3, #12
 80006f4:	d105      	bne.n	8000702 <ledsetbrightness+0x66>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000700:	e00e      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	2b10      	cmp	r3, #16
 8000708:	d105      	bne.n	8000716 <ledsetbrightness+0x7a>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000714:	e004      	b.n	8000720 <ledsetbrightness+0x84>
		__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <clockInit>:
#include "main.h"
#include "mymain.h"
#include "clock.h"


void clockInit(CLOCK* clock,TIM_HandleTypeDef *htim){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	clock->htim = htim;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	601a      	str	r2, [r3, #0]
	clock->tick_counter = 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
	//clock->state = CLOCK_STATE_OFF;
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <getClockTick>:
void getClockTick(CLOCK* clock,uint32_t* tick){
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
	*tick = clock->tick_counter;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <getTime>:
void getTime( CLOCK* clock, uint32_t* sec,uint32_t* min, uint32_t* hour){
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
	*sec = (clock->tick_counter/1000);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <getTime+0x80>)
 8000780:	fba2 2303 	umull	r2, r3, r2, r3
 8000784:	099a      	lsrs	r2, r3, #6
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	601a      	str	r2, [r3, #0]
	*min = *sec / 60;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <getTime+0x84>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	095a      	lsrs	r2, r3, #5
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
	*sec = *sec % 60;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <getTime+0x84>)
 80007a0:	fba3 2301 	umull	r2, r3, r3, r1
 80007a4:	095a      	lsrs	r2, r3, #5
 80007a6:	4613      	mov	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	1aca      	subs	r2, r1, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	601a      	str	r2, [r3, #0]
	*hour = *min / 60;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <getTime+0x84>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	095a      	lsrs	r2, r3, #5
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	601a      	str	r2, [r3, #0]
	*min = *min % 60;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6819      	ldr	r1, [r3, #0]
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <getTime+0x84>)
 80007ca:	fba3 2301 	umull	r2, r3, r3, r1
 80007ce:	095a      	lsrs	r2, r3, #5
 80007d0:	4613      	mov	r3, r2
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	1a9b      	subs	r3, r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	1aca      	subs	r2, r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	10624dd3 	.word	0x10624dd3
 80007f0:	88888889 	.word	0x88888889

080007f4 <clockInInterrupt>:
void clockInInterrupt(CLOCK* clock){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
		clock->tick_counter++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	605a      	str	r2, [r3, #4]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <lightsenseInit>:
#include <stdint.h>
#include <stdlib.h>
#include "lightsens.h"
#include "main.h"

void lightsenseInit(LIGHTSENS* sensor, ADC_TypeDef* ADC,uint32_t maxvalue){
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	sensor->ADC = ADC;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	601a      	str	r2, [r3, #0]
	sensor->maxvalue = maxvalue;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	609a      	str	r2, [r3, #8]
	sensor->minvalue = 0;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <getValue>:

int getValue(LIGHTSENS* sensor){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	return ((sensor->maxvalue * sensor->value)+(4095/2)) / 4095;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	6852      	ldr	r2, [r2, #4]
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	f203 72ff 	addw	r2, r3, #2047	; 0x7ff
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <getValue+0x34>)
 8000856:	fba3 1302 	umull	r1, r3, r3, r2
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	0852      	lsrs	r2, r2, #1
 800085e:	4413      	add	r3, r2
 8000860:	0adb      	lsrs	r3, r3, #11
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	00100101 	.word	0x00100101

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f001 f888 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f811 	bl	80008a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 fa18 	bl	8000cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000884:	f000 f9e6 	bl	8000c54 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000888:	f000 f8d4 	bl	8000a34 <MX_TIM3_Init>
  MX_TIM6_Init();
 800088c:	f000 f9ac 	bl	8000be8 <MX_TIM6_Init>
  MX_TIM4_Init();
 8000890:	f000 f92a 	bl	8000ae8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000894:	f000 f856 	bl	8000944 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   maininit();
 8000898:	f000 fd2e 	bl	80012f8 <maininit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 	 mainloop();
 800089c:	f000 fd92 	bl	80013c4 <mainloop>
  {
 80008a0:	e7fc      	b.n	800089c <main+0x28>

080008a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b096      	sub	sp, #88	; 0x58
 80008a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2244      	movs	r2, #68	; 0x44
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f007 fa49 	bl	8007d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c8:	f003 f8a6 	bl	8003a18 <HAL_PWREx_ControlVoltageScaling>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d2:	f000 fa6b 	bl	8000dac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008f0:	230a      	movs	r3, #10
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f4:	2307      	movs	r3, #7
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f8dd 	bl	8003ac4 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000910:	f000 fa4c 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2303      	movs	r3, #3
 800091a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	2104      	movs	r1, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fca5 	bl	800427c <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000938:	f000 fa38 	bl	8000dac <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3758      	adds	r7, #88	; 0x58
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000968:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800096e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000988:	2204      	movs	r2, #4
 800098a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800098e:	2200      	movs	r2, #0
 8000990:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000994:	2201      	movs	r2, #1
 8000996:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800099a:	2201      	movs	r2, #1
 800099c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009ca:	f001 fa51 	bl	8001e70 <HAL_ADC_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 f9ea 	bl	8000dac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009e4:	f002 fbd6 	bl	8003194 <HAL_ADCEx_MultiModeConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009ee:	f000 f9dd 	bl	8000dac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f6:	2306      	movs	r3, #6
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fe:	237f      	movs	r3, #127	; 0x7f
 8000a00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a02:	2304      	movs	r3, #4
 8000a04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000a10:	f001 fef2 	bl	80027f8 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a1a:	f000 f9c7 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000480 	.word	0x20000480
 8000a2c:	50040000 	.word	0x50040000
 8000a30:	19200040 	.word	0x19200040

08000a34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <MX_TIM3_Init+0xb0>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a60:	f240 321f 	movw	r2, #799	; 0x31f
 8000a64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a6e:	22c8      	movs	r2, #200	; 0xc8
 8000a70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a7e:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a80:	f004 fc34 	bl	80052ec <HAL_TIM_PWM_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a8a:	f000 f98f 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000a9e:	f005 feb9 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000aa8:	f000 f980 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aac:	2360      	movs	r3, #96	; 0x60
 8000aae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000ac4:	f005 f87a 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ace:	f000 f96d 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM3_Init+0xac>)
 8000ad4:	f000 fda0 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200004e4 	.word	0x200004e4
 8000ae4:	40000400 	.word	0x40000400

08000ae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b1c:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_TIM4_Init+0xfc>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b22:	f240 321f 	movw	r2, #799	; 0x31f
 8000b26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b30:	2264      	movs	r2, #100	; 0x64
 8000b32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b42:	f004 fa7b 	bl	800503c <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000b4c:	f000 f92e 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4820      	ldr	r0, [pc, #128]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b5e:	f005 f941 	bl	8005de4 <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b68:	f000 f920 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b6e:	f004 fbbd 	bl	80052ec <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b78:	f000 f918 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000b8c:	f005 fe42 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b96:	f000 f909 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9a:	2360      	movs	r3, #96	; 0x60
 8000b9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000bb2:	f005 f803 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000bbc:	f000 f8f6 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_TIM4_Init+0xf8>)
 8000bc8:	f004 fff8 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000bd2:	f000 f8eb 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	; 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000530 	.word	0x20000530
 8000be4:	40000800 	.word	0x40000800

08000be8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_TIM6_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c00:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c0e:	220a      	movs	r2, #10
 8000c10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c1a:	f004 fa0f 	bl	800503c <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c24:	f000 f8c2 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c36:	f005 fded 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f8b4 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000057c 	.word	0x2000057c
 8000c50:	40001000 	.word	0x40001000

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_USART2_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c98:	f005 fe62 	bl	8006960 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 f883 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200005c8 	.word	0x200005c8
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a35      	ldr	r2, [pc, #212]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_GPIO_Init+0xf0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2160      	movs	r1, #96	; 0x60
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f002 fe19 	bl	8003968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4816      	ldr	r0, [pc, #88]	; (8000da8 <MX_GPIO_Init+0xf4>)
 8000d4e:	f002 fc61 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d56:	230b      	movs	r3, #11
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f002 fc54 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RED_LED_Pin;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f002 fc45 	bl	8003614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2028      	movs	r0, #40	; 0x28
 8000d90:	f002 fb8b 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d94:	2028      	movs	r0, #40	; 0x28
 8000d96:	f002 fba4 	bl	80034e2 <HAL_NVIC_EnableIRQ>

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000800 	.word	0x48000800

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>

08000db6 <buzzerInit>:
#include "mybuzzer.h"
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;
int count = 0;
uint32_t frame;
void buzzerInit(BUZZER* buzzer,TIM_HandleTypeDef *htim){
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	buzzer->htim = htim;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	601a      	str	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <buzzerStartPlay>:
void buzzerStartPlay(BUZZER* buzzer,int* song, int* frames){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	buzzer->song = song;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	605a      	str	r2, [r3, #4]
	buzzer->frames = frames;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim3,buzzer->song[count]/2);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <buzzerStartPlay+0x84>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0fda      	lsrs	r2, r3, #31
 8000dfc:	4413      	add	r3, r2
 8000dfe:	105b      	asrs	r3, r3, #1
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <buzzerStartPlay+0x88>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <buzzerStartPlay+0x84>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0fda      	lsrs	r2, r3, #31
 8000e18:	4413      	add	r3, r2
 8000e1a:	105b      	asrs	r3, r3, #1
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <buzzerStartPlay+0x88>)
 8000e20:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,((buzzer->song[count]/2)/2));
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <buzzerStartPlay+0x84>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da00      	bge.n	8000e36 <buzzerStartPlay+0x62>
 8000e34:	3303      	adds	r3, #3
 8000e36:	109b      	asrs	r3, r3, #2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <buzzerStartPlay+0x88>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Base_Start(&htim3);
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <buzzerStartPlay+0x88>)
 8000e42:	f004 f953 	bl	80050ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e46:	2100      	movs	r1, #0
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <buzzerStartPlay+0x88>)
 8000e4a:	f004 faa7 	bl	800539c <HAL_TIM_PWM_Start>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000064c 	.word	0x2000064c
 8000e5c:	200004e4 	.word	0x200004e4

08000e60 <buzzerStopPlay>:
void buzzerStopPlay(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <buzzerStopPlay+0x18>)
 8000e66:	f004 f9a9 	bl	80051bc <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <buzzerStopPlay+0x18>)
 8000e6e:	f004 fb9b 	bl	80055a8 <HAL_TIM_PWM_Stop>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200004e4 	.word	0x200004e4

08000e7c <buzzerOnInterrupt>:

void buzzerOnInterrupt(BUZZER* buzzer){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	frame++;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <buzzerOnInterrupt+0xcc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <buzzerOnInterrupt+0xcc>)
 8000e8c:	6013      	str	r3, [r2, #0]
	if(frame >= buzzer->frames[count] ){
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <buzzerOnInterrupt+0xcc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d835      	bhi.n	8000f12 <buzzerOnInterrupt+0x96>
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <buzzerOnInterrupt+0xd4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim3,buzzer->song[count]/2);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0fda      	lsrs	r2, r3, #31
 8000ebe:	4413      	add	r3, r2
 8000ec0:	105b      	asrs	r3, r3, #1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <buzzerOnInterrupt+0xd4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	0fda      	lsrs	r2, r3, #31
 8000eda:	4413      	add	r3, r2
 8000edc:	105b      	asrs	r3, r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <buzzerOnInterrupt+0xd4>)
 8000ee2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,((buzzer->song[count]/2)/2));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da00      	bge.n	8000ef8 <buzzerOnInterrupt+0x7c>
 8000ef6:	3303      	adds	r3, #3
 8000ef8:	109b      	asrs	r3, r3, #2
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <buzzerOnInterrupt+0xd4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
		count++;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000f0a:	6013      	str	r3, [r2, #0]
		frame = 0;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <buzzerOnInterrupt+0xcc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	}
	if(buzzer->song[count]==0 && buzzer->frames[count]== 0){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10b      	bne.n	8000f3c <buzzerOnInterrupt+0xc0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <buzzerOnInterrupt+0xc0>
		count=0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <buzzerOnInterrupt+0xd0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20000650 	.word	0x20000650
 8000f4c:	2000064c 	.word	0x2000064c
 8000f50:	200004e4 	.word	0x200004e4

08000f54 <_write>:
LED ledred;
LED ledblue;
BUTTON button;
CLOCK clock;
BUZZER buzz;
int _write(int fd, char* ptr, int len) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
      HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <_write+0x28>)
 8000f6c:	f005 fd46 	bl	80069fc <HAL_UART_Transmit>
      return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
  }
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200005c8 	.word	0x200005c8

08000f80 <commTask>:
int commTask()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000f86:	1db9      	adds	r1, r7, #6
 8000f88:	230a      	movs	r3, #10
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4836      	ldr	r0, [pc, #216]	; (8001068 <commTask+0xe8>)
 8000f8e:	f005 fdc9 	bl	8006b24 <HAL_UART_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d020      	beq.n	8000fde <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000f9c:	4b32      	ldr	r3, [pc, #200]	; (8001068 <commTask+0xe8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d011      	beq.n	8000fce <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <commTask+0xe8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2208      	movs	r2, #8
 8000fb0:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000fb2:	e00c      	b.n	8000fce <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <commTask+0xec>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	492c      	ldr	r1, [pc, #176]	; (800106c <commTask+0xec>)
 8000fbc:	600a      	str	r2, [r1, #0]
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <commTask+0xf0>)
 8000fc0:	1899      	adds	r1, r3, r2
 8000fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4827      	ldr	r0, [pc, #156]	; (8001068 <commTask+0xe8>)
 8000fca:	f005 fd17 	bl	80069fc <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <commTask+0xec>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <commTask+0xf4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbec      	blt.n	8000fb4 <commTask+0x34>
		}

		return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e03f      	b.n	800105e <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b0d      	cmp	r3, #13
 8000fe2:	d023      	beq.n	800102c <commTask+0xac>
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	2b0a      	cmp	r3, #10
 8000fe8:	d020      	beq.n	800102c <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <commTask+0xf4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b63      	cmp	r3, #99	; 0x63
 8000ff0:	dd05      	ble.n	8000ffe <commTask+0x7e>
		{
			cmdcount = 0;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <commTask+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <commTask+0xec>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <commTask+0xf4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	491b      	ldr	r1, [pc, #108]	; (8001074 <commTask+0xf4>)
 8001006:	600a      	str	r2, [r1, #0]
 8001008:	79b9      	ldrb	r1, [r7, #6]
 800100a:	4a19      	ldr	r2, [pc, #100]	; (8001070 <commTask+0xf0>)
 800100c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800100e:	2300      	movs	r3, #0
 8001010:	e025      	b.n	800105e <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <commTask+0xec>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	4914      	ldr	r1, [pc, #80]	; (800106c <commTask+0xec>)
 800101a:	600a      	str	r2, [r1, #0]
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <commTask+0xf0>)
 800101e:	1899      	adds	r1, r3, r2
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	2201      	movs	r2, #1
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <commTask+0xe8>)
 8001028:	f005 fce8 	bl	80069fc <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <commTask+0xec>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <commTask+0xf4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbec      	blt.n	8001012 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103c:	2202      	movs	r2, #2
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <commTask+0xf8>)
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <commTask+0xe8>)
 8001042:	f005 fcdb 	bl	80069fc <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <commTask+0xf4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <commTask+0xf0>)
 800104c:	2100      	movs	r1, #0
 800104e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <commTask+0xf4>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <commTask+0xec>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200005c8 	.word	0x200005c8
 800106c:	200006bc 	.word	0x200006bc
 8001070:	20000654 	.word	0x20000654
 8001074:	200006b8 	.word	0x200006b8
 8001078:	0800977c 	.word	0x0800977c

0800107c <handleCommand>:

void handleCommand()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	494f      	ldr	r1, [pc, #316]	; (80011c8 <handleCommand+0x14c>)
 800108a:	4850      	ldr	r0, [pc, #320]	; (80011cc <handleCommand+0x150>)
 800108c:	f006 fef2 	bl	8007e74 <siscanf>
 8001090:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 8092 	beq.w	80011be <handleCommand+0x142>
  {
	  return;
  }

  if (strcmp(cmd, "startled") == 0)
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	494c      	ldr	r1, [pc, #304]	; (80011d0 <handleCommand+0x154>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f895 	bl	80001d0 <strcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d106      	bne.n	80010ba <handleCommand+0x3e>
  {
	  ledOn(&ledblue);
 80010ac:	4849      	ldr	r0, [pc, #292]	; (80011d4 <handleCommand+0x158>)
 80010ae:	f7ff fa9c 	bl	80005ea <ledOn>
	  ledOn(&ledred);
 80010b2:	4849      	ldr	r0, [pc, #292]	; (80011d8 <handleCommand+0x15c>)
 80010b4:	f7ff fa99 	bl	80005ea <ledOn>
 80010b8:	e082      	b.n	80011c0 <handleCommand+0x144>


  }
  else if (strcmp(cmd, "stopled") == 0)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4947      	ldr	r1, [pc, #284]	; (80011dc <handleCommand+0x160>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f885 	bl	80001d0 <strcmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <handleCommand+0x5e>
  {
	  ledOff(&ledred);
 80010cc:	4842      	ldr	r0, [pc, #264]	; (80011d8 <handleCommand+0x15c>)
 80010ce:	f7ff fa9f 	bl	8000610 <ledOff>
	  ledOff(&ledblue);
 80010d2:	4840      	ldr	r0, [pc, #256]	; (80011d4 <handleCommand+0x158>)
 80010d4:	f7ff fa9c 	bl	8000610 <ledOff>
 80010d8:	e072      	b.n	80011c0 <handleCommand+0x144>


  }
  else if (strcmp(cmd, "ledblink") == 0)
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4940      	ldr	r1, [pc, #256]	; (80011e0 <handleCommand+0x164>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f875 	bl	80001d0 <strcmp>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <handleCommand+0x86>
   {
	 ledBlink(&ledred, maxCount);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4839      	ldr	r0, [pc, #228]	; (80011d8 <handleCommand+0x15c>)
 80010f2:	f7ff faa0 	bl	8000636 <ledBlink>
	 ledBlink(&ledblue, maxCount);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4836      	ldr	r0, [pc, #216]	; (80011d4 <handleCommand+0x158>)
 80010fc:	f7ff fa9b 	bl	8000636 <ledBlink>
 8001100:	e05e      	b.n	80011c0 <handleCommand+0x144>
   }
  else if (strcmp(cmd, "setled") == 0)
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4937      	ldr	r1, [pc, #220]	; (80011e4 <handleCommand+0x168>)
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f861 	bl	80001d0 <strcmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <handleCommand+0xaa>
   {
	  HAL_TIM_Base_Start_IT(&htim4);
 8001114:	4834      	ldr	r0, [pc, #208]	; (80011e8 <handleCommand+0x16c>)
 8001116:	f004 f879 	bl	800520c <HAL_TIM_Base_Start_IT>
	  ledsetbrightness(&ledred,maxCount);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4619      	mov	r1, r3
 800111e:	482e      	ldr	r0, [pc, #184]	; (80011d8 <handleCommand+0x15c>)
 8001120:	f7ff fabc 	bl	800069c <ledsetbrightness>
 8001124:	e04c      	b.n	80011c0 <handleCommand+0x144>

	  //ledsetbrightness(&ledblue,maxCount);
   }
  else if (strcmp(cmd, "gettick") == 0)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4930      	ldr	r1, [pc, #192]	; (80011ec <handleCommand+0x170>)
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f84f 	bl	80001d0 <strcmp>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10a      	bne.n	800114e <handleCommand+0xd2>
    {
 	  getClockTick(&clock, &tick);
 8001138:	492d      	ldr	r1, [pc, #180]	; (80011f0 <handleCommand+0x174>)
 800113a:	482e      	ldr	r0, [pc, #184]	; (80011f4 <handleCommand+0x178>)
 800113c:	f7ff fb07 	bl	800074e <getClockTick>
 	  printf("tick is %u\n\r", tick);
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <handleCommand+0x174>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	482c      	ldr	r0, [pc, #176]	; (80011f8 <handleCommand+0x17c>)
 8001148:	f006 fe06 	bl	8007d58 <iprintf>
 800114c:	e038      	b.n	80011c0 <handleCommand+0x144>
    }
  else if (strcmp(cmd, "gettime") == 0)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	492a      	ldr	r1, [pc, #168]	; (80011fc <handleCommand+0x180>)
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f83b 	bl	80001d0 <strcmp>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10f      	bne.n	8001180 <handleCommand+0x104>
    {
 	  getTime(&clock, &sec, &min, &hour);
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <handleCommand+0x184>)
 8001162:	4a28      	ldr	r2, [pc, #160]	; (8001204 <handleCommand+0x188>)
 8001164:	4928      	ldr	r1, [pc, #160]	; (8001208 <handleCommand+0x18c>)
 8001166:	4823      	ldr	r0, [pc, #140]	; (80011f4 <handleCommand+0x178>)
 8001168:	f7ff fb00 	bl	800076c <getTime>
	  printf("time is %zu,%zu,%zu\n\r", hour, min, sec);
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <handleCommand+0x184>)
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <handleCommand+0x188>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <handleCommand+0x18c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4824      	ldr	r0, [pc, #144]	; (800120c <handleCommand+0x190>)
 800117a:	f006 fded 	bl	8007d58 <iprintf>
 800117e:	e01f      	b.n	80011c0 <handleCommand+0x144>
    }

  else if (strcmp(cmd, "startbuzzer") == 0)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4922      	ldr	r1, [pc, #136]	; (8001210 <handleCommand+0x194>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f822 	bl	80001d0 <strcmp>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <handleCommand+0x122>
   {
	  buzzerStartPlay(&buzz, song, length);
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <handleCommand+0x198>)
 8001194:	4920      	ldr	r1, [pc, #128]	; (8001218 <handleCommand+0x19c>)
 8001196:	4821      	ldr	r0, [pc, #132]	; (800121c <handleCommand+0x1a0>)
 8001198:	f7ff fe1c 	bl	8000dd4 <buzzerStartPlay>
 800119c:	e010      	b.n	80011c0 <handleCommand+0x144>
   }
  else if (strcmp(cmd, "stopbuzzer") == 0)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	491f      	ldr	r1, [pc, #124]	; (8001220 <handleCommand+0x1a4>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f813 	bl	80001d0 <strcmp>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <handleCommand+0x13a>
   {
	  buzzerStopPlay();
 80011b0:	f7ff fe56 	bl	8000e60 <buzzerStopPlay>
 80011b4:	e004      	b.n	80011c0 <handleCommand+0x144>
   }
  else
  {
	  printf("Invalid command\r\n");
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <handleCommand+0x1a8>)
 80011b8:	f006 fe54 	bl	8007e64 <puts>
 80011bc:	e000      	b.n	80011c0 <handleCommand+0x144>
	  return;
 80011be:	bf00      	nop
  }
}
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	08009780 	.word	0x08009780
 80011cc:	20000654 	.word	0x20000654
 80011d0:	08009788 	.word	0x08009788
 80011d4:	200006fc 	.word	0x200006fc
 80011d8:	200006e0 	.word	0x200006e0
 80011dc:	08009794 	.word	0x08009794
 80011e0:	0800979c 	.word	0x0800979c
 80011e4:	080097a8 	.word	0x080097a8
 80011e8:	20000530 	.word	0x20000530
 80011ec:	080097b0 	.word	0x080097b0
 80011f0:	200006c0 	.word	0x200006c0
 80011f4:	2000072c 	.word	0x2000072c
 80011f8:	080097b8 	.word	0x080097b8
 80011fc:	080097c8 	.word	0x080097c8
 8001200:	200006cc 	.word	0x200006cc
 8001204:	200006c8 	.word	0x200006c8
 8001208:	200006c4 	.word	0x200006c4
 800120c:	080097d0 	.word	0x080097d0
 8001210:	080097e8 	.word	0x080097e8
 8001214:	200001f8 	.word	0x200001f8
 8001218:	20000000 	.word	0x20000000
 800121c:	20000738 	.word	0x20000738
 8001220:	080097f4 	.word	0x080097f4
 8001224:	08009800 	.word	0x08009800

08001228 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if(htim==&htim4){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d107      	bne.n	8001248 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		  HAL_GPIO_WritePin(ledred.GPIOx, ledred.GPIO_Pin, 0);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800123e:	8a11      	ldrh	r1, [r2, #16]
 8001240:	2200      	movs	r2, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fb90 	bl	8003968 <HAL_GPIO_WritePin>
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000530 	.word	0x20000530
 8001254:	200006e0 	.word	0x200006e0

08001258 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	sensor.value = HAL_ADC_GetValue(sensor.ADC);
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_ADC_ConvCpltCallback+0x20>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f001 f88b 	bl	8002380 <HAL_ADC_GetValue>
 800126a:	4603      	mov	r3, r0
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <HAL_ADC_ConvCpltCallback+0x20>)
 800126e:	6053      	str	r3, [r2, #4]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200006d0 	.word	0x200006d0

0800127c <HAL_GPIO_EXTI_Callback>:
  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]

  }
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_TIM_PeriodElapsedCallback>:
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	  if(htim == &htim6){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d10c      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x2a>
		  clockInInterrupt(&clock);
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80012a6:	f7ff faa5 	bl	80007f4 <clockInInterrupt>
		  buzzerOnInterrupt(&buzz);
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80012ac:	f7ff fde6 	bl	8000e7c <buzzerOnInterrupt>
		  ledOnTimerInterrupt(&ledblue);
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80012b2:	f7ff f9d1 	bl	8000658 <ledOnTimerInterrupt>
		  ledOnTimerInterrupt(&ledred);
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012b8:	f7ff f9ce 	bl	8000658 <ledOnTimerInterrupt>

	  }
	  else if(htim==&htim4){
		  HAL_GPIO_WritePin(ledred.GPIOx, ledred.GPIO_Pin, 1);
	  }
}
 80012bc:	e00b      	b.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x42>
	  else if(htim==&htim4){
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d107      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x42>
		  HAL_GPIO_WritePin(ledred.GPIOx, ledred.GPIO_Pin, 1);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012cc:	8a11      	ldrh	r1, [r2, #16]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fb49 	bl	8003968 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000057c 	.word	0x2000057c
 80012e4:	2000072c 	.word	0x2000072c
 80012e8:	20000738 	.word	0x20000738
 80012ec:	200006fc 	.word	0x200006fc
 80012f0:	200006e0 	.word	0x200006e0
 80012f4:	20000530 	.word	0x20000530

080012f8 <maininit>:
//		ledBlink(led, max);
//		break;
//	}
//	return 0;
//}
int maininit(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af02      	add	r7, sp, #8
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80012fe:	2036      	movs	r0, #54	; 0x36
 8001300:	f002 f8ef 	bl	80034e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001304:	201e      	movs	r0, #30
 8001306:	f002 f8ec 	bl	80034e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800130a:	201d      	movs	r0, #29
 800130c:	f002 f8e9 	bl	80034e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001310:	2012      	movs	r0, #18
 8001312:	f002 f8e6 	bl	80034e2 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start(&htim3);
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <maininit+0x9c>)
 8001318:	f003 fee8 	bl	80050ec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800131c:	481e      	ldr	r0, [pc, #120]	; (8001398 <maininit+0xa0>)
 800131e:	f003 ff75 	bl	800520c <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start_IT(&hadc1);
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <maininit+0xa4>)
 8001324:	f000 fefa 	bl	800211c <HAL_ADC_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <maininit+0xa8>)
 800132a:	f003 ff6f 	bl	800520c <HAL_TIM_Base_Start_IT>

	lightsenseInit(&sensor, &hadc1, maxvalue);
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <maininit+0xac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4919      	ldr	r1, [pc, #100]	; (800139c <maininit+0xa4>)
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <maininit+0xb0>)
 8001338:	f7ff fa6b 	bl	8000812 <lightsenseInit>
	buttoninit(&button, SWO_GPIO_Port, SWO_Pin);
 800133c:	2208      	movs	r2, #8
 800133e:	491b      	ldr	r1, [pc, #108]	; (80013ac <maininit+0xb4>)
 8001340:	481b      	ldr	r0, [pc, #108]	; (80013b0 <maininit+0xb8>)
 8001342:	f000 f857 	bl	80013f4 <buttoninit>
	ledInit(&ledred, RED_LED_GPIO_Port, RED_LED_Pin,TIM_CHANNEL_1,&htim4);
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <maininit+0xa8>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2240      	movs	r2, #64	; 0x40
 800134e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <maininit+0xbc>)
 8001354:	f7ff f926 	bl	80005a4 <ledInit>
	ledInit(&ledblue, GPIOA, GPIO_PIN_5,TIM_CHANNEL_2,&htim4);
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <maininit+0xa8>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2304      	movs	r3, #4
 800135e:	2220      	movs	r2, #32
 8001360:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <maininit+0xc0>)
 8001366:	f7ff f91d 	bl	80005a4 <ledInit>

	HAL_TIM_PWM_Start_IT(ledred.htim, ledred.CHANNEL);
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <maininit+0xbc>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <maininit+0xbc>)
 8001370:	6952      	ldr	r2, [r2, #20]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f004 f9ad 	bl	80056d4 <HAL_TIM_PWM_Start_IT>
	clockInit(&clock,&htim6);
 800137a:	4907      	ldr	r1, [pc, #28]	; (8001398 <maininit+0xa0>)
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <maininit+0xc4>)
 800137e:	f7ff f9d5 	bl	800072c <clockInit>
	buzzerInit(&buzz,&htim3);
 8001382:	4904      	ldr	r1, [pc, #16]	; (8001394 <maininit+0x9c>)
 8001384:	480e      	ldr	r0, [pc, #56]	; (80013c0 <maininit+0xc8>)
 8001386:	f7ff fd16 	bl	8000db6 <buzzerInit>
	return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200004e4 	.word	0x200004e4
 8001398:	2000057c 	.word	0x2000057c
 800139c:	20000480 	.word	0x20000480
 80013a0:	20000530 	.word	0x20000530
 80013a4:	200003f0 	.word	0x200003f0
 80013a8:	200006d0 	.word	0x200006d0
 80013ac:	48000400 	.word	0x48000400
 80013b0:	20000718 	.word	0x20000718
 80013b4:	200006e0 	.word	0x200006e0
 80013b8:	200006fc 	.word	0x200006fc
 80013bc:	2000072c 	.word	0x2000072c
 80013c0:	20000738 	.word	0x20000738

080013c4 <mainloop>:
int mainloop(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	 if (commTask())
 80013c8:	f7ff fdda 	bl	8000f80 <commTask>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <mainloop+0x12>
	 {
		 handleCommand();
 80013d2:	f7ff fe53 	bl	800107c <handleCommand>
	 }

	 ledsetbrightness(&ledred, getValue(&sensor));
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <mainloop+0x28>)
 80013d8:	f7ff fa30 	bl	800083c <getValue>
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <mainloop+0x2c>)
 80013e2:	f7ff f95b 	bl	800069c <ledsetbrightness>
	return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200006d0 	.word	0x200006d0
 80013f0:	200006e0 	.word	0x200006e0

080013f4 <buttoninit>:
#include <stdint.h>
#include <stdlib.h>
#include "new_button.h"
#include "main.h"

void buttoninit(BUTTON* button, GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	4613      	mov	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]
	button->GPIOx= GPIOx;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin=GPIO_Pin;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	88fa      	ldrh	r2, [r7, #6]
 800140c:	809a      	strh	r2, [r3, #4]
	 button->pushtime = 0;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	 button->relesetime = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	 button->state=STATE_NOT_PRESSED;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_MspInit+0x44>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6613      	str	r3, [r2, #96]	; 0x60
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_MspInit+0x44>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x44>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x44>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0ac      	sub	sp, #176	; 0xb0
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2288      	movs	r2, #136	; 0x88
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f006 fc57 	bl	8007d48 <memset>
  if(hadc->Instance==ADC1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_ADC_MspInit+0xd8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d14f      	bne.n	8001544 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014ba:	2308      	movs	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014be:	2307      	movs	r3, #7
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 f8f5 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014e0:	f7ff fc64 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_ADC_MspInit+0xdc>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_ADC_MspInit+0xdc>)
 80014ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_ADC_MspInit+0xdc>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_ADC_MspInit+0xdc>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0xdc>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_ADC_MspInit+0xdc>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800151a:	230b      	movs	r3, #11
 800151c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f002 f870 	bl	8003614 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2012      	movs	r0, #18
 800153a:	f001 ffb6 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800153e:	2012      	movs	r0, #18
 8001540:	f001 ffcf 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	37b0      	adds	r7, #176	; 0xb0
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	50040000 	.word	0x50040000
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_TIM_PWM_MspInit+0x38>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10b      	bne.n	800157e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_TIM_PWM_MspInit+0x3c>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_TIM_PWM_MspInit+0x3c>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6593      	str	r3, [r2, #88]	; 0x58
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_TIM_PWM_MspInit+0x3c>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40000400 	.word	0x40000400
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_TIM_Base_MspInit+0x78>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d114      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	201e      	movs	r0, #30
 80015c4:	f001 ff71 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015c8:	201e      	movs	r0, #30
 80015ca:	f001 ff8a 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80015ce:	e018      	b.n	8001602 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_TIM_Base_MspInit+0x80>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2036      	movs	r0, #54	; 0x36
 80015f8:	f001 ff57 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	; 0x36
 80015fe:	f001 ff70 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40000800 	.word	0x40000800
 8001610:	40021000 	.word	0x40021000
 8001614:	40001000 	.word	0x40001000

08001618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_TIM_MspPostInit+0x64>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d11b      	bne.n	8001672 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001652:	2310      	movs	r3, #16
 8001654:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001662:	2302      	movs	r3, #2
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_TIM_MspPostInit+0x6c>)
 800166e:	f001 ffd1 	bl	8003614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3720      	adds	r7, #32
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40000400 	.word	0x40000400
 8001680:	40021000 	.word	0x40021000
 8001684:	48000400 	.word	0x48000400

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ac      	sub	sp, #176	; 0xb0
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2288      	movs	r2, #136	; 0x88
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 fb4d 	bl	8007d48 <memset>
  if(huart->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <HAL_UART_MspInit+0xc0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d143      	bne.n	8001740 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fffd 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff fb6c 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_UART_MspInit+0xc4>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_UART_MspInit+0xc4>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_UART_MspInit+0xc4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_UART_MspInit+0xc4>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a16      	ldr	r2, [pc, #88]	; (800174c <HAL_UART_MspInit+0xc4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_UART_MspInit+0xc4>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001704:	230c      	movs	r3, #12
 8001706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f001 ff72 	bl	8003614 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2026      	movs	r0, #38	; 0x26
 8001736:	f001 feb8 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800173a:	2026      	movs	r0, #38	; 0x26
 800173c:	f001 fed1 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	37b0      	adds	r7, #176	; 0xb0
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40004400 	.word	0x40004400
 800174c:	40021000 	.word	0x40021000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f952 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <ADC1_2_IRQHandler+0x10>)
 80017aa:	f000 fdf7 	bl	800239c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000480 	.word	0x20000480

080017b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM4_IRQHandler+0x10>)
 80017be:	f004 f8dd 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000530 	.word	0x20000530

080017cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART2_IRQHandler+0x10>)
 80017d2:	f005 fa79 	bl	8006cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200005c8 	.word	0x200005c8

080017e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017e8:	f002 f8f0 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM6_DAC_IRQHandler+0x10>)
 80017f6:	f004 f8c1 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000057c 	.word	0x2000057c

08001804 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
	}

return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:
	}
	return len;
}

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001866:	605a      	str	r2, [r3, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f006 fa0c 	bl	8007cf4 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20018000 	.word	0x20018000
 8001908:	00000400 	.word	0x00000400
 800190c:	20000744 	.word	0x20000744
 8001910:	20000760 	.word	0x20000760

08001914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800193c:	f7ff ffea 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopForever+0x6>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopForever+0xe>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopForever+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f006 f9cb 	bl	8007d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800196a:	f7fe ff83 	bl	8000874 <main>

0800196e <LoopForever>:

LoopForever:
    b LoopForever
 800196e:	e7fe      	b.n	800196e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000464 	.word	0x20000464
  ldr r2, =_sidata
 800197c:	08009a2c 	.word	0x08009a2c
  ldr r2, =_sbss
 8001980:	20000464 	.word	0x20000464
  ldr r4, =_ebss
 8001984:	2000075c 	.word	0x2000075c

08001988 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC3_IRQHandler>
	...

0800198c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_Init+0x3c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_Init+0x3c>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a2:	2003      	movs	r0, #3
 80019a4:	f001 fd76 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f80f 	bl	80019cc <HAL_InitTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	e001      	b.n	80019be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ba:	f7ff fd37 	bl	800142c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019be:	79fb      	ldrb	r3, [r7, #7]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_InitTick+0x6c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d023      	beq.n	8001a28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_InitTick+0x70>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_InitTick+0x6c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fd81 	bl	80034fe <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d809      	bhi.n	8001a1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f001 fd4b 	bl	80034aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_InitTick+0x74>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e007      	b.n	8001a2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e004      	b.n	8001a2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e001      	b.n	8001a2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200003fc 	.word	0x200003fc
 8001a3c:	200003f4 	.word	0x200003f4
 8001a40:	200003f8 	.word	0x200003f8

08001a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200003fc 	.word	0x200003fc
 8001a68:	20000748 	.word	0x20000748

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000748 	.word	0x20000748

08001a84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3360      	adds	r3, #96	; 0x60
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <LL_ADC_SetOffset+0x44>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	03fff000 	.word	0x03fff000

08001b34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	461a      	mov	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3360      	adds	r3, #96	; 0x60
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3330      	adds	r3, #48	; 0x30
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	211f      	movs	r1, #31
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 011f 	and.w	r1, r3, #31
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3314      	adds	r3, #20
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0e5b      	lsrs	r3, r3, #25
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0d1b      	lsrs	r3, r3, #20
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2107      	movs	r1, #7
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	0d1b      	lsrs	r3, r3, #20
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c84:	bf00      	nop
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	401a      	ands	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0318 	and.w	r3, r3, #24
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cb4:	40d9      	lsrs	r1, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	400b      	ands	r3, r1
 8001cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	0007ffff 	.word	0x0007ffff

08001cd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6093      	str	r3, [r2, #8]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d48:	d101      	bne.n	8001d4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <LL_ADC_IsEnabled+0x18>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <LL_ADC_IsEnabled+0x1a>
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d101      	bne.n	8001e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e136      	b.n	80020f8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff faeb 	bl	8001474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff3f 	bl	8001d34 <LL_ADC_IsDeepPowerDownEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff25 	bl	8001d10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff5a 	bl	8001d84 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d115      	bne.n	8001f02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff3e 	bl	8001d5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee0:	4b87      	ldr	r3, [pc, #540]	; (8002100 <HAL_ADC_Init+0x290>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	4a87      	ldr	r2, [pc, #540]	; (8002104 <HAL_ADC_Init+0x294>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff3c 	bl	8001d84 <LL_ADC_IsInternalRegulatorEnabled>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff75 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8001f38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80cf 	bne.w	80020e6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80cb 	bne.w	80020e6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f58:	f043 0202 	orr.w	r2, r3, #2
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff35 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d115      	bne.n	8001f9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f70:	4865      	ldr	r0, [pc, #404]	; (8002108 <HAL_ADC_Init+0x298>)
 8001f72:	f7ff ff2f 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001f76:	4604      	mov	r4, r0
 8001f78:	4864      	ldr	r0, [pc, #400]	; (800210c <HAL_ADC_Init+0x29c>)
 8001f7a:	f7ff ff2b 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	431c      	orrs	r4, r3
 8001f82:	4863      	ldr	r0, [pc, #396]	; (8002110 <HAL_ADC_Init+0x2a0>)
 8001f84:	f7ff ff26 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4619      	mov	r1, r3
 8001f96:	485f      	ldr	r0, [pc, #380]	; (8002114 <HAL_ADC_Init+0x2a4>)
 8001f98:	f7ff fd74 	bl	8001a84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e5b      	ldrb	r3, [r3, #25]
 8001fa0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fb2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	045b      	lsls	r3, r3, #17
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_ADC_Init+0x2a8>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	69b9      	ldr	r1, [r7, #24]
 8002004:	430b      	orrs	r3, r1
 8002006:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff08 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8002012:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff15 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 800201e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13d      	bne.n	80020a2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d13a      	bne.n	80020a2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002030:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002038:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002048:	f023 0302 	bic.w	r3, r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	430b      	orrs	r3, r1
 8002054:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800205c:	2b01      	cmp	r3, #1
 800205e:	d118      	bne.n	8002092 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002082:	430a      	orrs	r2, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10c      	bne.n	80020c4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f023 010f 	bic.w	r1, r3, #15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	e007      	b.n	80020d4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 020f 	bic.w	r2, r2, #15
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f023 0303 	bic.w	r3, r3, #3
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3724      	adds	r7, #36	; 0x24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}
 8002100:	200003f4 	.word	0x200003f4
 8002104:	053e2d63 	.word	0x053e2d63
 8002108:	50040000 	.word	0x50040000
 800210c:	50040100 	.word	0x50040100
 8002110:	50040200 	.word	0x50040200
 8002114:	50040300 	.word	0x50040300
 8002118:	fff0c007 	.word	0xfff0c007

0800211c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002124:	4893      	ldr	r0, [pc, #588]	; (8002374 <HAL_ADC_Start_IT+0x258>)
 8002126:	f7ff fdd7 	bl	8001cd8 <LL_ADC_GetMultimode>
 800212a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fe76 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 8111 	bne.w	8002360 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_Start_IT+0x30>
 8002148:	2302      	movs	r3, #2
 800214a:	e10e      	b.n	800236a <HAL_ADC_Start_IT+0x24e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 ff3f 	bl	8002fd8 <ADC_Enable>
 800215a:	4603      	mov	r3, r0
 800215c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 80f8 	bne.w	8002356 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	; (8002378 <HAL_ADC_Start_IT+0x25c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d002      	beq.n	800218a <HAL_ADC_Start_IT+0x6e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	e000      	b.n	800218c <HAL_ADC_Start_IT+0x70>
 800218a:	4b7c      	ldr	r3, [pc, #496]	; (800237c <HAL_ADC_Start_IT+0x260>)
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4293      	cmp	r3, r2
 8002192:	d002      	beq.n	800219a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f023 0206 	bic.w	r2, r3, #6
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58
 80021be:	e002      	b.n	80021c6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	221c      	movs	r2, #28
 80021cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 021c 	bic.w	r2, r2, #28
 80021e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d108      	bne.n	8002200 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0208 	orr.w	r2, r2, #8
 80021fc:	605a      	str	r2, [r3, #4]
          break;
 80021fe:	e008      	b.n	8002212 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0204 	orr.w	r2, r2, #4
 800220e:	605a      	str	r2, [r3, #4]
          break;
 8002210:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0210 	orr.w	r2, r2, #16
 8002228:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_ADC_Start_IT+0x25c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d002      	beq.n	800223a <HAL_ADC_Start_IT+0x11e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	e000      	b.n	800223c <HAL_ADC_Start_IT+0x120>
 800223a:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_ADC_Start_IT+0x260>)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4293      	cmp	r3, r2
 8002242:	d008      	beq.n	8002256 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d002      	beq.n	8002256 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d13b      	bne.n	80022ce <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02d      	beq.n	80022c0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d110      	bne.n	800229e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0220 	bic.w	r2, r2, #32
 800228a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800229a:	605a      	str	r2, [r3, #4]
              break;
 800229c:	e011      	b.n	80022c2 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	605a      	str	r2, [r3, #4]
              break;
 80022be:	e000      	b.n	80022c2 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80022c0:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fd97 	bl	8001dfa <LL_ADC_REG_StartConversion>
 80022cc:	e04c      	b.n	8002368 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_ADC_Start_IT+0x25c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d002      	beq.n	80022ea <HAL_ADC_Start_IT+0x1ce>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	e000      	b.n	80022ec <HAL_ADC_Start_IT+0x1d0>
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_ADC_Start_IT+0x260>)
 80022ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d035      	beq.n	8002366 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002302:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d110      	bne.n	8002334 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0220 	bic.w	r2, r2, #32
 8002320:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002330:	605a      	str	r2, [r3, #4]
              break;
 8002332:	e019      	b.n	8002368 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002342:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0220 	orr.w	r2, r2, #32
 8002352:	605a      	str	r2, [r3, #4]
              break;
 8002354:	e008      	b.n	8002368 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800235e:	e003      	b.n	8002368 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002360:	2302      	movs	r3, #2
 8002362:	75fb      	strb	r3, [r7, #23]
 8002364:	e000      	b.n	8002368 <HAL_ADC_Start_IT+0x24c>
        }
 8002366:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002368:	7dfb      	ldrb	r3, [r7, #23]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	50040300 	.word	0x50040300
 8002378:	50040100 	.word	0x50040100
 800237c:	50040000 	.word	0x50040000

08002380 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b8:	4882      	ldr	r0, [pc, #520]	; (80025c4 <HAL_ADC_IRQHandler+0x228>)
 80023ba:	f7ff fc8d 	bl	8001cd8 <LL_ADC_GetMultimode>
 80023be:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <HAL_ADC_IRQHandler+0x5e>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fec7 	bl	8003180 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_ADC_IRQHandler+0x72>
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8083 	beq.w	8002520 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d07d      	beq.n	8002520 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fba8 	bl	8001b96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d062      	beq.n	8002512 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_ADC_IRQHandler+0x22c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d002      	beq.n	800245c <HAL_ADC_IRQHandler+0xc0>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e000      	b.n	800245e <HAL_ADC_IRQHandler+0xc2>
 800245c:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <HAL_ADC_IRQHandler+0x230>)
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4293      	cmp	r3, r2
 8002464:	d008      	beq.n	8002478 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d002      	beq.n	8002478 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d104      	bne.n	8002482 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	e00c      	b.n	800249c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_ADC_IRQHandler+0x22c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d002      	beq.n	8002492 <HAL_ADC_IRQHandler+0xf6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e000      	b.n	8002494 <HAL_ADC_IRQHandler+0xf8>
 8002492:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <HAL_ADC_IRQHandler+0x230>)
 8002494:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d135      	bne.n	8002512 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d12e      	bne.n	8002512 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fcb2 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11a      	bne.n	80024fa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 020c 	bic.w	r2, r2, #12
 80024d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d112      	bne.n	8002512 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
 80024f8:	e00b      	b.n	8002512 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fea0 	bl	8001258 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	220c      	movs	r2, #12
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_ADC_IRQHandler+0x198>
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 809f 	beq.w	800267e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8099 	beq.w	800267e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fb53 	bl	8001c14 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800256e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fb0e 	bl	8001b96 <LL_ADC_REG_IsTriggerSourceSWStart>
 800257a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_ADC_IRQHandler+0x22c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d002      	beq.n	800258c <HAL_ADC_IRQHandler+0x1f0>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	e000      	b.n	800258e <HAL_ADC_IRQHandler+0x1f2>
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_ADC_IRQHandler+0x230>)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4293      	cmp	r3, r2
 8002594:	d008      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d002      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b07      	cmp	r3, #7
 80025a6:	d104      	bne.n	80025b2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	e013      	b.n	80025da <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_ADC_IRQHandler+0x22c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x234>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_ADC_IRQHandler+0x236>
 80025c2:	bf00      	nop
 80025c4:	50040300 	.word	0x50040300
 80025c8:	50040100 	.word	0x50040100
 80025cc:	50040000 	.word	0x50040000
 80025d0:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <HAL_ADC_IRQHandler+0x42c>)
 80025d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d047      	beq.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_IRQHandler+0x25e>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d03f      	beq.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d13a      	bne.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d133      	bne.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12e      	bne.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc16 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11a      	bne.n	8002658 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002630:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d112      	bne.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
 8002656:	e00b      	b.n	8002670 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fd5d 	bl	8003130 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2260      	movs	r2, #96	; 0x60
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d011      	beq.n	80026ac <HAL_ADC_IRQHandler+0x310>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f896 	bl	80027d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_ADC_IRQHandler+0x340>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fd43 	bl	8003158 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_ADC_IRQHandler+0x370>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fd35 	bl	800316c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d036      	beq.n	8002784 <HAL_ADC_IRQHandler+0x3e8>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d031      	beq.n	8002784 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002728:	2301      	movs	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e014      	b.n	8002758 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002734:	4825      	ldr	r0, [pc, #148]	; (80027cc <HAL_ADC_IRQHandler+0x430>)
 8002736:	f7ff fadd 	bl	8001cf4 <LL_ADC_GetMultiDMATransfer>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002740:	2301      	movs	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e008      	b.n	8002758 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002754:	2301      	movs	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10e      	bne.n	800277c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f834 	bl	80027e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2210      	movs	r2, #16
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x424>
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f043 0208 	orr.w	r2, r3, #8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fcc2 	bl	8003144 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027c0:	bf00      	nop
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	50040000 	.word	0x50040000
 80027cc:	50040300 	.word	0x50040300

080027d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0b6      	sub	sp, #216	; 0xd8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x22>
 8002816:	2302      	movs	r3, #2
 8002818:	e3c7      	b.n	8002faa <HAL_ADC_ConfigChannel+0x7b2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fafb 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 83a8 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d824      	bhi.n	8002886 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	3b02      	subs	r3, #2
 8002842:	2b03      	cmp	r3, #3
 8002844:	d81b      	bhi.n	800287e <HAL_ADC_ConfigChannel+0x86>
 8002846:	a201      	add	r2, pc, #4	; (adr r2, 800284c <HAL_ADC_ConfigChannel+0x54>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	0800285d 	.word	0x0800285d
 8002850:	08002865 	.word	0x08002865
 8002854:	0800286d 	.word	0x0800286d
 8002858:	08002875 	.word	0x08002875
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	220c      	movs	r2, #12
 8002860:	605a      	str	r2, [r3, #4]
          break;
 8002862:	e011      	b.n	8002888 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2212      	movs	r2, #18
 8002868:	605a      	str	r2, [r3, #4]
          break;
 800286a:	e00d      	b.n	8002888 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2218      	movs	r2, #24
 8002870:	605a      	str	r2, [r3, #4]
          break;
 8002872:	e009      	b.n	8002888 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287a:	605a      	str	r2, [r3, #4]
          break;
 800287c:	e004      	b.n	8002888 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2206      	movs	r2, #6
 8002882:	605a      	str	r2, [r3, #4]
          break;
 8002884:	e000      	b.n	8002888 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002886:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	f7ff f991 	bl	8001bbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fabf 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 80028a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff facb 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 80028b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 81a6 	bne.w	8002c0c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 81a1 	bne.w	8002c0c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f7ff f9af 	bl	8001c3a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	08db      	lsrs	r3, r3, #3
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d00a      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6919      	ldr	r1, [r3, #16]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800290e:	f7ff f8ed 	bl	8001aec <LL_ADC_SetOffset>
 8002912:	e17b      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f90a 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x148>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f8ff 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	e01e      	b.n	800297e <HAL_ADC_ConfigChannel+0x186>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f8f4 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800295e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800296e:	2320      	movs	r3, #32
 8002970:	e004      	b.n	800297c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x19e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	e018      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x1d0>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e004      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80029be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d106      	bne.n	80029da <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f8c3 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f8a7 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x20e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f89c 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x24c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f891 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x264>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e018      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x296>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e004      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d106      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f860 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f844 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x2d4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2102      	movs	r1, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f839 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	e01e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x312>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f82e 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e004      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x32a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	e016      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x358>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e004      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe ffff 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2103      	movs	r1, #3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe ffe3 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x396>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe ffd8 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	e017      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x3c6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2103      	movs	r1, #3
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe ffcd 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x3de>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	e011      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x402>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d106      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	2103      	movs	r1, #3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ffaa 	bl	8001b60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f8df 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 813f 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f7ff f830 	bl	8001c90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a8e      	ldr	r2, [pc, #568]	; (8002e70 <HAL_ADC_ConfigChannel+0x678>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	f040 8130 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x46c>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2b09      	cmp	r3, #9
 8002c5a:	bf94      	ite	ls
 8002c5c:	2301      	movls	r3, #1
 8002c5e:	2300      	movhi	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	e019      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x4a0>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c74:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e003      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	bf94      	ite	ls
 8002c92:	2301      	movls	r3, #1
 8002c94:	2300      	movhi	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d079      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x4c0>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	3301      	adds	r3, #1
 8002cb0:	069b      	lsls	r3, r3, #26
 8002cb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb6:	e015      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x4ec>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x50c>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	e017      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x53c>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	ea42 0103 	orr.w	r1, r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x562>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	051b      	lsls	r3, r3, #20
 8002d58:	e018      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x594>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d72:	2320      	movs	r3, #32
 8002d74:	e003      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	e080      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x5b4>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	069b      	lsls	r3, r3, #26
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	e015      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x5e0>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x600>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	e017      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x630>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	61fb      	str	r3, [r7, #28]
  return result;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	ea42 0103 	orr.w	r1, r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10d      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x65c>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b1e      	subs	r3, #30
 8002e4c:	051b      	lsls	r3, r3, #20
 8002e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e52:	e01d      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x698>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	613b      	str	r3, [r7, #16]
  return result;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e005      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x684>
 8002e70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 021f 	and.w	r2, r3, #31
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	3b1e      	subs	r3, #30
 8002e8a:	051b      	lsls	r3, r3, #20
 8002e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e90:	430b      	orrs	r3, r1
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	6892      	ldr	r2, [r2, #8]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f7fe fecf 	bl	8001c3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d07a      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ea8:	4843      	ldr	r0, [pc, #268]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002eaa:	f7fe fe11 	bl	8001ad0 <LL_ADC_GetCommonPathInternalCh>
 8002eae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a41      	ldr	r2, [pc, #260]	; (8002fbc <HAL_ADC_ConfigChannel+0x7c4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d12c      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d126      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x6e4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d15d      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4834      	ldr	r0, [pc, #208]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ee8:	f7fe fddf 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_ADC_ConfigChannel+0x7d4>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f06:	e002      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f14:	e040      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d118      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x75a>
 8002f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d112      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x748>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d12d      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f48:	4619      	mov	r1, r3
 8002f4a:	481b      	ldr	r0, [pc, #108]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f4c:	f7fe fdad 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f50:	e024      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d120      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d11a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d115      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f7e:	f7fe fd94 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
 8002f82:	e00c      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	37d8      	adds	r7, #216	; 0xd8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	80080000 	.word	0x80080000
 8002fb8:	50040300 	.word	0x50040300
 8002fbc:	c7520000 	.word	0xc7520000
 8002fc0:	50040000 	.word	0x50040000
 8002fc4:	50040200 	.word	0x50040200
 8002fc8:	200003f4 	.word	0x200003f4
 8002fcc:	053e2d63 	.word	0x053e2d63
 8002fd0:	cb840000 	.word	0xcb840000
 8002fd4:	80000001 	.word	0x80000001

08002fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fef3 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d169      	bne.n	80030c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <ADC_Enable+0xfc>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0210 	orr.w	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e055      	b.n	80030ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fec2 	bl	8001dac <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003028:	482b      	ldr	r0, [pc, #172]	; (80030d8 <ADC_Enable+0x100>)
 800302a:	f7fe fd51 	bl	8001ad0 <LL_ADC_GetCommonPathInternalCh>
 800302e:	4603      	mov	r3, r0
 8003030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <ADC_Enable+0x104>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <ADC_Enable+0x108>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003052:	e002      	b.n	800305a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	3b01      	subs	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f9      	bne.n	8003054 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003060:	f7fe fd04 	bl	8001a6c <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003066:	e028      	b.n	80030ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe feb1 	bl	8001dd4 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fe95 	bl	8001dac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003082:	f7fe fcf3 	bl	8001a6c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d914      	bls.n	80030ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d00d      	beq.n	80030ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f043 0210 	orr.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e007      	b.n	80030ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d1cf      	bne.n	8003068 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	8000003f 	.word	0x8000003f
 80030d8:	50040300 	.word	0x50040300
 80030dc:	200003f4 	.word	0x200003f4
 80030e0:	053e2d63 	.word	0x053e2d63

080030e4 <LL_ADC_IsEnabled>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <LL_ADC_IsEnabled+0x18>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LL_ADC_IsEnabled+0x1a>
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_REG_IsConversionOngoing>:
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d101      	bne.n	8003122 <LL_ADC_REG_IsConversionOngoing+0x18>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b09f      	sub	sp, #124	; 0x7c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e093      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80031ba:	2300      	movs	r3, #0
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80031be:	2300      	movs	r3, #0
 80031c0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e001      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e072      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff87 	bl	800310a <LL_ADC_REG_IsConversionOngoing>
 80031fc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff81 	bl	800310a <LL_ADC_REG_IsConversionOngoing>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d154      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800320e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003210:	2b00      	cmp	r3, #0
 8003212:	d151      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02c      	beq.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003232:	035b      	lsls	r3, r3, #13
 8003234:	430b      	orrs	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800323c:	4829      	ldr	r0, [pc, #164]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800323e:	f7ff ff51 	bl	80030e4 <LL_ADC_IsEnabled>
 8003242:	4604      	mov	r4, r0
 8003244:	4828      	ldr	r0, [pc, #160]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003246:	f7ff ff4d 	bl	80030e4 <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	431c      	orrs	r4, r3
 800324e:	4828      	ldr	r0, [pc, #160]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003250:	f7ff ff48 	bl	80030e4 <LL_ADC_IsEnabled>
 8003254:	4603      	mov	r3, r0
 8003256:	4323      	orrs	r3, r4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d137      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6811      	ldr	r1, [r2, #0]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	430a      	orrs	r2, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003276:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	e028      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003284:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003286:	4817      	ldr	r0, [pc, #92]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003288:	f7ff ff2c 	bl	80030e4 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4816      	ldr	r0, [pc, #88]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003290:	f7ff ff28 	bl	80030e4 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	431c      	orrs	r4, r3
 8003298:	4815      	ldr	r0, [pc, #84]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800329a:	f7ff ff23 	bl	80030e4 <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	4323      	orrs	r3, r4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d112      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b6:	e009      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032ca:	e000      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032da:	4618      	mov	r0, r3
 80032dc:	377c      	adds	r7, #124	; 0x7c
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	50040000 	.word	0x50040000
 80032e8:	50040100 	.word	0x50040100
 80032ec:	50040300 	.word	0x50040300
 80032f0:	50040200 	.word	0x50040200

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4907      	ldr	r1, [pc, #28]	; (8003390 <__NVIC_EnableIRQ+0x38>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100

08003394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db0a      	blt.n	80033be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	490c      	ldr	r1, [pc, #48]	; (80033e0 <__NVIC_SetPriority+0x4c>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033bc:	e00a      	b.n	80033d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4908      	ldr	r1, [pc, #32]	; (80033e4 <__NVIC_SetPriority+0x50>)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3b04      	subs	r3, #4
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	761a      	strb	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf28      	it	cs
 8003406:	2304      	movcs	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3304      	adds	r3, #4
 800340e:	2b06      	cmp	r3, #6
 8003410:	d902      	bls.n	8003418 <NVIC_EncodePriority+0x30>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3b03      	subs	r3, #3
 8003416:	e000      	b.n	800341a <NVIC_EncodePriority+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	f04f 32ff 	mov.w	r2, #4294967295
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43d9      	mvns	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	4313      	orrs	r3, r2
         );
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff8e 	bl	8003394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff29 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff3e 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff8e 	bl	80033e8 <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5d 	bl	8003394 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff31 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d008      	beq.n	8003540 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2204      	movs	r2, #4
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e022      	b.n	8003586 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 020e 	bic.w	r2, r2, #14
 800354e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f003 021c 	and.w	r2, r3, #28
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d005      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e029      	b.n	800360a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 020e 	bic.w	r2, r2, #14
 80035c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f003 021c 	and.w	r2, r3, #28
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
    }
  }
  return status;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e17f      	b.n	8003924 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8171 	beq.w	800391e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d005      	beq.n	8003654 <HAL_GPIO_Init+0x40>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d130      	bne.n	80036b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800368a:	2201      	movs	r2, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0201 	and.w	r2, r3, #1
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d118      	bne.n	80036f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036c8:	2201      	movs	r2, #1
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	f003 0201 	and.w	r2, r3, #1
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d017      	beq.n	8003730 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	6939      	ldr	r1, [r7, #16]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80ac 	beq.w	800391e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_GPIO_Init+0x330>)
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_GPIO_Init+0x330>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6613      	str	r3, [r2, #96]	; 0x60
 80037d2:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_GPIO_Init+0x330>)
 80037d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037de:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <HAL_GPIO_Init+0x334>)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003808:	d025      	beq.n	8003856 <HAL_GPIO_Init+0x242>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4f      	ldr	r2, [pc, #316]	; (800394c <HAL_GPIO_Init+0x338>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01f      	beq.n	8003852 <HAL_GPIO_Init+0x23e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4e      	ldr	r2, [pc, #312]	; (8003950 <HAL_GPIO_Init+0x33c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d019      	beq.n	800384e <HAL_GPIO_Init+0x23a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <HAL_GPIO_Init+0x340>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_GPIO_Init+0x236>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4c      	ldr	r2, [pc, #304]	; (8003958 <HAL_GPIO_Init+0x344>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00d      	beq.n	8003846 <HAL_GPIO_Init+0x232>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4b      	ldr	r2, [pc, #300]	; (800395c <HAL_GPIO_Init+0x348>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <HAL_GPIO_Init+0x22e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4a      	ldr	r2, [pc, #296]	; (8003960 <HAL_GPIO_Init+0x34c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_GPIO_Init+0x22a>
 800383a:	2306      	movs	r3, #6
 800383c:	e00c      	b.n	8003858 <HAL_GPIO_Init+0x244>
 800383e:	2307      	movs	r3, #7
 8003840:	e00a      	b.n	8003858 <HAL_GPIO_Init+0x244>
 8003842:	2305      	movs	r3, #5
 8003844:	e008      	b.n	8003858 <HAL_GPIO_Init+0x244>
 8003846:	2304      	movs	r3, #4
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x244>
 800384a:	2303      	movs	r3, #3
 800384c:	e004      	b.n	8003858 <HAL_GPIO_Init+0x244>
 800384e:	2302      	movs	r3, #2
 8003850:	e002      	b.n	8003858 <HAL_GPIO_Init+0x244>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_GPIO_Init+0x244>
 8003856:	2300      	movs	r3, #0
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	f002 0203 	and.w	r2, r2, #3
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	4093      	lsls	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003868:	4937      	ldr	r1, [pc, #220]	; (8003948 <HAL_GPIO_Init+0x334>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003876:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <HAL_GPIO_Init+0x350>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389a:	4a32      	ldr	r2, [pc, #200]	; (8003964 <HAL_GPIO_Init+0x350>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_GPIO_Init+0x350>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_GPIO_Init+0x350>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_GPIO_Init+0x350>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <HAL_GPIO_Init+0x350>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_GPIO_Init+0x350>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003918:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_GPIO_Init+0x350>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3301      	adds	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	f47f ae78 	bne.w	8003624 <HAL_GPIO_Init+0x10>
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	40010000 	.word	0x40010000
 800394c:	48000400 	.word	0x48000400
 8003950:	48000800 	.word	0x48000800
 8003954:	48000c00 	.word	0x48000c00
 8003958:	48001000 	.word	0x48001000
 800395c:	48001400 	.word	0x48001400
 8003960:	48001800 	.word	0x48001800
 8003964:	40010400 	.word	0x40010400

08003968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003978:	787b      	ldrb	r3, [r7, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003984:	e002      	b.n	800398c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4013      	ands	r3, r2
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43d9      	mvns	r1, r3
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	400b      	ands	r3, r1
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fc46 	bl	800127c <HAL_GPIO_EXTI_Callback>
  }
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40007000 	.word	0x40007000

08003a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a26:	d130      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a28:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a34:	d038      	beq.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2232      	movs	r2, #50	; 0x32
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	0c9b      	lsrs	r3, r3, #18
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a5c:	e002      	b.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d102      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f2      	bne.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d110      	bne.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e00f      	b.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d007      	beq.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aa0:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	200003f4 	.word	0x200003f4
 8003ac0:	431bde83 	.word	0x431bde83

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e3ca      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4b97      	ldr	r3, [pc, #604]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4b94      	ldr	r3, [pc, #592]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80e4 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_RCC_OscConfig+0x4a>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f040 808b 	bne.w	8003c1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	f040 8087 	bne.w	8003c1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b0e:	4b89      	ldr	r3, [pc, #548]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e3a2      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1a      	ldr	r2, [r3, #32]
 8003b2a:	4b82      	ldr	r3, [pc, #520]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <HAL_RCC_OscConfig+0x7c>
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3e:	e005      	b.n	8003b4c <HAL_RCC_OscConfig+0x88>
 8003b40:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d223      	bcs.n	8003b98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd55 	bl	8004604 <RCC_SetFlashLatencyFromMSIRange>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e383      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b64:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a72      	ldr	r2, [pc, #456]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	f043 0308 	orr.w	r3, r3, #8
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	496d      	ldr	r1, [pc, #436]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	4968      	ldr	r1, [pc, #416]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
 8003b96:	e025      	b.n	8003be4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b98:	4b66      	ldr	r3, [pc, #408]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a65      	ldr	r2, [pc, #404]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	f043 0308 	orr.w	r3, r3, #8
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4960      	ldr	r1, [pc, #384]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	495b      	ldr	r1, [pc, #364]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fd15 	bl	8004604 <RCC_SetFlashLatencyFromMSIRange>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e343      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be4:	f000 fc4a 	bl	800447c <HAL_RCC_GetSysClockFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b52      	ldr	r3, [pc, #328]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	4950      	ldr	r1, [pc, #320]	; (8003d38 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <HAL_RCC_OscConfig+0x278>)
 8003c02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c04:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <HAL_RCC_OscConfig+0x27c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd fedf 	bl	80019cc <HAL_InitTick>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d052      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	e327      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d032      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a42      	ldr	r2, [pc, #264]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c30:	f7fd ff1c 	bl	8001a6c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c38:	f7fd ff18 	bl	8001a6c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e310      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c4a:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a36      	ldr	r2, [pc, #216]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4931      	ldr	r1, [pc, #196]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c74:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	492c      	ldr	r1, [pc, #176]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	e01a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c8a:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c96:	f7fd fee9 	bl	8001a6c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c9e:	f7fd fee5 	bl	8001a6c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e2dd      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x1da>
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d074      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x21a>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d10e      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d064      	beq.n	8003db4 <HAL_RCC_OscConfig+0x2f0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d160      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e2ba      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x24a>
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e026      	b.n	8003d5c <HAL_RCC_OscConfig+0x298>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d16:	d115      	bne.n	8003d44 <HAL_RCC_OscConfig+0x280>
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a02      	ldr	r2, [pc, #8]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	e014      	b.n	8003d5c <HAL_RCC_OscConfig+0x298>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08009820 	.word	0x08009820
 8003d3c:	200003f4 	.word	0x200003f4
 8003d40:	200003f8 	.word	0x200003f8
 8003d44:	4ba0      	ldr	r3, [pc, #640]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a9f      	ldr	r2, [pc, #636]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b9d      	ldr	r3, [pc, #628]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a9c      	ldr	r2, [pc, #624]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fd fe82 	bl	8001a6c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd fe7e 	bl	8001a6c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e276      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	4b92      	ldr	r3, [pc, #584]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2a8>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fe6e 	bl	8001a6c <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fd fe6a 	bl	8001a6c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e262      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da6:	4b88      	ldr	r3, [pc, #544]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x2d0>
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d060      	beq.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x310>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d119      	bne.n	8003e02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d116      	bne.n	8003e02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd4:	4b7c      	ldr	r3, [pc, #496]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_OscConfig+0x328>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e23f      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b76      	ldr	r3, [pc, #472]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	4973      	ldr	r1, [pc, #460]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e00:	e040      	b.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d023      	beq.n	8003e52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0a:	4b6f      	ldr	r3, [pc, #444]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6e      	ldr	r2, [pc, #440]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fd fe29 	bl	8001a6c <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1e:	f7fd fe25 	bl	8001a6c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e21d      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e30:	4b65      	ldr	r3, [pc, #404]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	4b62      	ldr	r3, [pc, #392]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	495f      	ldr	r1, [pc, #380]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	e018      	b.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e52:	4b5d      	ldr	r3, [pc, #372]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fd fe05 	bl	8001a6c <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fd fe01 	bl	8001a6c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1f9      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e98:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fde0 	bl	8001a6c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fd fddc 	bl	8001a6c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1d4      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x3ec>
 8003ed0:	e01b      	b.n	8003f0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed8:	4a3b      	ldr	r2, [pc, #236]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fd fdc3 	bl	8001a6c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fd fdbf 	bl	8001a6c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e1b7      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003efc:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ef      	bne.n	8003eea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80a6 	beq.w	8004064 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6593      	str	r3, [r2, #88]	; 0x58
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f40:	2301      	movs	r3, #1
 8003f42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_RCC_OscConfig+0x508>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d118      	bne.n	8003f82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_OscConfig+0x508>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_RCC_OscConfig+0x508>)
 8003f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fd86 	bl	8001a6c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f64:	f7fd fd82 	bl	8001a6c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e17a      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_RCC_OscConfig+0x508>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d108      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4d8>
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	4a0d      	ldr	r2, [pc, #52]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f9a:	e029      	b.n	8003ff0 <HAL_RCC_OscConfig+0x52c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d115      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x50c>
 8003fa4:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	4a03      	ldr	r2, [pc, #12]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc4:	e014      	b.n	8003ff0 <HAL_RCC_OscConfig+0x52c>
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	4b9c      	ldr	r3, [pc, #624]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	4a9b      	ldr	r2, [pc, #620]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe0:	4b98      	ldr	r3, [pc, #608]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	4a97      	ldr	r2, [pc, #604]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8003fe8:	f023 0304 	bic.w	r3, r3, #4
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fd fd38 	bl	8001a6c <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fd fd34 	bl	8001a6c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e12a      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004016:	4b8b      	ldr	r3, [pc, #556]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ed      	beq.n	8004000 <HAL_RCC_OscConfig+0x53c>
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd fd21 	bl	8001a6c <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd fd1d 	bl	8001a6c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e113      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004044:	4b7f      	ldr	r3, [pc, #508]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1ed      	bne.n	800402e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b7a      	ldr	r3, [pc, #488]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	4a79      	ldr	r2, [pc, #484]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80fe 	beq.w	800426a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	2b02      	cmp	r3, #2
 8004074:	f040 80d0 	bne.w	8004218 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004078:	4b72      	ldr	r3, [pc, #456]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0203 	and.w	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	429a      	cmp	r2, r3
 800408a:	d130      	bne.n	80040ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	3b01      	subs	r3, #1
 8004098:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d127      	bne.n	80040ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d11f      	bne.n	80040ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b8:	2a07      	cmp	r2, #7
 80040ba:	bf14      	ite	ne
 80040bc:	2201      	movne	r2, #1
 80040be:	2200      	moveq	r2, #0
 80040c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d113      	bne.n	80040ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	3b01      	subs	r3, #1
 80040e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d06e      	beq.n	80041cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d069      	beq.n	80041c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040f4:	4b53      	ldr	r3, [pc, #332]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004100:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0ad      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004110:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4b      	ldr	r2, [pc, #300]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800411c:	f7fd fca6 	bl	8001a6c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fca2 	bl	8001a6c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e09a      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004136:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004142:	4b40      	ldr	r3, [pc, #256]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	4b40      	ldr	r3, [pc, #256]	; (8004248 <HAL_RCC_OscConfig+0x784>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004152:	3a01      	subs	r2, #1
 8004154:	0112      	lsls	r2, r2, #4
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415c:	0212      	lsls	r2, r2, #8
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004164:	0852      	lsrs	r2, r2, #1
 8004166:	3a01      	subs	r2, #1
 8004168:	0552      	lsls	r2, r2, #21
 800416a:	4311      	orrs	r1, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004170:	0852      	lsrs	r2, r2, #1
 8004172:	3a01      	subs	r2, #1
 8004174:	0652      	lsls	r2, r2, #25
 8004176:	4311      	orrs	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800417c:	0912      	lsrs	r2, r2, #4
 800417e:	0452      	lsls	r2, r2, #17
 8004180:	430a      	orrs	r2, r1
 8004182:	4930      	ldr	r1, [pc, #192]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004184:	4313      	orrs	r3, r2
 8004186:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004188:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800418e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004192:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800419a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041a0:	f7fd fc64 	bl	8001a6c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd fc60 	bl	8001a6c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e058      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c6:	e050      	b.n	800426a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04f      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d148      	bne.n	800426a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80041de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041f0:	f7fd fc3c 	bl	8001a6c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fc38 	bl	8001a6c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e030      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x734>
 8004216:	e028      	b.n	800426a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d023      	beq.n	8004266 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_RCC_OscConfig+0x780>)
 8004224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fd fc1f 	bl	8001a6c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004230:	e00c      	b.n	800424c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004232:	f7fd fc1b 	bl	8001a6c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d905      	bls.n	800424c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e013      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
 8004244:	40021000 	.word	0x40021000
 8004248:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_OscConfig+0x7b0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ec      	bne.n	8004232 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_OscConfig+0x7b0>)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	4905      	ldr	r1, [pc, #20]	; (8004274 <HAL_RCC_OscConfig+0x7b0>)
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RCC_OscConfig+0x7b4>)
 8004260:	4013      	ands	r3, r2
 8004262:	60cb      	str	r3, [r1, #12]
 8004264:	e001      	b.n	800426a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	feeefffc 	.word	0xfeeefffc

0800427c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0e7      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b75      	ldr	r3, [pc, #468]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b72      	ldr	r3, [pc, #456]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	4970      	ldr	r1, [pc, #448]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b6e      	ldr	r3, [pc, #440]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0cf      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d8:	429a      	cmp	r2, r3
 80042da:	d908      	bls.n	80042ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b63      	ldr	r3, [pc, #396]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4960      	ldr	r1, [pc, #384]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04c      	beq.n	8004394 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b5a      	ldr	r3, [pc, #360]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d121      	bne.n	8004352 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0a6      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431a:	4b54      	ldr	r3, [pc, #336]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d115      	bne.n	8004352 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e09a      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004332:	4b4e      	ldr	r3, [pc, #312]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e08e      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004342:	4b4a      	ldr	r3, [pc, #296]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e086      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004352:	4b46      	ldr	r3, [pc, #280]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4943      	ldr	r1, [pc, #268]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004364:	f7fd fb82 	bl	8001a6c <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	e00a      	b.n	8004382 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fd fb7e 	bl	8001a6c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e06e      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	4b3a      	ldr	r3, [pc, #232]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 020c 	and.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	429a      	cmp	r2, r3
 8004392:	d1eb      	bne.n	800436c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d208      	bcs.n	80043c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b0:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	492b      	ldr	r1, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d210      	bcs.n	80043f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 0207 	bic.w	r2, r3, #7
 80043d8:	4923      	ldr	r1, [pc, #140]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_RCC_ClockConfig+0x1ec>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e036      	b.n	8004460 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4918      	ldr	r1, [pc, #96]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4910      	ldr	r1, [pc, #64]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004430:	f000 f824 	bl	800447c <HAL_RCC_GetSysClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	490b      	ldr	r1, [pc, #44]	; (8004470 <HAL_RCC_ClockConfig+0x1f4>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1f8>)
 800444e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1fc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd fab9 	bl	80019cc <HAL_InitTick>
 800445a:	4603      	mov	r3, r0
 800445c:	72fb      	strb	r3, [r7, #11]

  return status;
 800445e:	7afb      	ldrb	r3, [r7, #11]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40022000 	.word	0x40022000
 800446c:	40021000 	.word	0x40021000
 8004470:	08009820 	.word	0x08009820
 8004474:	200003f4 	.word	0x200003f4
 8004478:	200003f8 	.word	0x200003f8

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448a:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004494:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d121      	bne.n	80044ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d11e      	bne.n	80044ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044b0:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044bc:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044cc:	4b2d      	ldr	r3, [pc, #180]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044d8:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ec:	e00a      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d102      	bne.n	80044fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_RCC_GetSysClockFreq+0x110>)
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	e004      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004500:	4b23      	ldr	r3, [pc, #140]	; (8004590 <HAL_RCC_GetSysClockFreq+0x114>)
 8004502:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b0c      	cmp	r3, #12
 8004508:	d134      	bne.n	8004574 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d003      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0xa6>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d003      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0xac>
 8004520:	e005      	b.n	800452e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004522:	4b1a      	ldr	r3, [pc, #104]	; (800458c <HAL_RCC_GetSysClockFreq+0x110>)
 8004524:	617b      	str	r3, [r7, #20]
      break;
 8004526:	e005      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCC_GetSysClockFreq+0x114>)
 800452a:	617b      	str	r3, [r7, #20]
      break;
 800452c:	e002      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	617b      	str	r3, [r7, #20]
      break;
 8004532:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	3301      	adds	r3, #1
 8004540:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	fb03 f202 	mul.w	r2, r3, r2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_RCC_GetSysClockFreq+0x108>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	0e5b      	lsrs	r3, r3, #25
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	3301      	adds	r3, #1
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004574:	69bb      	ldr	r3, [r7, #24]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3724      	adds	r7, #36	; 0x24
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	08009838 	.word	0x08009838
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200

08004594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	200003f4 	.word	0x200003f4

080045ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045b0:	f7ff fff0 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4904      	ldr	r1, [pc, #16]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08009830 	.word	0x08009830

080045d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045dc:	f7ff ffda 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0adb      	lsrs	r3, r3, #11
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4904      	ldr	r1, [pc, #16]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000
 8004600:	08009830 	.word	0x08009830

08004604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004610:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800461c:	f7ff f9ee 	bl	80039fc <HAL_PWREx_GetVoltageRange>
 8004620:	6178      	str	r0, [r7, #20]
 8004622:	e014      	b.n	800464e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	4b22      	ldr	r3, [pc, #136]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800463c:	f7ff f9de 	bl	80039fc <HAL_PWREx_GetVoltageRange>
 8004640:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004654:	d10b      	bne.n	800466e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d919      	bls.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2ba0      	cmp	r3, #160	; 0xa0
 8004660:	d902      	bls.n	8004668 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004662:	2302      	movs	r3, #2
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e013      	b.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004668:	2301      	movs	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	e010      	b.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d902      	bls.n	800467a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004674:	2303      	movs	r3, #3
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e00a      	b.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d102      	bne.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004680:	2302      	movs	r3, #2
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	e004      	b.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d101      	bne.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800468c:	2301      	movs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f023 0207 	bic.w	r2, r3, #7
 8004698:	4909      	ldr	r1, [pc, #36]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40022000 	.word	0x40022000

080046c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046cc:	2300      	movs	r3, #0
 80046ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d0:	2300      	movs	r3, #0
 80046d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d041      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046e8:	d02a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ee:	d824      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f4:	d008      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fa:	d81e      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d010      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004706:	e018      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004708:	4b86      	ldr	r3, [pc, #536]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a85      	ldr	r2, [pc, #532]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004714:	e015      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fabb 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004726:	e00c      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3320      	adds	r3, #32
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fba6 	bl	8004e80 <RCCEx_PLLSAI2_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	74fb      	strb	r3, [r7, #19]
      break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004748:	4b76      	ldr	r3, [pc, #472]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004756:	4973      	ldr	r1, [pc, #460]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800475e:	e001      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d041      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004778:	d02a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800477a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800477e:	d824      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d008      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800478a:	d81e      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004794:	d010      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004796:	e018      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004798:	4b62      	ldr	r3, [pc, #392]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a61      	ldr	r2, [pc, #388]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047a4:	e015      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fa73 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047b6:	e00c      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3320      	adds	r3, #32
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fb5e 	bl	8004e80 <RCCEx_PLLSAI2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047c8:	e003      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	74fb      	strb	r3, [r7, #19]
      break;
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047d8:	4b52      	ldr	r3, [pc, #328]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e6:	494f      	ldr	r1, [pc, #316]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047ee:	e001      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a0 	beq.w	8004942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004802:	2300      	movs	r3, #0
 8004804:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481c:	4b41      	ldr	r3, [pc, #260]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004820:	4a40      	ldr	r2, [pc, #256]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004826:	6593      	str	r3, [r2, #88]	; 0x58
 8004828:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004834:	2301      	movs	r3, #1
 8004836:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004838:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a3a      	ldr	r2, [pc, #232]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004844:	f7fd f912 	bl	8001a6c <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800484a:	e009      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484c:	f7fd f90e 	bl	8001a6c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d902      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	74fb      	strb	r3, [r7, #19]
        break;
 800485e:	e005      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004860:	4b31      	ldr	r3, [pc, #196]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d15c      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01f      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	d019      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004890:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800489c:	4b21      	ldr	r3, [pc, #132]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a20      	ldr	r2, [pc, #128]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fd f8cd 	bl	8001a6c <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d4:	e00b      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fd f8c9 	bl	8001a6c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d902      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	74fb      	strb	r3, [r7, #19]
            break;
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ec      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10c      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	4904      	ldr	r1, [pc, #16]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800491a:	e009      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	74bb      	strb	r3, [r7, #18]
 8004920:	e006      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004930:	7c7b      	ldrb	r3, [r7, #17]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004936:	4b9e      	ldr	r3, [pc, #632]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	4a9d      	ldr	r2, [pc, #628]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004940:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800494e:	4b98      	ldr	r3, [pc, #608]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f023 0203 	bic.w	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	4994      	ldr	r1, [pc, #592]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004970:	4b8f      	ldr	r3, [pc, #572]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f023 020c 	bic.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	498c      	ldr	r1, [pc, #560]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004992:	4b87      	ldr	r3, [pc, #540]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	4983      	ldr	r1, [pc, #524]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049b4:	4b7e      	ldr	r3, [pc, #504]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	497b      	ldr	r1, [pc, #492]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049d6:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	4972      	ldr	r1, [pc, #456]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f8:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	496a      	ldr	r1, [pc, #424]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1a:	4b65      	ldr	r3, [pc, #404]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	4961      	ldr	r1, [pc, #388]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a3c:	4b5c      	ldr	r3, [pc, #368]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	4959      	ldr	r1, [pc, #356]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a5e:	4b54      	ldr	r3, [pc, #336]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	4950      	ldr	r1, [pc, #320]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a80:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	4948      	ldr	r1, [pc, #288]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aa2:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	493f      	ldr	r1, [pc, #252]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d028      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	4937      	ldr	r1, [pc, #220]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae4:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aee:	60d3      	str	r3, [r2, #12]
 8004af0:	e011      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f8c8 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d028      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	491f      	ldr	r1, [pc, #124]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b40:	d106      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4c:	60d3      	str	r3, [r2, #12]
 8004b4e:	e011      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f899 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02b      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8e:	4908      	ldr	r1, [pc, #32]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b9e:	d109      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a02      	ldr	r2, [pc, #8]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	60d3      	str	r3, [r2, #12]
 8004bac:	e014      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f867 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d02f      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be4:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf2:	4928      	ldr	r1, [pc, #160]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c02:	d10d      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f844 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	74bb      	strb	r3, [r7, #18]
 8004c1e:	e011      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3320      	adds	r3, #32
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f925 	bl	8004e80 <RCCEx_PLLSAI2_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5e:	490d      	ldr	r1, [pc, #52]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c82:	4904      	ldr	r1, [pc, #16]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000

08004c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ca6:	4b75      	ldr	r3, [pc, #468]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d018      	beq.n	8004ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cb2:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0203 	and.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d10d      	bne.n	8004cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cca:	4b6c      	ldr	r3, [pc, #432]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d047      	beq.n	8004d6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
 8004ce2:	e044      	b.n	8004d6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d018      	beq.n	8004d1e <RCCEx_PLLSAI1_Config+0x86>
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d825      	bhi.n	8004d3c <RCCEx_PLLSAI1_Config+0xa4>
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d002      	beq.n	8004cfa <RCCEx_PLLSAI1_Config+0x62>
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d009      	beq.n	8004d0c <RCCEx_PLLSAI1_Config+0x74>
 8004cf8:	e020      	b.n	8004d3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cfa:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11d      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0a:	e01a      	b.n	8004d42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d0c:	4b5b      	ldr	r3, [pc, #364]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d116      	bne.n	8004d46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d1c:	e013      	b.n	8004d46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d1e:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d2a:	4b54      	ldr	r3, [pc, #336]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d40:	e004      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10d      	bne.n	8004d6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d52:	4b4a      	ldr	r3, [pc, #296]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	430b      	orrs	r3, r1
 8004d68:	4944      	ldr	r1, [pc, #272]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d17d      	bne.n	8004e70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d74:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a40      	ldr	r2, [pc, #256]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fc fe74 	bl	8001a6c <HAL_GetTick>
 8004d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d86:	e009      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d88:	f7fc fe70 	bl	8001a6c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d902      	bls.n	8004d9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	73fb      	strb	r3, [r7, #15]
        break;
 8004d9a:	e005      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d9c:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ef      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d160      	bne.n	8004e70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d111      	bne.n	8004dd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6892      	ldr	r2, [r2, #8]
 8004dc4:	0211      	lsls	r1, r2, #8
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68d2      	ldr	r2, [r2, #12]
 8004dca:	0912      	lsrs	r2, r2, #4
 8004dcc:	0452      	lsls	r2, r2, #17
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	492a      	ldr	r1, [pc, #168]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]
 8004dd6:	e027      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d112      	bne.n	8004e04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dde:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004de6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6892      	ldr	r2, [r2, #8]
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6912      	ldr	r2, [r2, #16]
 8004df4:	0852      	lsrs	r2, r2, #1
 8004df6:	3a01      	subs	r2, #1
 8004df8:	0552      	lsls	r2, r2, #21
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	491f      	ldr	r1, [pc, #124]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	610b      	str	r3, [r1, #16]
 8004e02:	e011      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6892      	ldr	r2, [r2, #8]
 8004e14:	0211      	lsls	r1, r2, #8
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6952      	ldr	r2, [r2, #20]
 8004e1a:	0852      	lsrs	r2, r2, #1
 8004e1c:	3a01      	subs	r2, #1
 8004e1e:	0652      	lsls	r2, r2, #25
 8004e20:	430a      	orrs	r2, r1
 8004e22:	4916      	ldr	r1, [pc, #88]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fc fe1a 	bl	8001a6c <HAL_GetTick>
 8004e38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e3a:	e009      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e3c:	f7fc fe16 	bl	8001a6c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d902      	bls.n	8004e50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e4e:	e005      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ef      	beq.n	8004e3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	4904      	ldr	r1, [pc, #16]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000

08004e80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0203 	and.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d10d      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
       ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eb2:	4b61      	ldr	r3, [pc, #388]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d047      	beq.n	8004f56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
 8004eca:	e044      	b.n	8004f56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d018      	beq.n	8004f06 <RCCEx_PLLSAI2_Config+0x86>
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d825      	bhi.n	8004f24 <RCCEx_PLLSAI2_Config+0xa4>
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d002      	beq.n	8004ee2 <RCCEx_PLLSAI2_Config+0x62>
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d009      	beq.n	8004ef4 <RCCEx_PLLSAI2_Config+0x74>
 8004ee0:	e020      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee2:	4b55      	ldr	r3, [pc, #340]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d11d      	bne.n	8004f2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef2:	e01a      	b.n	8004f2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef4:	4b50      	ldr	r3, [pc, #320]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d116      	bne.n	8004f2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f04:	e013      	b.n	8004f2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f06:	4b4c      	ldr	r3, [pc, #304]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f12:	4b49      	ldr	r3, [pc, #292]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f22:	e006      	b.n	8004f32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e004      	b.n	8004f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e002      	b.n	8004f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f3a:	4b3f      	ldr	r3, [pc, #252]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	4939      	ldr	r1, [pc, #228]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d167      	bne.n	800502c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f5c:	4b36      	ldr	r3, [pc, #216]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a35      	ldr	r2, [pc, #212]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f68:	f7fc fd80 	bl	8001a6c <HAL_GetTick>
 8004f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f6e:	e009      	b.n	8004f84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f70:	f7fc fd7c 	bl	8001a6c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d902      	bls.n	8004f84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	73fb      	strb	r3, [r7, #15]
        break;
 8004f82:	e005      	b.n	8004f90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f84:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ef      	bne.n	8004f70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d14a      	bne.n	800502c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d111      	bne.n	8004fc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f9c:	4b26      	ldr	r3, [pc, #152]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6892      	ldr	r2, [r2, #8]
 8004fac:	0211      	lsls	r1, r2, #8
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68d2      	ldr	r2, [r2, #12]
 8004fb2:	0912      	lsrs	r2, r2, #4
 8004fb4:	0452      	lsls	r2, r2, #17
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	491f      	ldr	r1, [pc, #124]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	614b      	str	r3, [r1, #20]
 8004fbe:	e011      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6892      	ldr	r2, [r2, #8]
 8004fd0:	0211      	lsls	r1, r2, #8
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6912      	ldr	r2, [r2, #16]
 8004fd6:	0852      	lsrs	r2, r2, #1
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	0652      	lsls	r2, r2, #25
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	4916      	ldr	r1, [pc, #88]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fd3c 	bl	8001a6c <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ff6:	e009      	b.n	800500c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ff8:	f7fc fd38 	bl	8001a6c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d902      	bls.n	800500c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	73fb      	strb	r3, [r7, #15]
          break;
 800500a:	e005      	b.n	8005018 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ef      	beq.n	8004ff8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	4904      	ldr	r1, [pc, #16]	; (8005038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005028:	4313      	orrs	r3, r2
 800502a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000

0800503c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e049      	b.n	80050e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc fa96 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 ff9a 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e047      	b.n	8005194 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <HAL_TIM_Base_Start+0xb4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01d      	beq.n	8005152 <HAL_TIM_Base_Start+0x66>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d018      	beq.n	8005152 <HAL_TIM_Base_Start+0x66>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_TIM_Base_Start+0xb8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_TIM_Base_Start+0x66>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_TIM_Base_Start+0xbc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_TIM_Base_Start+0x66>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_TIM_Base_Start+0xc0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_TIM_Base_Start+0x66>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_TIM_Base_Start+0xc4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_TIM_Base_Start+0x66>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_TIM_Base_Start+0xc8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d115      	bne.n	800517e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <HAL_TIM_Base_Start+0xcc>)
 800515a:	4013      	ands	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b06      	cmp	r3, #6
 8005162:	d015      	beq.n	8005190 <HAL_TIM_Base_Start+0xa4>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516a:	d011      	beq.n	8005190 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	e008      	b.n	8005190 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e000      	b.n	8005192 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40013400 	.word	0x40013400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	00010007 	.word	0x00010007

080051bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10f      	bne.n	80051f4 <HAL_TIM_Base_Stop+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	f240 4344 	movw	r3, #1092	; 0x444
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_Base_Stop+0x38>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e04f      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d018      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_TIM_Base_Start_IT+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d115      	bne.n	80052ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800528a:	4013      	ands	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b06      	cmp	r3, #6
 8005292:	d015      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529a:	d011      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	e008      	b.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e000      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	00010007 	.word	0x00010007

080052ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e049      	b.n	8005392 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc f91e 	bl	8001554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 fe42 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_TIM_PWM_Start+0x24>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e03c      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d109      	bne.n	80053da <HAL_TIM_PWM_Start+0x3e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e02f      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d109      	bne.n	80053f4 <HAL_TIM_PWM_Start+0x58>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e022      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d109      	bne.n	800540e <HAL_TIM_PWM_Start+0x72>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	bf14      	ite	ne
 8005406:	2301      	movne	r3, #1
 8005408:	2300      	moveq	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e015      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b10      	cmp	r3, #16
 8005412:	d109      	bne.n	8005428 <HAL_TIM_PWM_Start+0x8c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e008      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e09c      	b.n	800557c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_TIM_PWM_Start+0xb6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005450:	e023      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d104      	bne.n	8005462 <HAL_TIM_PWM_Start+0xc6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005460:	e01b      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d104      	bne.n	8005472 <HAL_TIM_PWM_Start+0xd6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005470:	e013      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Start+0xe6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005480:	e00b      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b10      	cmp	r3, #16
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Start+0xf6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005490:	e003      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f990 	bl	80067c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a35      	ldr	r2, [pc, #212]	; (8005584 <HAL_TIM_PWM_Start+0x1e8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_TIM_PWM_Start+0x13e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_TIM_PWM_Start+0x1ec>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIM_PWM_Start+0x13e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a32      	ldr	r2, [pc, #200]	; (800558c <HAL_TIM_PWM_Start+0x1f0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIM_PWM_Start+0x13e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a31      	ldr	r2, [pc, #196]	; (8005590 <HAL_TIM_PWM_Start+0x1f4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIM_PWM_Start+0x13e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2f      	ldr	r2, [pc, #188]	; (8005594 <HAL_TIM_PWM_Start+0x1f8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d101      	bne.n	80054de <HAL_TIM_PWM_Start+0x142>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <HAL_TIM_PWM_Start+0x144>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <HAL_TIM_PWM_Start+0x1e8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01d      	beq.n	800553a <HAL_TIM_PWM_Start+0x19e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005506:	d018      	beq.n	800553a <HAL_TIM_PWM_Start+0x19e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a22      	ldr	r2, [pc, #136]	; (8005598 <HAL_TIM_PWM_Start+0x1fc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <HAL_TIM_PWM_Start+0x19e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a21      	ldr	r2, [pc, #132]	; (800559c <HAL_TIM_PWM_Start+0x200>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIM_PWM_Start+0x19e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <HAL_TIM_PWM_Start+0x204>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIM_PWM_Start+0x19e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_TIM_PWM_Start+0x1ec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIM_PWM_Start+0x19e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a15      	ldr	r2, [pc, #84]	; (800558c <HAL_TIM_PWM_Start+0x1f0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d115      	bne.n	8005566 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <HAL_TIM_PWM_Start+0x208>)
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b06      	cmp	r3, #6
 800554a:	d015      	beq.n	8005578 <HAL_TIM_PWM_Start+0x1dc>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005552:	d011      	beq.n	8005578 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	e008      	b.n	8005578 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e000      	b.n	800557a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	00010007 	.word	0x00010007

080055a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f904 	bl	80067c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3e      	ldr	r2, [pc, #248]	; (80056c0 <HAL_TIM_PWM_Stop+0x118>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIM_PWM_Stop+0x4a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3d      	ldr	r2, [pc, #244]	; (80056c4 <HAL_TIM_PWM_Stop+0x11c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIM_PWM_Stop+0x4a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3b      	ldr	r2, [pc, #236]	; (80056c8 <HAL_TIM_PWM_Stop+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIM_PWM_Stop+0x4a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <HAL_TIM_PWM_Stop+0x124>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_PWM_Stop+0x4a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a38      	ldr	r2, [pc, #224]	; (80056d0 <HAL_TIM_PWM_Stop+0x128>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d101      	bne.n	80055f6 <HAL_TIM_PWM_Stop+0x4e>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <HAL_TIM_PWM_Stop+0x50>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d017      	beq.n	800562c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	f241 1311 	movw	r3, #4369	; 0x1111
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <HAL_TIM_PWM_Stop+0x84>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	f240 4344 	movw	r3, #1092	; 0x444
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_TIM_PWM_Stop+0x84>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800562a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	f241 1311 	movw	r3, #4369	; 0x1111
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10f      	bne.n	800565c <HAL_TIM_PWM_Stop+0xb4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	f240 4344 	movw	r3, #1092	; 0x444
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d107      	bne.n	800565c <HAL_TIM_PWM_Stop+0xb4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <HAL_TIM_PWM_Stop+0xc4>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800566a:	e023      	b.n	80056b4 <HAL_TIM_PWM_Stop+0x10c>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b04      	cmp	r3, #4
 8005670:	d104      	bne.n	800567c <HAL_TIM_PWM_Stop+0xd4>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800567a:	e01b      	b.n	80056b4 <HAL_TIM_PWM_Stop+0x10c>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d104      	bne.n	800568c <HAL_TIM_PWM_Stop+0xe4>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568a:	e013      	b.n	80056b4 <HAL_TIM_PWM_Stop+0x10c>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d104      	bne.n	800569c <HAL_TIM_PWM_Stop+0xf4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800569a:	e00b      	b.n	80056b4 <HAL_TIM_PWM_Stop+0x10c>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d104      	bne.n	80056ac <HAL_TIM_PWM_Stop+0x104>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056aa:	e003      	b.n	80056b4 <HAL_TIM_PWM_Stop+0x10c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start_IT+0x28>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e03c      	b.n	8005776 <HAL_TIM_PWM_Start_IT+0xa2>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d109      	bne.n	8005716 <HAL_TIM_PWM_Start_IT+0x42>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e02f      	b.n	8005776 <HAL_TIM_PWM_Start_IT+0xa2>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start_IT+0x5c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e022      	b.n	8005776 <HAL_TIM_PWM_Start_IT+0xa2>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b0c      	cmp	r3, #12
 8005734:	d109      	bne.n	800574a <HAL_TIM_PWM_Start_IT+0x76>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e015      	b.n	8005776 <HAL_TIM_PWM_Start_IT+0xa2>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b10      	cmp	r3, #16
 800574e:	d109      	bne.n	8005764 <HAL_TIM_PWM_Start_IT+0x90>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e008      	b.n	8005776 <HAL_TIM_PWM_Start_IT+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e0e7      	b.n	800594e <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_TIM_PWM_Start_IT+0xba>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800578c:	e023      	b.n	80057d6 <HAL_TIM_PWM_Start_IT+0x102>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d104      	bne.n	800579e <HAL_TIM_PWM_Start_IT+0xca>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579c:	e01b      	b.n	80057d6 <HAL_TIM_PWM_Start_IT+0x102>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start_IT+0xda>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	e013      	b.n	80057d6 <HAL_TIM_PWM_Start_IT+0x102>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	d104      	bne.n	80057be <HAL_TIM_PWM_Start_IT+0xea>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057bc:	e00b      	b.n	80057d6 <HAL_TIM_PWM_Start_IT+0x102>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start_IT+0xfa>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	e003      	b.n	80057d6 <HAL_TIM_PWM_Start_IT+0x102>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	d841      	bhi.n	8005860 <HAL_TIM_PWM_Start_IT+0x18c>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <HAL_TIM_PWM_Start_IT+0x110>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005861 	.word	0x08005861
 80057ec:	08005861 	.word	0x08005861
 80057f0:	08005861 	.word	0x08005861
 80057f4:	0800582b 	.word	0x0800582b
 80057f8:	08005861 	.word	0x08005861
 80057fc:	08005861 	.word	0x08005861
 8005800:	08005861 	.word	0x08005861
 8005804:	0800583d 	.word	0x0800583d
 8005808:	08005861 	.word	0x08005861
 800580c:	08005861 	.word	0x08005861
 8005810:	08005861 	.word	0x08005861
 8005814:	0800584f 	.word	0x0800584f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0202 	orr.w	r2, r2, #2
 8005826:	60da      	str	r2, [r3, #12]
      break;
 8005828:	e01d      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0204 	orr.w	r2, r2, #4
 8005838:	60da      	str	r2, [r3, #12]
      break;
 800583a:	e014      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0208 	orr.w	r2, r2, #8
 800584a:	60da      	str	r2, [r3, #12]
      break;
 800584c:	e00b      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0210 	orr.w	r2, r2, #16
 800585c:	60da      	str	r2, [r3, #12]
      break;
 800585e:	e002      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      break;
 8005864:	bf00      	nop
  }

  if (status == HAL_OK)
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d16f      	bne.n	800594c <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 ffa7 	bl	80067c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a36      	ldr	r2, [pc, #216]	; (8005958 <HAL_TIM_PWM_Start_IT+0x284>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <HAL_TIM_PWM_Start_IT+0x1d8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a34      	ldr	r2, [pc, #208]	; (800595c <HAL_TIM_PWM_Start_IT+0x288>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_TIM_PWM_Start_IT+0x1d8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_TIM_PWM_Start_IT+0x1d8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_TIM_PWM_Start_IT+0x290>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_PWM_Start_IT+0x1d8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_TIM_PWM_Start_IT+0x294>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_PWM_Start_IT+0x1dc>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_TIM_PWM_Start_IT+0x1de>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a23      	ldr	r2, [pc, #140]	; (8005958 <HAL_TIM_PWM_Start_IT+0x284>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d01d      	beq.n	800590c <HAL_TIM_PWM_Start_IT+0x238>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d8:	d018      	beq.n	800590c <HAL_TIM_PWM_Start_IT+0x238>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a23      	ldr	r2, [pc, #140]	; (800596c <HAL_TIM_PWM_Start_IT+0x298>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d013      	beq.n	800590c <HAL_TIM_PWM_Start_IT+0x238>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a21      	ldr	r2, [pc, #132]	; (8005970 <HAL_TIM_PWM_Start_IT+0x29c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00e      	beq.n	800590c <HAL_TIM_PWM_Start_IT+0x238>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a20      	ldr	r2, [pc, #128]	; (8005974 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_TIM_PWM_Start_IT+0x238>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a17      	ldr	r2, [pc, #92]	; (800595c <HAL_TIM_PWM_Start_IT+0x288>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_TIM_PWM_Start_IT+0x238>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a16      	ldr	r2, [pc, #88]	; (8005960 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d115      	bne.n	8005938 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005914:	4013      	ands	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b06      	cmp	r3, #6
 800591c:	d015      	beq.n	800594a <HAL_TIM_PWM_Start_IT+0x276>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d011      	beq.n	800594a <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0201 	orr.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005936:	e008      	b.n	800594a <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	e000      	b.n	800594c <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40013400 	.word	0x40013400
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	00010007 	.word	0x00010007

0800597c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d122      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d11b      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0202 	mvn.w	r2, #2
 80059a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fae3 	bl	8005f8a <HAL_TIM_IC_CaptureCallback>
 80059c4:	e005      	b.n	80059d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fad5 	bl	8005f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fb fc2b 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d122      	bne.n	8005a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d11b      	bne.n	8005a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0204 	mvn.w	r2, #4
 80059fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fab9 	bl	8005f8a <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 faab 	bl	8005f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb fc01 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d122      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d11b      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0208 	mvn.w	r2, #8
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2204      	movs	r2, #4
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa8f 	bl	8005f8a <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa81 	bl	8005f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fb fbd7 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d122      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0210 	mvn.w	r2, #16
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa65 	bl	8005f8a <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa57 	bl	8005f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fb fbad 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10e      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d107      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0201 	mvn.w	r2, #1
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fb fbca 	bl	8001294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d10e      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d107      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 ff06 	bl	8006938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3a:	d10e      	bne.n	8005b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d107      	bne.n	8005b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fef9 	bl	800694c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d10e      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d107      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa0c 	bl	8005f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d10e      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d107      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0220 	mvn.w	r2, #32
 8005baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 feb9 	bl	8006924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0ff      	b.n	8005dda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b14      	cmp	r3, #20
 8005be6:	f200 80f0 	bhi.w	8005dca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005dcb 	.word	0x08005dcb
 8005bf8:	08005dcb 	.word	0x08005dcb
 8005bfc:	08005dcb 	.word	0x08005dcb
 8005c00:	08005c85 	.word	0x08005c85
 8005c04:	08005dcb 	.word	0x08005dcb
 8005c08:	08005dcb 	.word	0x08005dcb
 8005c0c:	08005dcb 	.word	0x08005dcb
 8005c10:	08005cc7 	.word	0x08005cc7
 8005c14:	08005dcb 	.word	0x08005dcb
 8005c18:	08005dcb 	.word	0x08005dcb
 8005c1c:	08005dcb 	.word	0x08005dcb
 8005c20:	08005d07 	.word	0x08005d07
 8005c24:	08005dcb 	.word	0x08005dcb
 8005c28:	08005dcb 	.word	0x08005dcb
 8005c2c:	08005dcb 	.word	0x08005dcb
 8005c30:	08005d49 	.word	0x08005d49
 8005c34:	08005dcb 	.word	0x08005dcb
 8005c38:	08005dcb 	.word	0x08005dcb
 8005c3c:	08005dcb 	.word	0x08005dcb
 8005c40:	08005d89 	.word	0x08005d89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fa4c 	bl	80060e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0208 	orr.w	r2, r2, #8
 8005c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0204 	bic.w	r2, r2, #4
 8005c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6999      	ldr	r1, [r3, #24]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	619a      	str	r2, [r3, #24]
      break;
 8005c82:	e0a5      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fabc 	bl	8006208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6999      	ldr	r1, [r3, #24]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	021a      	lsls	r2, r3, #8
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	619a      	str	r2, [r3, #24]
      break;
 8005cc4:	e084      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fb25 	bl	800631c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0208 	orr.w	r2, r2, #8
 8005ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0204 	bic.w	r2, r2, #4
 8005cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69d9      	ldr	r1, [r3, #28]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	61da      	str	r2, [r3, #28]
      break;
 8005d04:	e064      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fb8d 	bl	800642c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69d9      	ldr	r1, [r3, #28]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	021a      	lsls	r2, r3, #8
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	61da      	str	r2, [r3, #28]
      break;
 8005d46:	e043      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fbd6 	bl	8006500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0208 	orr.w	r2, r2, #8
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0204 	bic.w	r2, r2, #4
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d86:	e023      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fc1a 	bl	80065c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	021a      	lsls	r2, r3, #8
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dc8:	e002      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIM_ConfigClockSource+0x1c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e0b6      	b.n	8005f6e <HAL_TIM_ConfigClockSource+0x18a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3c:	d03e      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0xd8>
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e42:	f200 8087 	bhi.w	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4a:	f000 8086 	beq.w	8005f5a <HAL_TIM_ConfigClockSource+0x176>
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d87f      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e54:	2b70      	cmp	r3, #112	; 0x70
 8005e56:	d01a      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0xaa>
 8005e58:	2b70      	cmp	r3, #112	; 0x70
 8005e5a:	d87b      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e5c:	2b60      	cmp	r3, #96	; 0x60
 8005e5e:	d050      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x11e>
 8005e60:	2b60      	cmp	r3, #96	; 0x60
 8005e62:	d877      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e64:	2b50      	cmp	r3, #80	; 0x50
 8005e66:	d03c      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0xfe>
 8005e68:	2b50      	cmp	r3, #80	; 0x50
 8005e6a:	d873      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d058      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x13e>
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d86f      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d064      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x15e>
 8005e78:	2b30      	cmp	r3, #48	; 0x30
 8005e7a:	d86b      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d060      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x15e>
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d867      	bhi.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d05c      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x15e>
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d05a      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x15e>
 8005e8c:	e062      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6899      	ldr	r1, [r3, #8]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f000 fc73 	bl	8006788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	609a      	str	r2, [r3, #8]
      break;
 8005eba:	e04f      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6899      	ldr	r1, [r3, #8]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f000 fc5c 	bl	8006788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ede:	609a      	str	r2, [r3, #8]
      break;
 8005ee0:	e03c      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 fbd0 	bl	8006694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2150      	movs	r1, #80	; 0x50
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fc29 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8005f00:	e02c      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6859      	ldr	r1, [r3, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f000 fbef 	bl	80066f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2160      	movs	r1, #96	; 0x60
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fc19 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8005f20:	e01c      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f000 fbb0 	bl	8006694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2140      	movs	r1, #64	; 0x40
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fc09 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8005f40:	e00c      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f000 fc00 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8005f52:	e003      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	e000      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a40      	ldr	r2, [pc, #256]	; (80060c8 <TIM_Base_SetConfig+0x114>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3d      	ldr	r2, [pc, #244]	; (80060cc <TIM_Base_SetConfig+0x118>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3c      	ldr	r2, [pc, #240]	; (80060d0 <TIM_Base_SetConfig+0x11c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3b      	ldr	r2, [pc, #236]	; (80060d4 <TIM_Base_SetConfig+0x120>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3a      	ldr	r2, [pc, #232]	; (80060d8 <TIM_Base_SetConfig+0x124>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <TIM_Base_SetConfig+0x114>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d01b      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <TIM_Base_SetConfig+0x118>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2b      	ldr	r2, [pc, #172]	; (80060d0 <TIM_Base_SetConfig+0x11c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2a      	ldr	r2, [pc, #168]	; (80060d4 <TIM_Base_SetConfig+0x120>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a29      	ldr	r2, [pc, #164]	; (80060d8 <TIM_Base_SetConfig+0x124>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a28      	ldr	r2, [pc, #160]	; (80060dc <TIM_Base_SetConfig+0x128>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <TIM_Base_SetConfig+0x12c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_Base_SetConfig+0x9a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <TIM_Base_SetConfig+0x130>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d108      	bne.n	8006060 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <TIM_Base_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_Base_SetConfig+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <TIM_Base_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_Base_SetConfig+0xf8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a11      	ldr	r2, [pc, #68]	; (80060dc <TIM_Base_SetConfig+0x128>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_Base_SetConfig+0xf8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a10      	ldr	r2, [pc, #64]	; (80060e0 <TIM_Base_SetConfig+0x12c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_Base_SetConfig+0xf8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a0f      	ldr	r2, [pc, #60]	; (80060e4 <TIM_Base_SetConfig+0x130>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d103      	bne.n	80060b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	615a      	str	r2, [r3, #20]
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40013400 	.word	0x40013400
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40014400 	.word	0x40014400
 80060e4:	40014800 	.word	0x40014800

080060e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 0302 	bic.w	r3, r3, #2
 8006134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a2c      	ldr	r2, [pc, #176]	; (80061f4 <TIM_OC1_SetConfig+0x10c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00f      	beq.n	8006168 <TIM_OC1_SetConfig+0x80>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a2b      	ldr	r2, [pc, #172]	; (80061f8 <TIM_OC1_SetConfig+0x110>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00b      	beq.n	8006168 <TIM_OC1_SetConfig+0x80>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a2a      	ldr	r2, [pc, #168]	; (80061fc <TIM_OC1_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d007      	beq.n	8006168 <TIM_OC1_SetConfig+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a29      	ldr	r2, [pc, #164]	; (8006200 <TIM_OC1_SetConfig+0x118>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC1_SetConfig+0x80>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a28      	ldr	r2, [pc, #160]	; (8006204 <TIM_OC1_SetConfig+0x11c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d10c      	bne.n	8006182 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f023 0308 	bic.w	r3, r3, #8
 800616e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 0304 	bic.w	r3, r3, #4
 8006180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <TIM_OC1_SetConfig+0x10c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00f      	beq.n	80061aa <TIM_OC1_SetConfig+0xc2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <TIM_OC1_SetConfig+0x110>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00b      	beq.n	80061aa <TIM_OC1_SetConfig+0xc2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a19      	ldr	r2, [pc, #100]	; (80061fc <TIM_OC1_SetConfig+0x114>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d007      	beq.n	80061aa <TIM_OC1_SetConfig+0xc2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a18      	ldr	r2, [pc, #96]	; (8006200 <TIM_OC1_SetConfig+0x118>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_OC1_SetConfig+0xc2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a17      	ldr	r2, [pc, #92]	; (8006204 <TIM_OC1_SetConfig+0x11c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d111      	bne.n	80061ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800

08006208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0210 	bic.w	r2, r3, #16
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a28      	ldr	r2, [pc, #160]	; (8006308 <TIM_OC2_SetConfig+0x100>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC2_SetConfig+0x6c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <TIM_OC2_SetConfig+0x104>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10d      	bne.n	8006290 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <TIM_OC2_SetConfig+0x100>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00f      	beq.n	80062b8 <TIM_OC2_SetConfig+0xb0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1c      	ldr	r2, [pc, #112]	; (800630c <TIM_OC2_SetConfig+0x104>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_OC2_SetConfig+0xb0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <TIM_OC2_SetConfig+0x108>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_OC2_SetConfig+0xb0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1a      	ldr	r2, [pc, #104]	; (8006314 <TIM_OC2_SetConfig+0x10c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC2_SetConfig+0xb0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a19      	ldr	r2, [pc, #100]	; (8006318 <TIM_OC2_SetConfig+0x110>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d113      	bne.n	80062e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40013400 	.word	0x40013400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a27      	ldr	r2, [pc, #156]	; (8006418 <TIM_OC3_SetConfig+0xfc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_OC3_SetConfig+0x6a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a26      	ldr	r2, [pc, #152]	; (800641c <TIM_OC3_SetConfig+0x100>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10d      	bne.n	80063a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <TIM_OC3_SetConfig+0xfc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_OC3_SetConfig+0xae>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a1b      	ldr	r2, [pc, #108]	; (800641c <TIM_OC3_SetConfig+0x100>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_OC3_SetConfig+0xae>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <TIM_OC3_SetConfig+0x104>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_OC3_SetConfig+0xae>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <TIM_OC3_SetConfig+0x108>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_OC3_SetConfig+0xae>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a18      	ldr	r2, [pc, #96]	; (8006428 <TIM_OC3_SetConfig+0x10c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d113      	bne.n	80063f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40014000 	.word	0x40014000
 8006424:	40014400 	.word	0x40014400
 8006428:	40014800 	.word	0x40014800

0800642c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	031b      	lsls	r3, r3, #12
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <TIM_OC4_SetConfig+0xc0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00f      	beq.n	80064b0 <TIM_OC4_SetConfig+0x84>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <TIM_OC4_SetConfig+0xc4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_OC4_SetConfig+0x84>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <TIM_OC4_SetConfig+0xc8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_OC4_SetConfig+0x84>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <TIM_OC4_SetConfig+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_OC4_SetConfig+0x84>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <TIM_OC4_SetConfig+0xd0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d109      	bne.n	80064c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	019b      	lsls	r3, r3, #6
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800

08006500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <TIM_OC5_SetConfig+0xb4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_OC5_SetConfig+0x7a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <TIM_OC5_SetConfig+0xb8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_OC5_SetConfig+0x7a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a15      	ldr	r2, [pc, #84]	; (80065bc <TIM_OC5_SetConfig+0xbc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_OC5_SetConfig+0x7a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <TIM_OC5_SetConfig+0xc0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC5_SetConfig+0x7a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <TIM_OC5_SetConfig+0xc4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d109      	bne.n	800658e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800660e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	051b      	lsls	r3, r3, #20
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a18      	ldr	r2, [pc, #96]	; (8006680 <TIM_OC6_SetConfig+0xb8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00f      	beq.n	8006644 <TIM_OC6_SetConfig+0x7c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <TIM_OC6_SetConfig+0xbc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00b      	beq.n	8006644 <TIM_OC6_SetConfig+0x7c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a16      	ldr	r2, [pc, #88]	; (8006688 <TIM_OC6_SetConfig+0xc0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_OC6_SetConfig+0x7c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <TIM_OC6_SetConfig+0xc4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC6_SetConfig+0x7c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a14      	ldr	r2, [pc, #80]	; (8006690 <TIM_OC6_SetConfig+0xc8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d109      	bne.n	8006658 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	029b      	lsls	r3, r3, #10
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800

08006694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 030a 	bic.w	r3, r3, #10
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f023 0210 	bic.w	r2, r3, #16
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800671c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800672e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	f043 0307 	orr.w	r3, r3, #7
 8006774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	021a      	lsls	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2201      	movs	r2, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	401a      	ands	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006828:	2302      	movs	r3, #2
 800682a:	e068      	b.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a2e      	ldr	r2, [pc, #184]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2d      	ldr	r2, [pc, #180]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689e:	d018      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a13      	ldr	r2, [pc, #76]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10c      	bne.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40012c00 	.word	0x40012c00
 8006910:	40013400 	.word	0x40013400
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40014000 	.word	0x40014000

08006924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e040      	b.n	80069f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa fe80 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2224      	movs	r2, #36	; 0x24
 800698c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fc94 	bl	80072cc <UART_SetConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 ff40 	bl	800783c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 ffc7 	bl	8007980 <UART_CheckIdleState>
 80069f2:	4603      	mov	r3, r0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	f040 8082 	bne.w	8006b1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_UART_Transmit+0x26>
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e07a      	b.n	8006b1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UART_Transmit+0x38>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e073      	b.n	8006b1c <HAL_UART_Transmit+0x120>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2221      	movs	r2, #33	; 0x21
 8006a48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a4a:	f7fb f80f 	bl	8001a6c <HAL_GetTick>
 8006a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a68:	d108      	bne.n	8006a7c <HAL_UART_Transmit+0x80>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	e003      	b.n	8006a84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a8c:	e02d      	b.n	8006aea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2200      	movs	r2, #0
 8006a96:	2180      	movs	r1, #128	; 0x80
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 ffba 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e039      	b.n	8006b1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aba:	b292      	uxth	r2, r2
 8006abc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	e008      	b.n	8006ad8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	b292      	uxth	r2, r2
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1cb      	bne.n	8006a8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	2140      	movs	r1, #64	; 0x40
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 ff86 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e005      	b.n	8006b1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	4613      	mov	r3, r2
 8006b32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	f040 80bf 	bne.w	8006cbc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_UART_Receive+0x26>
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e0b7      	b.n	8006cbe <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Receive+0x38>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e0b0      	b.n	8006cbe <HAL_UART_Receive+0x19a>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2222      	movs	r2, #34	; 0x22
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b78:	f7fa ff78 	bl	8001a6c <HAL_GetTick>
 8006b7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	d10e      	bne.n	8006bb6 <HAL_UART_Receive+0x92>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d105      	bne.n	8006bac <HAL_UART_Receive+0x88>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006baa:	e02d      	b.n	8006c08 <HAL_UART_Receive+0xe4>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bb4:	e028      	b.n	8006c08 <HAL_UART_Receive+0xe4>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_UART_Receive+0xb6>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <HAL_UART_Receive+0xac>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	22ff      	movs	r2, #255	; 0xff
 8006bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bce:	e01b      	b.n	8006c08 <HAL_UART_Receive+0xe4>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	227f      	movs	r2, #127	; 0x7f
 8006bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bd8:	e016      	b.n	8006c08 <HAL_UART_Receive+0xe4>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be2:	d10d      	bne.n	8006c00 <HAL_UART_Receive+0xdc>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <HAL_UART_Receive+0xd2>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	227f      	movs	r2, #127	; 0x7f
 8006bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bf4:	e008      	b.n	8006c08 <HAL_UART_Receive+0xe4>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	223f      	movs	r2, #63	; 0x3f
 8006bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bfe:	e003      	b.n	8006c08 <HAL_UART_Receive+0xe4>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	d108      	bne.n	8006c2c <HAL_UART_Receive+0x108>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e003      	b.n	8006c34 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c3c:	e033      	b.n	8006ca6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2200      	movs	r2, #0
 8006c46:	2120      	movs	r1, #32
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fee2 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e032      	b.n	8006cbe <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10c      	bne.n	8006c78 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	8a7b      	ldrh	r3, [r7, #18]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	3302      	adds	r3, #2
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	e00d      	b.n	8006c94 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	8a7b      	ldrh	r3, [r7, #18]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4013      	ands	r3, r2
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3301      	adds	r3, #1
 8006c92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1c5      	bne.n	8006c3e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e000      	b.n	8006cbe <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
  }
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3720      	adds	r7, #32
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b0ba      	sub	sp, #232	; 0xe8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006cf2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d115      	bne.n	8006d30 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00f      	beq.n	8006d30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 82a6 	beq.w	8007272 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
      }
      return;
 8006d2e:	e2a0      	b.n	8007272 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8117 	beq.w	8006f68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d4a:	4b85      	ldr	r3, [pc, #532]	; (8006f60 <HAL_UART_IRQHandler+0x298>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 810a 	beq.w	8006f68 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d011      	beq.n	8006d84 <HAL_UART_IRQHandler+0xbc>
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2201      	movs	r2, #1
 8006d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d7a:	f043 0201 	orr.w	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d011      	beq.n	8006db4 <HAL_UART_IRQHandler+0xec>
 8006d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2202      	movs	r2, #2
 8006da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006daa:	f043 0204 	orr.w	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d011      	beq.n	8006de4 <HAL_UART_IRQHandler+0x11c>
 8006dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dda:	f043 0202 	orr.w	r2, r3, #2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d105      	bne.n	8006e08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e16:	f043 0208 	orr.w	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d012      	beq.n	8006e52 <HAL_UART_IRQHandler+0x18a>
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00c      	beq.n	8006e52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 820c 	beq.w	8007276 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d005      	beq.n	8006eaa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04f      	beq.n	8006f4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fe75 	bl	8007b9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d141      	bne.n	8006f42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1d9      	bne.n	8006ebe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d013      	beq.n	8006f3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f16:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <HAL_UART_IRQHandler+0x29c>)
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fc fb37 	bl	8003592 <HAL_DMA_Abort_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d017      	beq.n	8006f5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f38:	e00f      	b.n	8006f5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9b0 	bl	80072a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e00b      	b.n	8006f5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9ac 	bl	80072a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	e007      	b.n	8006f5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f9a8 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006f58:	e18d      	b.n	8007276 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f5a:	bf00      	nop
    return;
 8006f5c:	e18b      	b.n	8007276 <HAL_UART_IRQHandler+0x5ae>
 8006f5e:	bf00      	nop
 8006f60:	04000120 	.word	0x04000120
 8006f64:	08007c61 	.word	0x08007c61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	f040 8146 	bne.w	80071fe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 813f 	beq.w	80071fe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8138 	beq.w	80071fe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2210      	movs	r2, #16
 8006f94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	f040 80b4 	bne.w	800710e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 815f 	beq.w	800727a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	f080 8157 	bcs.w	800727a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f040 8085 	bne.w	80070f2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007016:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800701e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800702a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1da      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3308      	adds	r3, #8
 8007052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007056:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800705a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800705e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e1      	bne.n	8007032 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800707e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007092:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007094:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e3      	bne.n	800706e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c2:	f023 0310 	bic.w	r3, r3, #16
 80070c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e4      	bne.n	80070b2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fc fa12 	bl	8003516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f8d4 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800710c:	e0b5      	b.n	800727a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800711a:	b29b      	uxth	r3, r3
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80a7 	beq.w	800727e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 80a2 	beq.w	800727e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800714e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800715c:	647b      	str	r3, [r7, #68]	; 0x44
 800715e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800716a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e4      	bne.n	800713a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3308      	adds	r3, #8
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	623b      	str	r3, [r7, #32]
   return(result);
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007194:	633a      	str	r2, [r7, #48]	; 0x30
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800719a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e3      	bne.n	8007170 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0310 	bic.w	r3, r3, #16
 80071ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	69b9      	ldr	r1, [r7, #24]
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	617b      	str	r3, [r7, #20]
   return(result);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e4      	bne.n	80071ba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f85c 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071fc:	e03f      	b.n	800727e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00e      	beq.n	8007228 <HAL_UART_IRQHandler+0x560>
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800721e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fd5d 	bl	8007ce0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007226:	e02d      	b.n	8007284 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01c      	beq.n	8007282 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
    }
    return;
 8007250:	e017      	b.n	8007282 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d012      	beq.n	8007284 <HAL_UART_IRQHandler+0x5bc>
 800725e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00c      	beq.n	8007284 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd0e 	bl	8007c8c <UART_EndTransmit_IT>
    return;
 8007270:	e008      	b.n	8007284 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007272:	bf00      	nop
 8007274:	e006      	b.n	8007284 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007276:	bf00      	nop
 8007278:	e004      	b.n	8007284 <HAL_UART_IRQHandler+0x5bc>
      return;
 800727a:	bf00      	nop
 800727c:	e002      	b.n	8007284 <HAL_UART_IRQHandler+0x5bc>
      return;
 800727e:	bf00      	nop
 8007280:	e000      	b.n	8007284 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007282:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007284:	37e8      	adds	r7, #232	; 0xe8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop

0800728c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d0:	b08a      	sub	sp, #40	; 0x28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4ba4      	ldr	r3, [pc, #656]	; (800758c <UART_SetConfig+0x2c0>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007304:	430b      	orrs	r3, r1
 8007306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a99      	ldr	r2, [pc, #612]	; (8007590 <UART_SetConfig+0x2c4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007334:	4313      	orrs	r3, r2
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	430a      	orrs	r2, r1
 800734a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a90      	ldr	r2, [pc, #576]	; (8007594 <UART_SetConfig+0x2c8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d126      	bne.n	80073a4 <UART_SetConfig+0xd8>
 8007356:	4b90      	ldr	r3, [pc, #576]	; (8007598 <UART_SetConfig+0x2cc>)
 8007358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	2b03      	cmp	r3, #3
 8007362:	d81b      	bhi.n	800739c <UART_SetConfig+0xd0>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0xa0>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	0800737d 	.word	0x0800737d
 8007370:	0800738d 	.word	0x0800738d
 8007374:	08007385 	.word	0x08007385
 8007378:	08007395 	.word	0x08007395
 800737c:	2301      	movs	r3, #1
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007382:	e116      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007384:	2302      	movs	r3, #2
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738a:	e112      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800738c:	2304      	movs	r3, #4
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007392:	e10e      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007394:	2308      	movs	r3, #8
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739a:	e10a      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a2:	e106      	b.n	80075b2 <UART_SetConfig+0x2e6>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a7c      	ldr	r2, [pc, #496]	; (800759c <UART_SetConfig+0x2d0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d138      	bne.n	8007420 <UART_SetConfig+0x154>
 80073ae:	4b7a      	ldr	r3, [pc, #488]	; (8007598 <UART_SetConfig+0x2cc>)
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b4:	f003 030c 	and.w	r3, r3, #12
 80073b8:	2b0c      	cmp	r3, #12
 80073ba:	d82d      	bhi.n	8007418 <UART_SetConfig+0x14c>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0xf8>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073f9 	.word	0x080073f9
 80073c8:	08007419 	.word	0x08007419
 80073cc:	08007419 	.word	0x08007419
 80073d0:	08007419 	.word	0x08007419
 80073d4:	08007409 	.word	0x08007409
 80073d8:	08007419 	.word	0x08007419
 80073dc:	08007419 	.word	0x08007419
 80073e0:	08007419 	.word	0x08007419
 80073e4:	08007401 	.word	0x08007401
 80073e8:	08007419 	.word	0x08007419
 80073ec:	08007419 	.word	0x08007419
 80073f0:	08007419 	.word	0x08007419
 80073f4:	08007411 	.word	0x08007411
 80073f8:	2300      	movs	r3, #0
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fe:	e0d8      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007400:	2302      	movs	r3, #2
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007406:	e0d4      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740e:	e0d0      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007416:	e0cc      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741e:	e0c8      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a5e      	ldr	r2, [pc, #376]	; (80075a0 <UART_SetConfig+0x2d4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d125      	bne.n	8007476 <UART_SetConfig+0x1aa>
 800742a:	4b5b      	ldr	r3, [pc, #364]	; (8007598 <UART_SetConfig+0x2cc>)
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007430:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007434:	2b30      	cmp	r3, #48	; 0x30
 8007436:	d016      	beq.n	8007466 <UART_SetConfig+0x19a>
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d818      	bhi.n	800746e <UART_SetConfig+0x1a2>
 800743c:	2b20      	cmp	r3, #32
 800743e:	d00a      	beq.n	8007456 <UART_SetConfig+0x18a>
 8007440:	2b20      	cmp	r3, #32
 8007442:	d814      	bhi.n	800746e <UART_SetConfig+0x1a2>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <UART_SetConfig+0x182>
 8007448:	2b10      	cmp	r3, #16
 800744a:	d008      	beq.n	800745e <UART_SetConfig+0x192>
 800744c:	e00f      	b.n	800746e <UART_SetConfig+0x1a2>
 800744e:	2300      	movs	r3, #0
 8007450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007454:	e0ad      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007456:	2302      	movs	r3, #2
 8007458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745c:	e0a9      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800745e:	2304      	movs	r3, #4
 8007460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007464:	e0a5      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007466:	2308      	movs	r3, #8
 8007468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746c:	e0a1      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800746e:	2310      	movs	r3, #16
 8007470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007474:	e09d      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a4a      	ldr	r2, [pc, #296]	; (80075a4 <UART_SetConfig+0x2d8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d125      	bne.n	80074cc <UART_SetConfig+0x200>
 8007480:	4b45      	ldr	r3, [pc, #276]	; (8007598 <UART_SetConfig+0x2cc>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800748a:	2bc0      	cmp	r3, #192	; 0xc0
 800748c:	d016      	beq.n	80074bc <UART_SetConfig+0x1f0>
 800748e:	2bc0      	cmp	r3, #192	; 0xc0
 8007490:	d818      	bhi.n	80074c4 <UART_SetConfig+0x1f8>
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d00a      	beq.n	80074ac <UART_SetConfig+0x1e0>
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d814      	bhi.n	80074c4 <UART_SetConfig+0x1f8>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <UART_SetConfig+0x1d8>
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d008      	beq.n	80074b4 <UART_SetConfig+0x1e8>
 80074a2:	e00f      	b.n	80074c4 <UART_SetConfig+0x1f8>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e082      	b.n	80075b2 <UART_SetConfig+0x2e6>
 80074ac:	2302      	movs	r3, #2
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	e07e      	b.n	80075b2 <UART_SetConfig+0x2e6>
 80074b4:	2304      	movs	r3, #4
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ba:	e07a      	b.n	80075b2 <UART_SetConfig+0x2e6>
 80074bc:	2308      	movs	r3, #8
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c2:	e076      	b.n	80075b2 <UART_SetConfig+0x2e6>
 80074c4:	2310      	movs	r3, #16
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	e072      	b.n	80075b2 <UART_SetConfig+0x2e6>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a35      	ldr	r2, [pc, #212]	; (80075a8 <UART_SetConfig+0x2dc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d12a      	bne.n	800752c <UART_SetConfig+0x260>
 80074d6:	4b30      	ldr	r3, [pc, #192]	; (8007598 <UART_SetConfig+0x2cc>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e4:	d01a      	beq.n	800751c <UART_SetConfig+0x250>
 80074e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ea:	d81b      	bhi.n	8007524 <UART_SetConfig+0x258>
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d00c      	beq.n	800750c <UART_SetConfig+0x240>
 80074f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f6:	d815      	bhi.n	8007524 <UART_SetConfig+0x258>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <UART_SetConfig+0x238>
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007500:	d008      	beq.n	8007514 <UART_SetConfig+0x248>
 8007502:	e00f      	b.n	8007524 <UART_SetConfig+0x258>
 8007504:	2300      	movs	r3, #0
 8007506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750a:	e052      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800750c:	2302      	movs	r3, #2
 800750e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007512:	e04e      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751a:	e04a      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007522:	e046      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752a:	e042      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a17      	ldr	r2, [pc, #92]	; (8007590 <UART_SetConfig+0x2c4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d13a      	bne.n	80075ac <UART_SetConfig+0x2e0>
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <UART_SetConfig+0x2cc>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007544:	d01a      	beq.n	800757c <UART_SetConfig+0x2b0>
 8007546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754a:	d81b      	bhi.n	8007584 <UART_SetConfig+0x2b8>
 800754c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007550:	d00c      	beq.n	800756c <UART_SetConfig+0x2a0>
 8007552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007556:	d815      	bhi.n	8007584 <UART_SetConfig+0x2b8>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <UART_SetConfig+0x298>
 800755c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007560:	d008      	beq.n	8007574 <UART_SetConfig+0x2a8>
 8007562:	e00f      	b.n	8007584 <UART_SetConfig+0x2b8>
 8007564:	2300      	movs	r3, #0
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e022      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800756c:	2302      	movs	r3, #2
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e01e      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757a:	e01a      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007582:	e016      	b.n	80075b2 <UART_SetConfig+0x2e6>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758a:	e012      	b.n	80075b2 <UART_SetConfig+0x2e6>
 800758c:	efff69f3 	.word	0xefff69f3
 8007590:	40008000 	.word	0x40008000
 8007594:	40013800 	.word	0x40013800
 8007598:	40021000 	.word	0x40021000
 800759c:	40004400 	.word	0x40004400
 80075a0:	40004800 	.word	0x40004800
 80075a4:	40004c00 	.word	0x40004c00
 80075a8:	40005000 	.word	0x40005000
 80075ac:	2310      	movs	r3, #16
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a9f      	ldr	r2, [pc, #636]	; (8007834 <UART_SetConfig+0x568>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d17a      	bne.n	80076b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d824      	bhi.n	800760e <UART_SetConfig+0x342>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x300>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	0800760f 	.word	0x0800760f
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	0800760f 	.word	0x0800760f
 80075dc:	080075ff 	.word	0x080075ff
 80075e0:	0800760f 	.word	0x0800760f
 80075e4:	0800760f 	.word	0x0800760f
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	08007607 	.word	0x08007607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f0:	f7fc ffdc 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80075f4:	61f8      	str	r0, [r7, #28]
        break;
 80075f6:	e010      	b.n	800761a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f8:	4b8f      	ldr	r3, [pc, #572]	; (8007838 <UART_SetConfig+0x56c>)
 80075fa:	61fb      	str	r3, [r7, #28]
        break;
 80075fc:	e00d      	b.n	800761a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fe:	f7fc ff3d 	bl	800447c <HAL_RCC_GetSysClockFreq>
 8007602:	61f8      	str	r0, [r7, #28]
        break;
 8007604:	e009      	b.n	800761a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760a:	61fb      	str	r3, [r7, #28]
        break;
 800760c:	e005      	b.n	800761a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007618:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80fb 	beq.w	8007818 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	429a      	cmp	r2, r3
 8007630:	d305      	bcc.n	800763e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	429a      	cmp	r2, r3
 800763c:	d903      	bls.n	8007646 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007644:	e0e8      	b.n	8007818 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2200      	movs	r2, #0
 800764a:	461c      	mov	r4, r3
 800764c:	4615      	mov	r5, r2
 800764e:	f04f 0200 	mov.w	r2, #0
 8007652:	f04f 0300 	mov.w	r3, #0
 8007656:	022b      	lsls	r3, r5, #8
 8007658:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800765c:	0222      	lsls	r2, r4, #8
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6849      	ldr	r1, [r1, #4]
 8007662:	0849      	lsrs	r1, r1, #1
 8007664:	2000      	movs	r0, #0
 8007666:	4688      	mov	r8, r1
 8007668:	4681      	mov	r9, r0
 800766a:	eb12 0a08 	adds.w	sl, r2, r8
 800766e:	eb43 0b09 	adc.w	fp, r3, r9
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	603b      	str	r3, [r7, #0]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007680:	4650      	mov	r0, sl
 8007682:	4659      	mov	r1, fp
 8007684:	f7f8 fe0c 	bl	80002a0 <__aeabi_uldivmod>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4613      	mov	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007696:	d308      	bcc.n	80076aa <UART_SetConfig+0x3de>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769e:	d204      	bcs.n	80076aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	60da      	str	r2, [r3, #12]
 80076a8:	e0b6      	b.n	8007818 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076b0:	e0b2      	b.n	8007818 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ba:	d15e      	bne.n	800777a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80076bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d828      	bhi.n	8007716 <UART_SetConfig+0x44a>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <UART_SetConfig+0x400>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	08007701 	.word	0x08007701
 80076d8:	08007717 	.word	0x08007717
 80076dc:	08007707 	.word	0x08007707
 80076e0:	08007717 	.word	0x08007717
 80076e4:	08007717 	.word	0x08007717
 80076e8:	08007717 	.word	0x08007717
 80076ec:	0800770f 	.word	0x0800770f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f0:	f7fc ff5c 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80076f4:	61f8      	str	r0, [r7, #28]
        break;
 80076f6:	e014      	b.n	8007722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f8:	f7fc ff6e 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 80076fc:	61f8      	str	r0, [r7, #28]
        break;
 80076fe:	e010      	b.n	8007722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007700:	4b4d      	ldr	r3, [pc, #308]	; (8007838 <UART_SetConfig+0x56c>)
 8007702:	61fb      	str	r3, [r7, #28]
        break;
 8007704:	e00d      	b.n	8007722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007706:	f7fc feb9 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800770a:	61f8      	str	r0, [r7, #28]
        break;
 800770c:	e009      	b.n	8007722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007712:	61fb      	str	r3, [r7, #28]
        break;
 8007714:	e005      	b.n	8007722 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d077      	beq.n	8007818 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	005a      	lsls	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	441a      	add	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	fbb2 f3f3 	udiv	r3, r2, r3
 800773c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b0f      	cmp	r3, #15
 8007742:	d916      	bls.n	8007772 <UART_SetConfig+0x4a6>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774a:	d212      	bcs.n	8007772 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	b29b      	uxth	r3, r3
 8007750:	f023 030f 	bic.w	r3, r3, #15
 8007754:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	085b      	lsrs	r3, r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	b29a      	uxth	r2, r3
 8007762:	8afb      	ldrh	r3, [r7, #22]
 8007764:	4313      	orrs	r3, r2
 8007766:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	8afa      	ldrh	r2, [r7, #22]
 800776e:	60da      	str	r2, [r3, #12]
 8007770:	e052      	b.n	8007818 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007778:	e04e      	b.n	8007818 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800777a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800777e:	2b08      	cmp	r3, #8
 8007780:	d827      	bhi.n	80077d2 <UART_SetConfig+0x506>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x4bc>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077d3 	.word	0x080077d3
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fc fefe 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80077b0:	61f8      	str	r0, [r7, #28]
        break;
 80077b2:	e014      	b.n	80077de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fc ff10 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 80077b8:	61f8      	str	r0, [r7, #28]
        break;
 80077ba:	e010      	b.n	80077de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <UART_SetConfig+0x56c>)
 80077be:	61fb      	str	r3, [r7, #28]
        break;
 80077c0:	e00d      	b.n	80077de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fc fe5b 	bl	800447c <HAL_RCC_GetSysClockFreq>
 80077c6:	61f8      	str	r0, [r7, #28]
        break;
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	61fb      	str	r3, [r7, #28]
        break;
 80077d0:	e005      	b.n	80077de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077dc:	bf00      	nop
    }

    if (pclk != 0U)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d019      	beq.n	8007818 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	085a      	lsrs	r2, r3, #1
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	441a      	add	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b0f      	cmp	r3, #15
 80077fc:	d909      	bls.n	8007812 <UART_SetConfig+0x546>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d205      	bcs.n	8007812 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60da      	str	r2, [r3, #12]
 8007810:	e002      	b.n	8007818 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007828:	4618      	mov	r0, r3
 800782a:	3728      	adds	r7, #40	; 0x28
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007832:	bf00      	nop
 8007834:	40008000 	.word	0x40008000
 8007838:	00f42400 	.word	0x00f42400

0800783c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01a      	beq.n	8007952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793a:	d10a      	bne.n	8007952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	605a      	str	r2, [r3, #4]
  }
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af02      	add	r7, sp, #8
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007990:	f7fa f86c 	bl	8001a6c <HAL_GetTick>
 8007994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d10e      	bne.n	80079c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f82d 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e023      	b.n	8007a0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d10e      	bne.n	80079ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f817 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e00d      	b.n	8007a0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b09c      	sub	sp, #112	; 0x70
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a22:	e0a5      	b.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	f000 80a1 	beq.w	8007b70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2e:	f7fa f81d 	bl	8001a6c <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d302      	bcc.n	8007a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d13e      	bne.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a58:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e067      	b.n	8007b92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d04f      	beq.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ade:	d147      	bne.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e6      	bne.n	8007aea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b3c:	623a      	str	r2, [r7, #32]
 8007b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	6a3a      	ldr	r2, [r7, #32]
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e5      	bne.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e010      	b.n	8007b92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69da      	ldr	r2, [r3, #28]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	f43f af4a 	beq.w	8007a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3770      	adds	r7, #112	; 0x70
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b095      	sub	sp, #84	; 0x54
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e6      	bne.n	8007ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e5      	bne.n	8007bd4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d118      	bne.n	8007c42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f023 0310 	bic.w	r3, r3, #16
 8007c24:	647b      	str	r3, [r7, #68]	; 0x44
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e6      	bne.n	8007c10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007c54:	bf00      	nop
 8007c56:	3754      	adds	r7, #84	; 0x54
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fb0e 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6979      	ldr	r1, [r7, #20]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fada 	bl	800728c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd8:	bf00      	nop
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <__errno>:
 8007cf4:	4b01      	ldr	r3, [pc, #4]	; (8007cfc <__errno+0x8>)
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	20000400 	.word	0x20000400

08007d00 <__libc_init_array>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4d0d      	ldr	r5, [pc, #52]	; (8007d38 <__libc_init_array+0x38>)
 8007d04:	4c0d      	ldr	r4, [pc, #52]	; (8007d3c <__libc_init_array+0x3c>)
 8007d06:	1b64      	subs	r4, r4, r5
 8007d08:	10a4      	asrs	r4, r4, #2
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	42a6      	cmp	r6, r4
 8007d0e:	d109      	bne.n	8007d24 <__libc_init_array+0x24>
 8007d10:	4d0b      	ldr	r5, [pc, #44]	; (8007d40 <__libc_init_array+0x40>)
 8007d12:	4c0c      	ldr	r4, [pc, #48]	; (8007d44 <__libc_init_array+0x44>)
 8007d14:	f001 fd26 	bl	8009764 <_init>
 8007d18:	1b64      	subs	r4, r4, r5
 8007d1a:	10a4      	asrs	r4, r4, #2
 8007d1c:	2600      	movs	r6, #0
 8007d1e:	42a6      	cmp	r6, r4
 8007d20:	d105      	bne.n	8007d2e <__libc_init_array+0x2e>
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d28:	4798      	blx	r3
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	e7ee      	b.n	8007d0c <__libc_init_array+0xc>
 8007d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d32:	4798      	blx	r3
 8007d34:	3601      	adds	r6, #1
 8007d36:	e7f2      	b.n	8007d1e <__libc_init_array+0x1e>
 8007d38:	08009a24 	.word	0x08009a24
 8007d3c:	08009a24 	.word	0x08009a24
 8007d40:	08009a24 	.word	0x08009a24
 8007d44:	08009a28 	.word	0x08009a28

08007d48 <memset>:
 8007d48:	4402      	add	r2, r0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d100      	bne.n	8007d52 <memset+0xa>
 8007d50:	4770      	bx	lr
 8007d52:	f803 1b01 	strb.w	r1, [r3], #1
 8007d56:	e7f9      	b.n	8007d4c <memset+0x4>

08007d58 <iprintf>:
 8007d58:	b40f      	push	{r0, r1, r2, r3}
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <iprintf+0x2c>)
 8007d5c:	b513      	push	{r0, r1, r4, lr}
 8007d5e:	681c      	ldr	r4, [r3, #0]
 8007d60:	b124      	cbz	r4, 8007d6c <iprintf+0x14>
 8007d62:	69a3      	ldr	r3, [r4, #24]
 8007d64:	b913      	cbnz	r3, 8007d6c <iprintf+0x14>
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 faf2 	bl	8008350 <__sinit>
 8007d6c:	ab05      	add	r3, sp, #20
 8007d6e:	9a04      	ldr	r2, [sp, #16]
 8007d70:	68a1      	ldr	r1, [r4, #8]
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fedf 	bl	8008b38 <_vfiprintf_r>
 8007d7a:	b002      	add	sp, #8
 8007d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d80:	b004      	add	sp, #16
 8007d82:	4770      	bx	lr
 8007d84:	20000400 	.word	0x20000400

08007d88 <_puts_r>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	460e      	mov	r6, r1
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	b118      	cbz	r0, 8007d98 <_puts_r+0x10>
 8007d90:	6983      	ldr	r3, [r0, #24]
 8007d92:	b90b      	cbnz	r3, 8007d98 <_puts_r+0x10>
 8007d94:	f000 fadc 	bl	8008350 <__sinit>
 8007d98:	69ab      	ldr	r3, [r5, #24]
 8007d9a:	68ac      	ldr	r4, [r5, #8]
 8007d9c:	b913      	cbnz	r3, 8007da4 <_puts_r+0x1c>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 fad6 	bl	8008350 <__sinit>
 8007da4:	4b2c      	ldr	r3, [pc, #176]	; (8007e58 <_puts_r+0xd0>)
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d120      	bne.n	8007dec <_puts_r+0x64>
 8007daa:	686c      	ldr	r4, [r5, #4]
 8007dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dae:	07db      	lsls	r3, r3, #31
 8007db0:	d405      	bmi.n	8007dbe <_puts_r+0x36>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	0598      	lsls	r0, r3, #22
 8007db6:	d402      	bmi.n	8007dbe <_puts_r+0x36>
 8007db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dba:	f000 fb67 	bl	800848c <__retarget_lock_acquire_recursive>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	0719      	lsls	r1, r3, #28
 8007dc2:	d51d      	bpl.n	8007e00 <_puts_r+0x78>
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	b1db      	cbz	r3, 8007e00 <_puts_r+0x78>
 8007dc8:	3e01      	subs	r6, #1
 8007dca:	68a3      	ldr	r3, [r4, #8]
 8007dcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	60a3      	str	r3, [r4, #8]
 8007dd4:	bb39      	cbnz	r1, 8007e26 <_puts_r+0x9e>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da38      	bge.n	8007e4c <_puts_r+0xc4>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	210a      	movs	r1, #10
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 f8ba 	bl	8007f58 <__swbuf_r>
 8007de4:	3001      	adds	r0, #1
 8007de6:	d011      	beq.n	8007e0c <_puts_r+0x84>
 8007de8:	250a      	movs	r5, #10
 8007dea:	e011      	b.n	8007e10 <_puts_r+0x88>
 8007dec:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <_puts_r+0xd4>)
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d101      	bne.n	8007df6 <_puts_r+0x6e>
 8007df2:	68ac      	ldr	r4, [r5, #8]
 8007df4:	e7da      	b.n	8007dac <_puts_r+0x24>
 8007df6:	4b1a      	ldr	r3, [pc, #104]	; (8007e60 <_puts_r+0xd8>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	bf08      	it	eq
 8007dfc:	68ec      	ldreq	r4, [r5, #12]
 8007dfe:	e7d5      	b.n	8007dac <_puts_r+0x24>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f90c 	bl	8008020 <__swsetup_r>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d0dd      	beq.n	8007dc8 <_puts_r+0x40>
 8007e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d405      	bmi.n	8007e22 <_puts_r+0x9a>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	059b      	lsls	r3, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_puts_r+0x9a>
 8007e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e1e:	f000 fb36 	bl	800848e <__retarget_lock_release_recursive>
 8007e22:	4628      	mov	r0, r5
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da04      	bge.n	8007e34 <_puts_r+0xac>
 8007e2a:	69a2      	ldr	r2, [r4, #24]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	dc06      	bgt.n	8007e3e <_puts_r+0xb6>
 8007e30:	290a      	cmp	r1, #10
 8007e32:	d004      	beq.n	8007e3e <_puts_r+0xb6>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	6022      	str	r2, [r4, #0]
 8007e3a:	7019      	strb	r1, [r3, #0]
 8007e3c:	e7c5      	b.n	8007dca <_puts_r+0x42>
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4628      	mov	r0, r5
 8007e42:	f000 f889 	bl	8007f58 <__swbuf_r>
 8007e46:	3001      	adds	r0, #1
 8007e48:	d1bf      	bne.n	8007dca <_puts_r+0x42>
 8007e4a:	e7df      	b.n	8007e0c <_puts_r+0x84>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	250a      	movs	r5, #10
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	701d      	strb	r5, [r3, #0]
 8007e56:	e7db      	b.n	8007e10 <_puts_r+0x88>
 8007e58:	0800988c 	.word	0x0800988c
 8007e5c:	080098ac 	.word	0x080098ac
 8007e60:	0800986c 	.word	0x0800986c

08007e64 <puts>:
 8007e64:	4b02      	ldr	r3, [pc, #8]	; (8007e70 <puts+0xc>)
 8007e66:	4601      	mov	r1, r0
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f7ff bf8d 	b.w	8007d88 <_puts_r>
 8007e6e:	bf00      	nop
 8007e70:	20000400 	.word	0x20000400

08007e74 <siscanf>:
 8007e74:	b40e      	push	{r1, r2, r3}
 8007e76:	b510      	push	{r4, lr}
 8007e78:	b09f      	sub	sp, #124	; 0x7c
 8007e7a:	ac21      	add	r4, sp, #132	; 0x84
 8007e7c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e80:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e84:	9201      	str	r2, [sp, #4]
 8007e86:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	9008      	str	r0, [sp, #32]
 8007e8e:	f7f8 f9a9 	bl	80001e4 <strlen>
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <siscanf+0x50>)
 8007e94:	9005      	str	r0, [sp, #20]
 8007e96:	9009      	str	r0, [sp, #36]	; 0x24
 8007e98:	930d      	str	r3, [sp, #52]	; 0x34
 8007e9a:	480b      	ldr	r0, [pc, #44]	; (8007ec8 <siscanf+0x54>)
 8007e9c:	9a01      	ldr	r2, [sp, #4]
 8007e9e:	6800      	ldr	r0, [r0, #0]
 8007ea0:	9403      	str	r4, [sp, #12]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9311      	str	r3, [sp, #68]	; 0x44
 8007ea6:	9316      	str	r3, [sp, #88]	; 0x58
 8007ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007eac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007eb0:	a904      	add	r1, sp, #16
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	f000 fc9e 	bl	80087f4 <__ssvfiscanf_r>
 8007eb8:	b01f      	add	sp, #124	; 0x7c
 8007eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ebe:	b003      	add	sp, #12
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	08007eef 	.word	0x08007eef
 8007ec8:	20000400 	.word	0x20000400

08007ecc <__sread>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	460c      	mov	r4, r1
 8007ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed4:	f001 fa46 	bl	8009364 <_read_r>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	bfab      	itete	ge
 8007edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ede:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee0:	181b      	addge	r3, r3, r0
 8007ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ee6:	bfac      	ite	ge
 8007ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eea:	81a3      	strhlt	r3, [r4, #12]
 8007eec:	bd10      	pop	{r4, pc}

08007eee <__seofread>:
 8007eee:	2000      	movs	r0, #0
 8007ef0:	4770      	bx	lr

08007ef2 <__swrite>:
 8007ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	898b      	ldrh	r3, [r1, #12]
 8007efa:	05db      	lsls	r3, r3, #23
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	4616      	mov	r6, r2
 8007f02:	d505      	bpl.n	8007f10 <__swrite+0x1e>
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	2302      	movs	r3, #2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f000 fac0 	bl	8008490 <_lseek_r>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	463b      	mov	r3, r7
 8007f20:	4628      	mov	r0, r5
 8007f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	f000 b869 	b.w	8007ffc <_write_r>

08007f2a <__sseek>:
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f32:	f000 faad 	bl	8008490 <_lseek_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	bf15      	itete	ne
 8007f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f46:	81a3      	strheq	r3, [r4, #12]
 8007f48:	bf18      	it	ne
 8007f4a:	81a3      	strhne	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__sclose>:
 8007f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f52:	f000 b8d3 	b.w	80080fc <_close_r>
	...

08007f58 <__swbuf_r>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	460e      	mov	r6, r1
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	4605      	mov	r5, r0
 8007f60:	b118      	cbz	r0, 8007f6a <__swbuf_r+0x12>
 8007f62:	6983      	ldr	r3, [r0, #24]
 8007f64:	b90b      	cbnz	r3, 8007f6a <__swbuf_r+0x12>
 8007f66:	f000 f9f3 	bl	8008350 <__sinit>
 8007f6a:	4b21      	ldr	r3, [pc, #132]	; (8007ff0 <__swbuf_r+0x98>)
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	d12b      	bne.n	8007fc8 <__swbuf_r+0x70>
 8007f70:	686c      	ldr	r4, [r5, #4]
 8007f72:	69a3      	ldr	r3, [r4, #24]
 8007f74:	60a3      	str	r3, [r4, #8]
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	071a      	lsls	r2, r3, #28
 8007f7a:	d52f      	bpl.n	8007fdc <__swbuf_r+0x84>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	b36b      	cbz	r3, 8007fdc <__swbuf_r+0x84>
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	6820      	ldr	r0, [r4, #0]
 8007f84:	1ac0      	subs	r0, r0, r3
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	b2f6      	uxtb	r6, r6
 8007f8a:	4283      	cmp	r3, r0
 8007f8c:	4637      	mov	r7, r6
 8007f8e:	dc04      	bgt.n	8007f9a <__swbuf_r+0x42>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f948 	bl	8008228 <_fflush_r>
 8007f98:	bb30      	cbnz	r0, 8007fe8 <__swbuf_r+0x90>
 8007f9a:	68a3      	ldr	r3, [r4, #8]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	6022      	str	r2, [r4, #0]
 8007fa6:	701e      	strb	r6, [r3, #0]
 8007fa8:	6963      	ldr	r3, [r4, #20]
 8007faa:	3001      	adds	r0, #1
 8007fac:	4283      	cmp	r3, r0
 8007fae:	d004      	beq.n	8007fba <__swbuf_r+0x62>
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	07db      	lsls	r3, r3, #31
 8007fb4:	d506      	bpl.n	8007fc4 <__swbuf_r+0x6c>
 8007fb6:	2e0a      	cmp	r6, #10
 8007fb8:	d104      	bne.n	8007fc4 <__swbuf_r+0x6c>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 f933 	bl	8008228 <_fflush_r>
 8007fc2:	b988      	cbnz	r0, 8007fe8 <__swbuf_r+0x90>
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <__swbuf_r+0x9c>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d101      	bne.n	8007fd2 <__swbuf_r+0x7a>
 8007fce:	68ac      	ldr	r4, [r5, #8]
 8007fd0:	e7cf      	b.n	8007f72 <__swbuf_r+0x1a>
 8007fd2:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <__swbuf_r+0xa0>)
 8007fd4:	429c      	cmp	r4, r3
 8007fd6:	bf08      	it	eq
 8007fd8:	68ec      	ldreq	r4, [r5, #12]
 8007fda:	e7ca      	b.n	8007f72 <__swbuf_r+0x1a>
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 f81e 	bl	8008020 <__swsetup_r>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d0cb      	beq.n	8007f80 <__swbuf_r+0x28>
 8007fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8007fec:	e7ea      	b.n	8007fc4 <__swbuf_r+0x6c>
 8007fee:	bf00      	nop
 8007ff0:	0800988c 	.word	0x0800988c
 8007ff4:	080098ac 	.word	0x080098ac
 8007ff8:	0800986c 	.word	0x0800986c

08007ffc <_write_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_write_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7f8 ffa2 	bl	8000f54 <_write>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_write_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_write_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000758 	.word	0x20000758

08008020 <__swsetup_r>:
 8008020:	4b32      	ldr	r3, [pc, #200]	; (80080ec <__swsetup_r+0xcc>)
 8008022:	b570      	push	{r4, r5, r6, lr}
 8008024:	681d      	ldr	r5, [r3, #0]
 8008026:	4606      	mov	r6, r0
 8008028:	460c      	mov	r4, r1
 800802a:	b125      	cbz	r5, 8008036 <__swsetup_r+0x16>
 800802c:	69ab      	ldr	r3, [r5, #24]
 800802e:	b913      	cbnz	r3, 8008036 <__swsetup_r+0x16>
 8008030:	4628      	mov	r0, r5
 8008032:	f000 f98d 	bl	8008350 <__sinit>
 8008036:	4b2e      	ldr	r3, [pc, #184]	; (80080f0 <__swsetup_r+0xd0>)
 8008038:	429c      	cmp	r4, r3
 800803a:	d10f      	bne.n	800805c <__swsetup_r+0x3c>
 800803c:	686c      	ldr	r4, [r5, #4]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008044:	0719      	lsls	r1, r3, #28
 8008046:	d42c      	bmi.n	80080a2 <__swsetup_r+0x82>
 8008048:	06dd      	lsls	r5, r3, #27
 800804a:	d411      	bmi.n	8008070 <__swsetup_r+0x50>
 800804c:	2309      	movs	r3, #9
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	f04f 30ff 	mov.w	r0, #4294967295
 800805a:	e03e      	b.n	80080da <__swsetup_r+0xba>
 800805c:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <__swsetup_r+0xd4>)
 800805e:	429c      	cmp	r4, r3
 8008060:	d101      	bne.n	8008066 <__swsetup_r+0x46>
 8008062:	68ac      	ldr	r4, [r5, #8]
 8008064:	e7eb      	b.n	800803e <__swsetup_r+0x1e>
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <__swsetup_r+0xd8>)
 8008068:	429c      	cmp	r4, r3
 800806a:	bf08      	it	eq
 800806c:	68ec      	ldreq	r4, [r5, #12]
 800806e:	e7e6      	b.n	800803e <__swsetup_r+0x1e>
 8008070:	0758      	lsls	r0, r3, #29
 8008072:	d512      	bpl.n	800809a <__swsetup_r+0x7a>
 8008074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008076:	b141      	cbz	r1, 800808a <__swsetup_r+0x6a>
 8008078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800807c:	4299      	cmp	r1, r3
 800807e:	d002      	beq.n	8008086 <__swsetup_r+0x66>
 8008080:	4630      	mov	r0, r6
 8008082:	f000 fa7d 	bl	8008580 <_free_r>
 8008086:	2300      	movs	r3, #0
 8008088:	6363      	str	r3, [r4, #52]	; 0x34
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	2300      	movs	r3, #0
 8008094:	6063      	str	r3, [r4, #4]
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f043 0308 	orr.w	r3, r3, #8
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	b94b      	cbnz	r3, 80080ba <__swsetup_r+0x9a>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b0:	d003      	beq.n	80080ba <__swsetup_r+0x9a>
 80080b2:	4621      	mov	r1, r4
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 fa23 	bl	8008500 <__smakebuf_r>
 80080ba:	89a0      	ldrh	r0, [r4, #12]
 80080bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080c0:	f010 0301 	ands.w	r3, r0, #1
 80080c4:	d00a      	beq.n	80080dc <__swsetup_r+0xbc>
 80080c6:	2300      	movs	r3, #0
 80080c8:	60a3      	str	r3, [r4, #8]
 80080ca:	6963      	ldr	r3, [r4, #20]
 80080cc:	425b      	negs	r3, r3
 80080ce:	61a3      	str	r3, [r4, #24]
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	b943      	cbnz	r3, 80080e6 <__swsetup_r+0xc6>
 80080d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080d8:	d1ba      	bne.n	8008050 <__swsetup_r+0x30>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	0781      	lsls	r1, r0, #30
 80080de:	bf58      	it	pl
 80080e0:	6963      	ldrpl	r3, [r4, #20]
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	e7f4      	b.n	80080d0 <__swsetup_r+0xb0>
 80080e6:	2000      	movs	r0, #0
 80080e8:	e7f7      	b.n	80080da <__swsetup_r+0xba>
 80080ea:	bf00      	nop
 80080ec:	20000400 	.word	0x20000400
 80080f0:	0800988c 	.word	0x0800988c
 80080f4:	080098ac 	.word	0x080098ac
 80080f8:	0800986c 	.word	0x0800986c

080080fc <_close_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d06      	ldr	r5, [pc, #24]	; (8008118 <_close_r+0x1c>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7f9 fb99 	bl	800183e <_close>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_close_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_close_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20000758 	.word	0x20000758

0800811c <__sflush_r>:
 800811c:	898a      	ldrh	r2, [r1, #12]
 800811e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008122:	4605      	mov	r5, r0
 8008124:	0710      	lsls	r0, r2, #28
 8008126:	460c      	mov	r4, r1
 8008128:	d458      	bmi.n	80081dc <__sflush_r+0xc0>
 800812a:	684b      	ldr	r3, [r1, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dc05      	bgt.n	800813c <__sflush_r+0x20>
 8008130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	dc02      	bgt.n	800813c <__sflush_r+0x20>
 8008136:	2000      	movs	r0, #0
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800813e:	2e00      	cmp	r6, #0
 8008140:	d0f9      	beq.n	8008136 <__sflush_r+0x1a>
 8008142:	2300      	movs	r3, #0
 8008144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008148:	682f      	ldr	r7, [r5, #0]
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	d032      	beq.n	80081b4 <__sflush_r+0x98>
 800814e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	075a      	lsls	r2, r3, #29
 8008154:	d505      	bpl.n	8008162 <__sflush_r+0x46>
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800815c:	b10b      	cbz	r3, 8008162 <__sflush_r+0x46>
 800815e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	2300      	movs	r3, #0
 8008164:	4602      	mov	r2, r0
 8008166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008168:	6a21      	ldr	r1, [r4, #32]
 800816a:	4628      	mov	r0, r5
 800816c:	47b0      	blx	r6
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	d106      	bne.n	8008182 <__sflush_r+0x66>
 8008174:	6829      	ldr	r1, [r5, #0]
 8008176:	291d      	cmp	r1, #29
 8008178:	d82c      	bhi.n	80081d4 <__sflush_r+0xb8>
 800817a:	4a2a      	ldr	r2, [pc, #168]	; (8008224 <__sflush_r+0x108>)
 800817c:	40ca      	lsrs	r2, r1
 800817e:	07d6      	lsls	r6, r2, #31
 8008180:	d528      	bpl.n	80081d4 <__sflush_r+0xb8>
 8008182:	2200      	movs	r2, #0
 8008184:	6062      	str	r2, [r4, #4]
 8008186:	04d9      	lsls	r1, r3, #19
 8008188:	6922      	ldr	r2, [r4, #16]
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	d504      	bpl.n	8008198 <__sflush_r+0x7c>
 800818e:	1c42      	adds	r2, r0, #1
 8008190:	d101      	bne.n	8008196 <__sflush_r+0x7a>
 8008192:	682b      	ldr	r3, [r5, #0]
 8008194:	b903      	cbnz	r3, 8008198 <__sflush_r+0x7c>
 8008196:	6560      	str	r0, [r4, #84]	; 0x54
 8008198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800819a:	602f      	str	r7, [r5, #0]
 800819c:	2900      	cmp	r1, #0
 800819e:	d0ca      	beq.n	8008136 <__sflush_r+0x1a>
 80081a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <__sflush_r+0x92>
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f9e9 	bl	8008580 <_free_r>
 80081ae:	2000      	movs	r0, #0
 80081b0:	6360      	str	r0, [r4, #52]	; 0x34
 80081b2:	e7c1      	b.n	8008138 <__sflush_r+0x1c>
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	2301      	movs	r3, #1
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b0      	blx	r6
 80081bc:	1c41      	adds	r1, r0, #1
 80081be:	d1c7      	bne.n	8008150 <__sflush_r+0x34>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0c4      	beq.n	8008150 <__sflush_r+0x34>
 80081c6:	2b1d      	cmp	r3, #29
 80081c8:	d001      	beq.n	80081ce <__sflush_r+0xb2>
 80081ca:	2b16      	cmp	r3, #22
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0xb6>
 80081ce:	602f      	str	r7, [r5, #0]
 80081d0:	e7b1      	b.n	8008136 <__sflush_r+0x1a>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	e7ad      	b.n	8008138 <__sflush_r+0x1c>
 80081dc:	690f      	ldr	r7, [r1, #16]
 80081de:	2f00      	cmp	r7, #0
 80081e0:	d0a9      	beq.n	8008136 <__sflush_r+0x1a>
 80081e2:	0793      	lsls	r3, r2, #30
 80081e4:	680e      	ldr	r6, [r1, #0]
 80081e6:	bf08      	it	eq
 80081e8:	694b      	ldreq	r3, [r1, #20]
 80081ea:	600f      	str	r7, [r1, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2300      	movne	r3, #0
 80081f0:	eba6 0807 	sub.w	r8, r6, r7
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	dd9c      	ble.n	8008136 <__sflush_r+0x1a>
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008200:	4643      	mov	r3, r8
 8008202:	463a      	mov	r2, r7
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	2800      	cmp	r0, #0
 800820a:	dc06      	bgt.n	800821a <__sflush_r+0xfe>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e78e      	b.n	8008138 <__sflush_r+0x1c>
 800821a:	4407      	add	r7, r0
 800821c:	eba8 0800 	sub.w	r8, r8, r0
 8008220:	e7e9      	b.n	80081f6 <__sflush_r+0xda>
 8008222:	bf00      	nop
 8008224:	20400001 	.word	0x20400001

08008228 <_fflush_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	690b      	ldr	r3, [r1, #16]
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	b913      	cbnz	r3, 8008238 <_fflush_r+0x10>
 8008232:	2500      	movs	r5, #0
 8008234:	4628      	mov	r0, r5
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	b118      	cbz	r0, 8008242 <_fflush_r+0x1a>
 800823a:	6983      	ldr	r3, [r0, #24]
 800823c:	b90b      	cbnz	r3, 8008242 <_fflush_r+0x1a>
 800823e:	f000 f887 	bl	8008350 <__sinit>
 8008242:	4b14      	ldr	r3, [pc, #80]	; (8008294 <_fflush_r+0x6c>)
 8008244:	429c      	cmp	r4, r3
 8008246:	d11b      	bne.n	8008280 <_fflush_r+0x58>
 8008248:	686c      	ldr	r4, [r5, #4]
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0ef      	beq.n	8008232 <_fflush_r+0xa>
 8008252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008254:	07d0      	lsls	r0, r2, #31
 8008256:	d404      	bmi.n	8008262 <_fflush_r+0x3a>
 8008258:	0599      	lsls	r1, r3, #22
 800825a:	d402      	bmi.n	8008262 <_fflush_r+0x3a>
 800825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825e:	f000 f915 	bl	800848c <__retarget_lock_acquire_recursive>
 8008262:	4628      	mov	r0, r5
 8008264:	4621      	mov	r1, r4
 8008266:	f7ff ff59 	bl	800811c <__sflush_r>
 800826a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826c:	07da      	lsls	r2, r3, #31
 800826e:	4605      	mov	r5, r0
 8008270:	d4e0      	bmi.n	8008234 <_fflush_r+0xc>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	d4dd      	bmi.n	8008234 <_fflush_r+0xc>
 8008278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827a:	f000 f908 	bl	800848e <__retarget_lock_release_recursive>
 800827e:	e7d9      	b.n	8008234 <_fflush_r+0xc>
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <_fflush_r+0x70>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d101      	bne.n	800828a <_fflush_r+0x62>
 8008286:	68ac      	ldr	r4, [r5, #8]
 8008288:	e7df      	b.n	800824a <_fflush_r+0x22>
 800828a:	4b04      	ldr	r3, [pc, #16]	; (800829c <_fflush_r+0x74>)
 800828c:	429c      	cmp	r4, r3
 800828e:	bf08      	it	eq
 8008290:	68ec      	ldreq	r4, [r5, #12]
 8008292:	e7da      	b.n	800824a <_fflush_r+0x22>
 8008294:	0800988c 	.word	0x0800988c
 8008298:	080098ac 	.word	0x080098ac
 800829c:	0800986c 	.word	0x0800986c

080082a0 <std>:
 80082a0:	2300      	movs	r3, #0
 80082a2:	b510      	push	{r4, lr}
 80082a4:	4604      	mov	r4, r0
 80082a6:	e9c0 3300 	strd	r3, r3, [r0]
 80082aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ae:	6083      	str	r3, [r0, #8]
 80082b0:	8181      	strh	r1, [r0, #12]
 80082b2:	6643      	str	r3, [r0, #100]	; 0x64
 80082b4:	81c2      	strh	r2, [r0, #14]
 80082b6:	6183      	str	r3, [r0, #24]
 80082b8:	4619      	mov	r1, r3
 80082ba:	2208      	movs	r2, #8
 80082bc:	305c      	adds	r0, #92	; 0x5c
 80082be:	f7ff fd43 	bl	8007d48 <memset>
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <std+0x38>)
 80082c4:	6263      	str	r3, [r4, #36]	; 0x24
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <std+0x3c>)
 80082c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <std+0x40>)
 80082cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <std+0x44>)
 80082d0:	6224      	str	r4, [r4, #32]
 80082d2:	6323      	str	r3, [r4, #48]	; 0x30
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop
 80082d8:	08007ecd 	.word	0x08007ecd
 80082dc:	08007ef3 	.word	0x08007ef3
 80082e0:	08007f2b 	.word	0x08007f2b
 80082e4:	08007f4f 	.word	0x08007f4f

080082e8 <_cleanup_r>:
 80082e8:	4901      	ldr	r1, [pc, #4]	; (80082f0 <_cleanup_r+0x8>)
 80082ea:	f000 b8af 	b.w	800844c <_fwalk_reent>
 80082ee:	bf00      	nop
 80082f0:	08008229 	.word	0x08008229

080082f4 <__sfmoreglue>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	2268      	movs	r2, #104	; 0x68
 80082f8:	1e4d      	subs	r5, r1, #1
 80082fa:	4355      	muls	r5, r2
 80082fc:	460e      	mov	r6, r1
 80082fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008302:	f000 f9a9 	bl	8008658 <_malloc_r>
 8008306:	4604      	mov	r4, r0
 8008308:	b140      	cbz	r0, 800831c <__sfmoreglue+0x28>
 800830a:	2100      	movs	r1, #0
 800830c:	e9c0 1600 	strd	r1, r6, [r0]
 8008310:	300c      	adds	r0, #12
 8008312:	60a0      	str	r0, [r4, #8]
 8008314:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008318:	f7ff fd16 	bl	8007d48 <memset>
 800831c:	4620      	mov	r0, r4
 800831e:	bd70      	pop	{r4, r5, r6, pc}

08008320 <__sfp_lock_acquire>:
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <__sfp_lock_acquire+0x8>)
 8008322:	f000 b8b3 	b.w	800848c <__retarget_lock_acquire_recursive>
 8008326:	bf00      	nop
 8008328:	2000074d 	.word	0x2000074d

0800832c <__sfp_lock_release>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sfp_lock_release+0x8>)
 800832e:	f000 b8ae 	b.w	800848e <__retarget_lock_release_recursive>
 8008332:	bf00      	nop
 8008334:	2000074d 	.word	0x2000074d

08008338 <__sinit_lock_acquire>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sinit_lock_acquire+0x8>)
 800833a:	f000 b8a7 	b.w	800848c <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	2000074e 	.word	0x2000074e

08008344 <__sinit_lock_release>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sinit_lock_release+0x8>)
 8008346:	f000 b8a2 	b.w	800848e <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	2000074e 	.word	0x2000074e

08008350 <__sinit>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	f7ff fff0 	bl	8008338 <__sinit_lock_acquire>
 8008358:	69a3      	ldr	r3, [r4, #24]
 800835a:	b11b      	cbz	r3, 8008364 <__sinit+0x14>
 800835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008360:	f7ff bff0 	b.w	8008344 <__sinit_lock_release>
 8008364:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008368:	6523      	str	r3, [r4, #80]	; 0x50
 800836a:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <__sinit+0x68>)
 800836c:	4a13      	ldr	r2, [pc, #76]	; (80083bc <__sinit+0x6c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	62a2      	str	r2, [r4, #40]	; 0x28
 8008372:	42a3      	cmp	r3, r4
 8008374:	bf04      	itt	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	61a3      	streq	r3, [r4, #24]
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f820 	bl	80083c0 <__sfp>
 8008380:	6060      	str	r0, [r4, #4]
 8008382:	4620      	mov	r0, r4
 8008384:	f000 f81c 	bl	80083c0 <__sfp>
 8008388:	60a0      	str	r0, [r4, #8]
 800838a:	4620      	mov	r0, r4
 800838c:	f000 f818 	bl	80083c0 <__sfp>
 8008390:	2200      	movs	r2, #0
 8008392:	60e0      	str	r0, [r4, #12]
 8008394:	2104      	movs	r1, #4
 8008396:	6860      	ldr	r0, [r4, #4]
 8008398:	f7ff ff82 	bl	80082a0 <std>
 800839c:	68a0      	ldr	r0, [r4, #8]
 800839e:	2201      	movs	r2, #1
 80083a0:	2109      	movs	r1, #9
 80083a2:	f7ff ff7d 	bl	80082a0 <std>
 80083a6:	68e0      	ldr	r0, [r4, #12]
 80083a8:	2202      	movs	r2, #2
 80083aa:	2112      	movs	r1, #18
 80083ac:	f7ff ff78 	bl	80082a0 <std>
 80083b0:	2301      	movs	r3, #1
 80083b2:	61a3      	str	r3, [r4, #24]
 80083b4:	e7d2      	b.n	800835c <__sinit+0xc>
 80083b6:	bf00      	nop
 80083b8:	08009868 	.word	0x08009868
 80083bc:	080082e9 	.word	0x080082e9

080083c0 <__sfp>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	4607      	mov	r7, r0
 80083c4:	f7ff ffac 	bl	8008320 <__sfp_lock_acquire>
 80083c8:	4b1e      	ldr	r3, [pc, #120]	; (8008444 <__sfp+0x84>)
 80083ca:	681e      	ldr	r6, [r3, #0]
 80083cc:	69b3      	ldr	r3, [r6, #24]
 80083ce:	b913      	cbnz	r3, 80083d6 <__sfp+0x16>
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff ffbd 	bl	8008350 <__sinit>
 80083d6:	3648      	adds	r6, #72	; 0x48
 80083d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083dc:	3b01      	subs	r3, #1
 80083de:	d503      	bpl.n	80083e8 <__sfp+0x28>
 80083e0:	6833      	ldr	r3, [r6, #0]
 80083e2:	b30b      	cbz	r3, 8008428 <__sfp+0x68>
 80083e4:	6836      	ldr	r6, [r6, #0]
 80083e6:	e7f7      	b.n	80083d8 <__sfp+0x18>
 80083e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083ec:	b9d5      	cbnz	r5, 8008424 <__sfp+0x64>
 80083ee:	4b16      	ldr	r3, [pc, #88]	; (8008448 <__sfp+0x88>)
 80083f0:	60e3      	str	r3, [r4, #12]
 80083f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083f6:	6665      	str	r5, [r4, #100]	; 0x64
 80083f8:	f000 f847 	bl	800848a <__retarget_lock_init_recursive>
 80083fc:	f7ff ff96 	bl	800832c <__sfp_lock_release>
 8008400:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008404:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008408:	6025      	str	r5, [r4, #0]
 800840a:	61a5      	str	r5, [r4, #24]
 800840c:	2208      	movs	r2, #8
 800840e:	4629      	mov	r1, r5
 8008410:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008414:	f7ff fc98 	bl	8007d48 <memset>
 8008418:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800841c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008420:	4620      	mov	r0, r4
 8008422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008424:	3468      	adds	r4, #104	; 0x68
 8008426:	e7d9      	b.n	80083dc <__sfp+0x1c>
 8008428:	2104      	movs	r1, #4
 800842a:	4638      	mov	r0, r7
 800842c:	f7ff ff62 	bl	80082f4 <__sfmoreglue>
 8008430:	4604      	mov	r4, r0
 8008432:	6030      	str	r0, [r6, #0]
 8008434:	2800      	cmp	r0, #0
 8008436:	d1d5      	bne.n	80083e4 <__sfp+0x24>
 8008438:	f7ff ff78 	bl	800832c <__sfp_lock_release>
 800843c:	230c      	movs	r3, #12
 800843e:	603b      	str	r3, [r7, #0]
 8008440:	e7ee      	b.n	8008420 <__sfp+0x60>
 8008442:	bf00      	nop
 8008444:	08009868 	.word	0x08009868
 8008448:	ffff0001 	.word	0xffff0001

0800844c <_fwalk_reent>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4606      	mov	r6, r0
 8008452:	4688      	mov	r8, r1
 8008454:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008458:	2700      	movs	r7, #0
 800845a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800845e:	f1b9 0901 	subs.w	r9, r9, #1
 8008462:	d505      	bpl.n	8008470 <_fwalk_reent+0x24>
 8008464:	6824      	ldr	r4, [r4, #0]
 8008466:	2c00      	cmp	r4, #0
 8008468:	d1f7      	bne.n	800845a <_fwalk_reent+0xe>
 800846a:	4638      	mov	r0, r7
 800846c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008470:	89ab      	ldrh	r3, [r5, #12]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d907      	bls.n	8008486 <_fwalk_reent+0x3a>
 8008476:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800847a:	3301      	adds	r3, #1
 800847c:	d003      	beq.n	8008486 <_fwalk_reent+0x3a>
 800847e:	4629      	mov	r1, r5
 8008480:	4630      	mov	r0, r6
 8008482:	47c0      	blx	r8
 8008484:	4307      	orrs	r7, r0
 8008486:	3568      	adds	r5, #104	; 0x68
 8008488:	e7e9      	b.n	800845e <_fwalk_reent+0x12>

0800848a <__retarget_lock_init_recursive>:
 800848a:	4770      	bx	lr

0800848c <__retarget_lock_acquire_recursive>:
 800848c:	4770      	bx	lr

0800848e <__retarget_lock_release_recursive>:
 800848e:	4770      	bx	lr

08008490 <_lseek_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d07      	ldr	r5, [pc, #28]	; (80084b0 <_lseek_r+0x20>)
 8008494:	4604      	mov	r4, r0
 8008496:	4608      	mov	r0, r1
 8008498:	4611      	mov	r1, r2
 800849a:	2200      	movs	r2, #0
 800849c:	602a      	str	r2, [r5, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	f7f9 f9f4 	bl	800188c <_lseek>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_lseek_r+0x1e>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_lseek_r+0x1e>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	20000758 	.word	0x20000758

080084b4 <__swhatbuf_r>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	460e      	mov	r6, r1
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	2900      	cmp	r1, #0
 80084be:	b096      	sub	sp, #88	; 0x58
 80084c0:	4614      	mov	r4, r2
 80084c2:	461d      	mov	r5, r3
 80084c4:	da08      	bge.n	80084d8 <__swhatbuf_r+0x24>
 80084c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	061a      	lsls	r2, r3, #24
 80084d0:	d410      	bmi.n	80084f4 <__swhatbuf_r+0x40>
 80084d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d6:	e00e      	b.n	80084f6 <__swhatbuf_r+0x42>
 80084d8:	466a      	mov	r2, sp
 80084da:	f001 f8cf 	bl	800967c <_fstat_r>
 80084de:	2800      	cmp	r0, #0
 80084e0:	dbf1      	blt.n	80084c6 <__swhatbuf_r+0x12>
 80084e2:	9a01      	ldr	r2, [sp, #4]
 80084e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084ec:	425a      	negs	r2, r3
 80084ee:	415a      	adcs	r2, r3
 80084f0:	602a      	str	r2, [r5, #0]
 80084f2:	e7ee      	b.n	80084d2 <__swhatbuf_r+0x1e>
 80084f4:	2340      	movs	r3, #64	; 0x40
 80084f6:	2000      	movs	r0, #0
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	b016      	add	sp, #88	; 0x58
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008500 <__smakebuf_r>:
 8008500:	898b      	ldrh	r3, [r1, #12]
 8008502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008504:	079d      	lsls	r5, r3, #30
 8008506:	4606      	mov	r6, r0
 8008508:	460c      	mov	r4, r1
 800850a:	d507      	bpl.n	800851c <__smakebuf_r+0x1c>
 800850c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	2301      	movs	r3, #1
 8008516:	6163      	str	r3, [r4, #20]
 8008518:	b002      	add	sp, #8
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	ab01      	add	r3, sp, #4
 800851e:	466a      	mov	r2, sp
 8008520:	f7ff ffc8 	bl	80084b4 <__swhatbuf_r>
 8008524:	9900      	ldr	r1, [sp, #0]
 8008526:	4605      	mov	r5, r0
 8008528:	4630      	mov	r0, r6
 800852a:	f000 f895 	bl	8008658 <_malloc_r>
 800852e:	b948      	cbnz	r0, 8008544 <__smakebuf_r+0x44>
 8008530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008534:	059a      	lsls	r2, r3, #22
 8008536:	d4ef      	bmi.n	8008518 <__smakebuf_r+0x18>
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	f043 0302 	orr.w	r3, r3, #2
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	e7e3      	b.n	800850c <__smakebuf_r+0xc>
 8008544:	4b0d      	ldr	r3, [pc, #52]	; (800857c <__smakebuf_r+0x7c>)
 8008546:	62b3      	str	r3, [r6, #40]	; 0x28
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	6020      	str	r0, [r4, #0]
 800854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	6163      	str	r3, [r4, #20]
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	6120      	str	r0, [r4, #16]
 800855a:	b15b      	cbz	r3, 8008574 <__smakebuf_r+0x74>
 800855c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008560:	4630      	mov	r0, r6
 8008562:	f001 f89d 	bl	80096a0 <_isatty_r>
 8008566:	b128      	cbz	r0, 8008574 <__smakebuf_r+0x74>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	89a0      	ldrh	r0, [r4, #12]
 8008576:	4305      	orrs	r5, r0
 8008578:	81a5      	strh	r5, [r4, #12]
 800857a:	e7cd      	b.n	8008518 <__smakebuf_r+0x18>
 800857c:	080082e9 	.word	0x080082e9

08008580 <_free_r>:
 8008580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008582:	2900      	cmp	r1, #0
 8008584:	d044      	beq.n	8008610 <_free_r+0x90>
 8008586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800858a:	9001      	str	r0, [sp, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	f1a1 0404 	sub.w	r4, r1, #4
 8008592:	bfb8      	it	lt
 8008594:	18e4      	addlt	r4, r4, r3
 8008596:	f001 f8a1 	bl	80096dc <__malloc_lock>
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <_free_r+0x94>)
 800859c:	9801      	ldr	r0, [sp, #4]
 800859e:	6813      	ldr	r3, [r2, #0]
 80085a0:	b933      	cbnz	r3, 80085b0 <_free_r+0x30>
 80085a2:	6063      	str	r3, [r4, #4]
 80085a4:	6014      	str	r4, [r2, #0]
 80085a6:	b003      	add	sp, #12
 80085a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ac:	f001 b89c 	b.w	80096e8 <__malloc_unlock>
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d908      	bls.n	80085c6 <_free_r+0x46>
 80085b4:	6825      	ldr	r5, [r4, #0]
 80085b6:	1961      	adds	r1, r4, r5
 80085b8:	428b      	cmp	r3, r1
 80085ba:	bf01      	itttt	eq
 80085bc:	6819      	ldreq	r1, [r3, #0]
 80085be:	685b      	ldreq	r3, [r3, #4]
 80085c0:	1949      	addeq	r1, r1, r5
 80085c2:	6021      	streq	r1, [r4, #0]
 80085c4:	e7ed      	b.n	80085a2 <_free_r+0x22>
 80085c6:	461a      	mov	r2, r3
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	b10b      	cbz	r3, 80085d0 <_free_r+0x50>
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d9fa      	bls.n	80085c6 <_free_r+0x46>
 80085d0:	6811      	ldr	r1, [r2, #0]
 80085d2:	1855      	adds	r5, r2, r1
 80085d4:	42a5      	cmp	r5, r4
 80085d6:	d10b      	bne.n	80085f0 <_free_r+0x70>
 80085d8:	6824      	ldr	r4, [r4, #0]
 80085da:	4421      	add	r1, r4
 80085dc:	1854      	adds	r4, r2, r1
 80085de:	42a3      	cmp	r3, r4
 80085e0:	6011      	str	r1, [r2, #0]
 80085e2:	d1e0      	bne.n	80085a6 <_free_r+0x26>
 80085e4:	681c      	ldr	r4, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	6053      	str	r3, [r2, #4]
 80085ea:	4421      	add	r1, r4
 80085ec:	6011      	str	r1, [r2, #0]
 80085ee:	e7da      	b.n	80085a6 <_free_r+0x26>
 80085f0:	d902      	bls.n	80085f8 <_free_r+0x78>
 80085f2:	230c      	movs	r3, #12
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	e7d6      	b.n	80085a6 <_free_r+0x26>
 80085f8:	6825      	ldr	r5, [r4, #0]
 80085fa:	1961      	adds	r1, r4, r5
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bf04      	itt	eq
 8008600:	6819      	ldreq	r1, [r3, #0]
 8008602:	685b      	ldreq	r3, [r3, #4]
 8008604:	6063      	str	r3, [r4, #4]
 8008606:	bf04      	itt	eq
 8008608:	1949      	addeq	r1, r1, r5
 800860a:	6021      	streq	r1, [r4, #0]
 800860c:	6054      	str	r4, [r2, #4]
 800860e:	e7ca      	b.n	80085a6 <_free_r+0x26>
 8008610:	b003      	add	sp, #12
 8008612:	bd30      	pop	{r4, r5, pc}
 8008614:	20000750 	.word	0x20000750

08008618 <sbrk_aligned>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4e0e      	ldr	r6, [pc, #56]	; (8008654 <sbrk_aligned+0x3c>)
 800861c:	460c      	mov	r4, r1
 800861e:	6831      	ldr	r1, [r6, #0]
 8008620:	4605      	mov	r5, r0
 8008622:	b911      	cbnz	r1, 800862a <sbrk_aligned+0x12>
 8008624:	f000 feb0 	bl	8009388 <_sbrk_r>
 8008628:	6030      	str	r0, [r6, #0]
 800862a:	4621      	mov	r1, r4
 800862c:	4628      	mov	r0, r5
 800862e:	f000 feab 	bl	8009388 <_sbrk_r>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	d00a      	beq.n	800864c <sbrk_aligned+0x34>
 8008636:	1cc4      	adds	r4, r0, #3
 8008638:	f024 0403 	bic.w	r4, r4, #3
 800863c:	42a0      	cmp	r0, r4
 800863e:	d007      	beq.n	8008650 <sbrk_aligned+0x38>
 8008640:	1a21      	subs	r1, r4, r0
 8008642:	4628      	mov	r0, r5
 8008644:	f000 fea0 	bl	8009388 <_sbrk_r>
 8008648:	3001      	adds	r0, #1
 800864a:	d101      	bne.n	8008650 <sbrk_aligned+0x38>
 800864c:	f04f 34ff 	mov.w	r4, #4294967295
 8008650:	4620      	mov	r0, r4
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	20000754 	.word	0x20000754

08008658 <_malloc_r>:
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	1ccd      	adds	r5, r1, #3
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	2d00      	cmp	r5, #0
 800866c:	4607      	mov	r7, r0
 800866e:	db01      	blt.n	8008674 <_malloc_r+0x1c>
 8008670:	42a9      	cmp	r1, r5
 8008672:	d905      	bls.n	8008680 <_malloc_r+0x28>
 8008674:	230c      	movs	r3, #12
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	2600      	movs	r6, #0
 800867a:	4630      	mov	r0, r6
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008680:	4e2e      	ldr	r6, [pc, #184]	; (800873c <_malloc_r+0xe4>)
 8008682:	f001 f82b 	bl	80096dc <__malloc_lock>
 8008686:	6833      	ldr	r3, [r6, #0]
 8008688:	461c      	mov	r4, r3
 800868a:	bb34      	cbnz	r4, 80086da <_malloc_r+0x82>
 800868c:	4629      	mov	r1, r5
 800868e:	4638      	mov	r0, r7
 8008690:	f7ff ffc2 	bl	8008618 <sbrk_aligned>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	4604      	mov	r4, r0
 8008698:	d14d      	bne.n	8008736 <_malloc_r+0xde>
 800869a:	6834      	ldr	r4, [r6, #0]
 800869c:	4626      	mov	r6, r4
 800869e:	2e00      	cmp	r6, #0
 80086a0:	d140      	bne.n	8008724 <_malloc_r+0xcc>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	4631      	mov	r1, r6
 80086a6:	4638      	mov	r0, r7
 80086a8:	eb04 0803 	add.w	r8, r4, r3
 80086ac:	f000 fe6c 	bl	8009388 <_sbrk_r>
 80086b0:	4580      	cmp	r8, r0
 80086b2:	d13a      	bne.n	800872a <_malloc_r+0xd2>
 80086b4:	6821      	ldr	r1, [r4, #0]
 80086b6:	3503      	adds	r5, #3
 80086b8:	1a6d      	subs	r5, r5, r1
 80086ba:	f025 0503 	bic.w	r5, r5, #3
 80086be:	3508      	adds	r5, #8
 80086c0:	2d0c      	cmp	r5, #12
 80086c2:	bf38      	it	cc
 80086c4:	250c      	movcc	r5, #12
 80086c6:	4629      	mov	r1, r5
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ffa5 	bl	8008618 <sbrk_aligned>
 80086ce:	3001      	adds	r0, #1
 80086d0:	d02b      	beq.n	800872a <_malloc_r+0xd2>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	442b      	add	r3, r5
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	e00e      	b.n	80086f8 <_malloc_r+0xa0>
 80086da:	6822      	ldr	r2, [r4, #0]
 80086dc:	1b52      	subs	r2, r2, r5
 80086de:	d41e      	bmi.n	800871e <_malloc_r+0xc6>
 80086e0:	2a0b      	cmp	r2, #11
 80086e2:	d916      	bls.n	8008712 <_malloc_r+0xba>
 80086e4:	1961      	adds	r1, r4, r5
 80086e6:	42a3      	cmp	r3, r4
 80086e8:	6025      	str	r5, [r4, #0]
 80086ea:	bf18      	it	ne
 80086ec:	6059      	strne	r1, [r3, #4]
 80086ee:	6863      	ldr	r3, [r4, #4]
 80086f0:	bf08      	it	eq
 80086f2:	6031      	streq	r1, [r6, #0]
 80086f4:	5162      	str	r2, [r4, r5]
 80086f6:	604b      	str	r3, [r1, #4]
 80086f8:	4638      	mov	r0, r7
 80086fa:	f104 060b 	add.w	r6, r4, #11
 80086fe:	f000 fff3 	bl	80096e8 <__malloc_unlock>
 8008702:	f026 0607 	bic.w	r6, r6, #7
 8008706:	1d23      	adds	r3, r4, #4
 8008708:	1af2      	subs	r2, r6, r3
 800870a:	d0b6      	beq.n	800867a <_malloc_r+0x22>
 800870c:	1b9b      	subs	r3, r3, r6
 800870e:	50a3      	str	r3, [r4, r2]
 8008710:	e7b3      	b.n	800867a <_malloc_r+0x22>
 8008712:	6862      	ldr	r2, [r4, #4]
 8008714:	42a3      	cmp	r3, r4
 8008716:	bf0c      	ite	eq
 8008718:	6032      	streq	r2, [r6, #0]
 800871a:	605a      	strne	r2, [r3, #4]
 800871c:	e7ec      	b.n	80086f8 <_malloc_r+0xa0>
 800871e:	4623      	mov	r3, r4
 8008720:	6864      	ldr	r4, [r4, #4]
 8008722:	e7b2      	b.n	800868a <_malloc_r+0x32>
 8008724:	4634      	mov	r4, r6
 8008726:	6876      	ldr	r6, [r6, #4]
 8008728:	e7b9      	b.n	800869e <_malloc_r+0x46>
 800872a:	230c      	movs	r3, #12
 800872c:	603b      	str	r3, [r7, #0]
 800872e:	4638      	mov	r0, r7
 8008730:	f000 ffda 	bl	80096e8 <__malloc_unlock>
 8008734:	e7a1      	b.n	800867a <_malloc_r+0x22>
 8008736:	6025      	str	r5, [r4, #0]
 8008738:	e7de      	b.n	80086f8 <_malloc_r+0xa0>
 800873a:	bf00      	nop
 800873c:	20000750 	.word	0x20000750

08008740 <_sungetc_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	1c4b      	adds	r3, r1, #1
 8008744:	4614      	mov	r4, r2
 8008746:	d103      	bne.n	8008750 <_sungetc_r+0x10>
 8008748:	f04f 35ff 	mov.w	r5, #4294967295
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	8993      	ldrh	r3, [r2, #12]
 8008752:	f023 0320 	bic.w	r3, r3, #32
 8008756:	8193      	strh	r3, [r2, #12]
 8008758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800875a:	6852      	ldr	r2, [r2, #4]
 800875c:	b2cd      	uxtb	r5, r1
 800875e:	b18b      	cbz	r3, 8008784 <_sungetc_r+0x44>
 8008760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008762:	4293      	cmp	r3, r2
 8008764:	dd08      	ble.n	8008778 <_sungetc_r+0x38>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	1e5a      	subs	r2, r3, #1
 800876a:	6022      	str	r2, [r4, #0]
 800876c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	3301      	adds	r3, #1
 8008774:	6063      	str	r3, [r4, #4]
 8008776:	e7e9      	b.n	800874c <_sungetc_r+0xc>
 8008778:	4621      	mov	r1, r4
 800877a:	f000 ff45 	bl	8009608 <__submore>
 800877e:	2800      	cmp	r0, #0
 8008780:	d0f1      	beq.n	8008766 <_sungetc_r+0x26>
 8008782:	e7e1      	b.n	8008748 <_sungetc_r+0x8>
 8008784:	6921      	ldr	r1, [r4, #16]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	b151      	cbz	r1, 80087a0 <_sungetc_r+0x60>
 800878a:	4299      	cmp	r1, r3
 800878c:	d208      	bcs.n	80087a0 <_sungetc_r+0x60>
 800878e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008792:	42a9      	cmp	r1, r5
 8008794:	d104      	bne.n	80087a0 <_sungetc_r+0x60>
 8008796:	3b01      	subs	r3, #1
 8008798:	3201      	adds	r2, #1
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	6062      	str	r2, [r4, #4]
 800879e:	e7d5      	b.n	800874c <_sungetc_r+0xc>
 80087a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80087a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087a8:	6363      	str	r3, [r4, #52]	; 0x34
 80087aa:	2303      	movs	r3, #3
 80087ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80087ae:	4623      	mov	r3, r4
 80087b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	2301      	movs	r3, #1
 80087b8:	e7dc      	b.n	8008774 <_sungetc_r+0x34>

080087ba <__ssrefill_r>:
 80087ba:	b510      	push	{r4, lr}
 80087bc:	460c      	mov	r4, r1
 80087be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80087c0:	b169      	cbz	r1, 80087de <__ssrefill_r+0x24>
 80087c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c6:	4299      	cmp	r1, r3
 80087c8:	d001      	beq.n	80087ce <__ssrefill_r+0x14>
 80087ca:	f7ff fed9 	bl	8008580 <_free_r>
 80087ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	2000      	movs	r0, #0
 80087d4:	6360      	str	r0, [r4, #52]	; 0x34
 80087d6:	b113      	cbz	r3, 80087de <__ssrefill_r+0x24>
 80087d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0320 	orr.w	r3, r3, #32
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	e7f3      	b.n	80087dc <__ssrefill_r+0x22>

080087f4 <__ssvfiscanf_r>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	460c      	mov	r4, r1
 80087fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80087fe:	2100      	movs	r1, #0
 8008800:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008804:	49a6      	ldr	r1, [pc, #664]	; (8008aa0 <__ssvfiscanf_r+0x2ac>)
 8008806:	91a0      	str	r1, [sp, #640]	; 0x280
 8008808:	f10d 0804 	add.w	r8, sp, #4
 800880c:	49a5      	ldr	r1, [pc, #660]	; (8008aa4 <__ssvfiscanf_r+0x2b0>)
 800880e:	4fa6      	ldr	r7, [pc, #664]	; (8008aa8 <__ssvfiscanf_r+0x2b4>)
 8008810:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008aac <__ssvfiscanf_r+0x2b8>
 8008814:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008818:	4606      	mov	r6, r0
 800881a:	91a1      	str	r1, [sp, #644]	; 0x284
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	7813      	ldrb	r3, [r2, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 815a 	beq.w	8008ada <__ssvfiscanf_r+0x2e6>
 8008826:	5dd9      	ldrb	r1, [r3, r7]
 8008828:	f011 0108 	ands.w	r1, r1, #8
 800882c:	f102 0501 	add.w	r5, r2, #1
 8008830:	d019      	beq.n	8008866 <__ssvfiscanf_r+0x72>
 8008832:	6863      	ldr	r3, [r4, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd0f      	ble.n	8008858 <__ssvfiscanf_r+0x64>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	5cba      	ldrb	r2, [r7, r2]
 800883e:	0712      	lsls	r2, r2, #28
 8008840:	d401      	bmi.n	8008846 <__ssvfiscanf_r+0x52>
 8008842:	462a      	mov	r2, r5
 8008844:	e7eb      	b.n	800881e <__ssvfiscanf_r+0x2a>
 8008846:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008848:	3201      	adds	r2, #1
 800884a:	9245      	str	r2, [sp, #276]	; 0x114
 800884c:	6862      	ldr	r2, [r4, #4]
 800884e:	3301      	adds	r3, #1
 8008850:	3a01      	subs	r2, #1
 8008852:	6062      	str	r2, [r4, #4]
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	e7ec      	b.n	8008832 <__ssvfiscanf_r+0x3e>
 8008858:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800885a:	4621      	mov	r1, r4
 800885c:	4630      	mov	r0, r6
 800885e:	4798      	blx	r3
 8008860:	2800      	cmp	r0, #0
 8008862:	d0e9      	beq.n	8008838 <__ssvfiscanf_r+0x44>
 8008864:	e7ed      	b.n	8008842 <__ssvfiscanf_r+0x4e>
 8008866:	2b25      	cmp	r3, #37	; 0x25
 8008868:	d012      	beq.n	8008890 <__ssvfiscanf_r+0x9c>
 800886a:	469a      	mov	sl, r3
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	f340 8091 	ble.w	8008996 <__ssvfiscanf_r+0x1a2>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	7813      	ldrb	r3, [r2, #0]
 8008878:	4553      	cmp	r3, sl
 800887a:	f040 812e 	bne.w	8008ada <__ssvfiscanf_r+0x2e6>
 800887e:	6863      	ldr	r3, [r4, #4]
 8008880:	3b01      	subs	r3, #1
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008886:	3201      	adds	r2, #1
 8008888:	3301      	adds	r3, #1
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	9345      	str	r3, [sp, #276]	; 0x114
 800888e:	e7d8      	b.n	8008842 <__ssvfiscanf_r+0x4e>
 8008890:	9141      	str	r1, [sp, #260]	; 0x104
 8008892:	9143      	str	r1, [sp, #268]	; 0x10c
 8008894:	7853      	ldrb	r3, [r2, #1]
 8008896:	2b2a      	cmp	r3, #42	; 0x2a
 8008898:	bf02      	ittt	eq
 800889a:	2310      	moveq	r3, #16
 800889c:	1c95      	addeq	r5, r2, #2
 800889e:	9341      	streq	r3, [sp, #260]	; 0x104
 80088a0:	220a      	movs	r2, #10
 80088a2:	46aa      	mov	sl, r5
 80088a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80088a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d91d      	bls.n	80088ec <__ssvfiscanf_r+0xf8>
 80088b0:	487e      	ldr	r0, [pc, #504]	; (8008aac <__ssvfiscanf_r+0x2b8>)
 80088b2:	2203      	movs	r2, #3
 80088b4:	f7f7 fca4 	bl	8000200 <memchr>
 80088b8:	b140      	cbz	r0, 80088cc <__ssvfiscanf_r+0xd8>
 80088ba:	2301      	movs	r3, #1
 80088bc:	eba0 0009 	sub.w	r0, r0, r9
 80088c0:	fa03 f000 	lsl.w	r0, r3, r0
 80088c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80088c6:	4318      	orrs	r0, r3
 80088c8:	9041      	str	r0, [sp, #260]	; 0x104
 80088ca:	4655      	mov	r5, sl
 80088cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088d0:	2b78      	cmp	r3, #120	; 0x78
 80088d2:	d806      	bhi.n	80088e2 <__ssvfiscanf_r+0xee>
 80088d4:	2b57      	cmp	r3, #87	; 0x57
 80088d6:	d810      	bhi.n	80088fa <__ssvfiscanf_r+0x106>
 80088d8:	2b25      	cmp	r3, #37	; 0x25
 80088da:	d0c6      	beq.n	800886a <__ssvfiscanf_r+0x76>
 80088dc:	d856      	bhi.n	800898c <__ssvfiscanf_r+0x198>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d064      	beq.n	80089ac <__ssvfiscanf_r+0x1b8>
 80088e2:	2303      	movs	r3, #3
 80088e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80088e6:	230a      	movs	r3, #10
 80088e8:	9342      	str	r3, [sp, #264]	; 0x108
 80088ea:	e071      	b.n	80089d0 <__ssvfiscanf_r+0x1dc>
 80088ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80088ee:	fb02 1103 	mla	r1, r2, r3, r1
 80088f2:	3930      	subs	r1, #48	; 0x30
 80088f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80088f6:	4655      	mov	r5, sl
 80088f8:	e7d3      	b.n	80088a2 <__ssvfiscanf_r+0xae>
 80088fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80088fe:	2a20      	cmp	r2, #32
 8008900:	d8ef      	bhi.n	80088e2 <__ssvfiscanf_r+0xee>
 8008902:	a101      	add	r1, pc, #4	; (adr r1, 8008908 <__ssvfiscanf_r+0x114>)
 8008904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008908:	080089bb 	.word	0x080089bb
 800890c:	080088e3 	.word	0x080088e3
 8008910:	080088e3 	.word	0x080088e3
 8008914:	08008a19 	.word	0x08008a19
 8008918:	080088e3 	.word	0x080088e3
 800891c:	080088e3 	.word	0x080088e3
 8008920:	080088e3 	.word	0x080088e3
 8008924:	080088e3 	.word	0x080088e3
 8008928:	080088e3 	.word	0x080088e3
 800892c:	080088e3 	.word	0x080088e3
 8008930:	080088e3 	.word	0x080088e3
 8008934:	08008a2f 	.word	0x08008a2f
 8008938:	08008a05 	.word	0x08008a05
 800893c:	08008993 	.word	0x08008993
 8008940:	08008993 	.word	0x08008993
 8008944:	08008993 	.word	0x08008993
 8008948:	080088e3 	.word	0x080088e3
 800894c:	08008a09 	.word	0x08008a09
 8008950:	080088e3 	.word	0x080088e3
 8008954:	080088e3 	.word	0x080088e3
 8008958:	080088e3 	.word	0x080088e3
 800895c:	080088e3 	.word	0x080088e3
 8008960:	08008a3f 	.word	0x08008a3f
 8008964:	08008a11 	.word	0x08008a11
 8008968:	080089b3 	.word	0x080089b3
 800896c:	080088e3 	.word	0x080088e3
 8008970:	080088e3 	.word	0x080088e3
 8008974:	08008a3b 	.word	0x08008a3b
 8008978:	080088e3 	.word	0x080088e3
 800897c:	08008a05 	.word	0x08008a05
 8008980:	080088e3 	.word	0x080088e3
 8008984:	080088e3 	.word	0x080088e3
 8008988:	080089bb 	.word	0x080089bb
 800898c:	3b45      	subs	r3, #69	; 0x45
 800898e:	2b02      	cmp	r3, #2
 8008990:	d8a7      	bhi.n	80088e2 <__ssvfiscanf_r+0xee>
 8008992:	2305      	movs	r3, #5
 8008994:	e01b      	b.n	80089ce <__ssvfiscanf_r+0x1da>
 8008996:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008998:	4621      	mov	r1, r4
 800899a:	4630      	mov	r0, r6
 800899c:	4798      	blx	r3
 800899e:	2800      	cmp	r0, #0
 80089a0:	f43f af68 	beq.w	8008874 <__ssvfiscanf_r+0x80>
 80089a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f040 808d 	bne.w	8008ac6 <__ssvfiscanf_r+0x2d2>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	e08f      	b.n	8008ad2 <__ssvfiscanf_r+0x2de>
 80089b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089b4:	f042 0220 	orr.w	r2, r2, #32
 80089b8:	9241      	str	r2, [sp, #260]	; 0x104
 80089ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c0:	9241      	str	r2, [sp, #260]	; 0x104
 80089c2:	2210      	movs	r2, #16
 80089c4:	2b6f      	cmp	r3, #111	; 0x6f
 80089c6:	9242      	str	r2, [sp, #264]	; 0x108
 80089c8:	bf34      	ite	cc
 80089ca:	2303      	movcc	r3, #3
 80089cc:	2304      	movcs	r3, #4
 80089ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dd42      	ble.n	8008a5c <__ssvfiscanf_r+0x268>
 80089d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089d8:	0659      	lsls	r1, r3, #25
 80089da:	d404      	bmi.n	80089e6 <__ssvfiscanf_r+0x1f2>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	5cba      	ldrb	r2, [r7, r2]
 80089e2:	0712      	lsls	r2, r2, #28
 80089e4:	d441      	bmi.n	8008a6a <__ssvfiscanf_r+0x276>
 80089e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	dc50      	bgt.n	8008a8e <__ssvfiscanf_r+0x29a>
 80089ec:	466b      	mov	r3, sp
 80089ee:	4622      	mov	r2, r4
 80089f0:	a941      	add	r1, sp, #260	; 0x104
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 fb64 	bl	80090c0 <_scanf_chars>
 80089f8:	2801      	cmp	r0, #1
 80089fa:	d06e      	beq.n	8008ada <__ssvfiscanf_r+0x2e6>
 80089fc:	2802      	cmp	r0, #2
 80089fe:	f47f af20 	bne.w	8008842 <__ssvfiscanf_r+0x4e>
 8008a02:	e7cf      	b.n	80089a4 <__ssvfiscanf_r+0x1b0>
 8008a04:	220a      	movs	r2, #10
 8008a06:	e7dd      	b.n	80089c4 <__ssvfiscanf_r+0x1d0>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9342      	str	r3, [sp, #264]	; 0x108
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e7de      	b.n	80089ce <__ssvfiscanf_r+0x1da>
 8008a10:	2308      	movs	r3, #8
 8008a12:	9342      	str	r3, [sp, #264]	; 0x108
 8008a14:	2304      	movs	r3, #4
 8008a16:	e7da      	b.n	80089ce <__ssvfiscanf_r+0x1da>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	f000 fcc4 	bl	80093a8 <__sccl>
 8008a20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a26:	9341      	str	r3, [sp, #260]	; 0x104
 8008a28:	4605      	mov	r5, r0
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e7cf      	b.n	80089ce <__ssvfiscanf_r+0x1da>
 8008a2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	9341      	str	r3, [sp, #260]	; 0x104
 8008a36:	2300      	movs	r3, #0
 8008a38:	e7c9      	b.n	80089ce <__ssvfiscanf_r+0x1da>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e7c7      	b.n	80089ce <__ssvfiscanf_r+0x1da>
 8008a3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008a40:	06c3      	lsls	r3, r0, #27
 8008a42:	f53f aefe 	bmi.w	8008842 <__ssvfiscanf_r+0x4e>
 8008a46:	9b00      	ldr	r3, [sp, #0]
 8008a48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a4a:	1d19      	adds	r1, r3, #4
 8008a4c:	9100      	str	r1, [sp, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f010 0f01 	tst.w	r0, #1
 8008a54:	bf14      	ite	ne
 8008a56:	801a      	strhne	r2, [r3, #0]
 8008a58:	601a      	streq	r2, [r3, #0]
 8008a5a:	e6f2      	b.n	8008842 <__ssvfiscanf_r+0x4e>
 8008a5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4630      	mov	r0, r6
 8008a62:	4798      	blx	r3
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d0b6      	beq.n	80089d6 <__ssvfiscanf_r+0x1e2>
 8008a68:	e79c      	b.n	80089a4 <__ssvfiscanf_r+0x1b0>
 8008a6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a6c:	3201      	adds	r2, #1
 8008a6e:	9245      	str	r2, [sp, #276]	; 0x114
 8008a70:	6862      	ldr	r2, [r4, #4]
 8008a72:	3a01      	subs	r2, #1
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	6062      	str	r2, [r4, #4]
 8008a78:	dd02      	ble.n	8008a80 <__ssvfiscanf_r+0x28c>
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	e7ad      	b.n	80089dc <__ssvfiscanf_r+0x1e8>
 8008a80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a82:	4621      	mov	r1, r4
 8008a84:	4630      	mov	r0, r6
 8008a86:	4798      	blx	r3
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0a7      	beq.n	80089dc <__ssvfiscanf_r+0x1e8>
 8008a8c:	e78a      	b.n	80089a4 <__ssvfiscanf_r+0x1b0>
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	dc0e      	bgt.n	8008ab0 <__ssvfiscanf_r+0x2bc>
 8008a92:	466b      	mov	r3, sp
 8008a94:	4622      	mov	r2, r4
 8008a96:	a941      	add	r1, sp, #260	; 0x104
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 fb6b 	bl	8009174 <_scanf_i>
 8008a9e:	e7ab      	b.n	80089f8 <__ssvfiscanf_r+0x204>
 8008aa0:	08008741 	.word	0x08008741
 8008aa4:	080087bb 	.word	0x080087bb
 8008aa8:	0800991b 	.word	0x0800991b
 8008aac:	080098cc 	.word	0x080098cc
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <__ssvfiscanf_r+0x2ec>)
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f43f aec5 	beq.w	8008842 <__ssvfiscanf_r+0x4e>
 8008ab8:	466b      	mov	r3, sp
 8008aba:	4622      	mov	r2, r4
 8008abc:	a941      	add	r1, sp, #260	; 0x104
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f3af 8000 	nop.w
 8008ac4:	e798      	b.n	80089f8 <__ssvfiscanf_r+0x204>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008acc:	bf18      	it	ne
 8008ace:	f04f 30ff 	movne.w	r0, #4294967295
 8008ad2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ada:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008adc:	e7f9      	b.n	8008ad2 <__ssvfiscanf_r+0x2de>
 8008ade:	bf00      	nop
 8008ae0:	00000000 	.word	0x00000000

08008ae4 <__sfputc_r>:
 8008ae4:	6893      	ldr	r3, [r2, #8]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	b410      	push	{r4}
 8008aec:	6093      	str	r3, [r2, #8]
 8008aee:	da08      	bge.n	8008b02 <__sfputc_r+0x1e>
 8008af0:	6994      	ldr	r4, [r2, #24]
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	db01      	blt.n	8008afa <__sfputc_r+0x16>
 8008af6:	290a      	cmp	r1, #10
 8008af8:	d103      	bne.n	8008b02 <__sfputc_r+0x1e>
 8008afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008afe:	f7ff ba2b 	b.w	8007f58 <__swbuf_r>
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	1c58      	adds	r0, r3, #1
 8008b06:	6010      	str	r0, [r2, #0]
 8008b08:	7019      	strb	r1, [r3, #0]
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <__sfputs_r>:
 8008b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b14:	4606      	mov	r6, r0
 8008b16:	460f      	mov	r7, r1
 8008b18:	4614      	mov	r4, r2
 8008b1a:	18d5      	adds	r5, r2, r3
 8008b1c:	42ac      	cmp	r4, r5
 8008b1e:	d101      	bne.n	8008b24 <__sfputs_r+0x12>
 8008b20:	2000      	movs	r0, #0
 8008b22:	e007      	b.n	8008b34 <__sfputs_r+0x22>
 8008b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b28:	463a      	mov	r2, r7
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffda 	bl	8008ae4 <__sfputc_r>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d1f3      	bne.n	8008b1c <__sfputs_r+0xa>
 8008b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b38 <_vfiprintf_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	460d      	mov	r5, r1
 8008b3e:	b09d      	sub	sp, #116	; 0x74
 8008b40:	4614      	mov	r4, r2
 8008b42:	4698      	mov	r8, r3
 8008b44:	4606      	mov	r6, r0
 8008b46:	b118      	cbz	r0, 8008b50 <_vfiprintf_r+0x18>
 8008b48:	6983      	ldr	r3, [r0, #24]
 8008b4a:	b90b      	cbnz	r3, 8008b50 <_vfiprintf_r+0x18>
 8008b4c:	f7ff fc00 	bl	8008350 <__sinit>
 8008b50:	4b89      	ldr	r3, [pc, #548]	; (8008d78 <_vfiprintf_r+0x240>)
 8008b52:	429d      	cmp	r5, r3
 8008b54:	d11b      	bne.n	8008b8e <_vfiprintf_r+0x56>
 8008b56:	6875      	ldr	r5, [r6, #4]
 8008b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b5a:	07d9      	lsls	r1, r3, #31
 8008b5c:	d405      	bmi.n	8008b6a <_vfiprintf_r+0x32>
 8008b5e:	89ab      	ldrh	r3, [r5, #12]
 8008b60:	059a      	lsls	r2, r3, #22
 8008b62:	d402      	bmi.n	8008b6a <_vfiprintf_r+0x32>
 8008b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b66:	f7ff fc91 	bl	800848c <__retarget_lock_acquire_recursive>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	071b      	lsls	r3, r3, #28
 8008b6e:	d501      	bpl.n	8008b74 <_vfiprintf_r+0x3c>
 8008b70:	692b      	ldr	r3, [r5, #16]
 8008b72:	b9eb      	cbnz	r3, 8008bb0 <_vfiprintf_r+0x78>
 8008b74:	4629      	mov	r1, r5
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff fa52 	bl	8008020 <__swsetup_r>
 8008b7c:	b1c0      	cbz	r0, 8008bb0 <_vfiprintf_r+0x78>
 8008b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b80:	07dc      	lsls	r4, r3, #31
 8008b82:	d50e      	bpl.n	8008ba2 <_vfiprintf_r+0x6a>
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	b01d      	add	sp, #116	; 0x74
 8008b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8e:	4b7b      	ldr	r3, [pc, #492]	; (8008d7c <_vfiprintf_r+0x244>)
 8008b90:	429d      	cmp	r5, r3
 8008b92:	d101      	bne.n	8008b98 <_vfiprintf_r+0x60>
 8008b94:	68b5      	ldr	r5, [r6, #8]
 8008b96:	e7df      	b.n	8008b58 <_vfiprintf_r+0x20>
 8008b98:	4b79      	ldr	r3, [pc, #484]	; (8008d80 <_vfiprintf_r+0x248>)
 8008b9a:	429d      	cmp	r5, r3
 8008b9c:	bf08      	it	eq
 8008b9e:	68f5      	ldreq	r5, [r6, #12]
 8008ba0:	e7da      	b.n	8008b58 <_vfiprintf_r+0x20>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	0598      	lsls	r0, r3, #22
 8008ba6:	d4ed      	bmi.n	8008b84 <_vfiprintf_r+0x4c>
 8008ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008baa:	f7ff fc70 	bl	800848e <__retarget_lock_release_recursive>
 8008bae:	e7e9      	b.n	8008b84 <_vfiprintf_r+0x4c>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb4:	2320      	movs	r3, #32
 8008bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bbe:	2330      	movs	r3, #48	; 0x30
 8008bc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d84 <_vfiprintf_r+0x24c>
 8008bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc8:	f04f 0901 	mov.w	r9, #1
 8008bcc:	4623      	mov	r3, r4
 8008bce:	469a      	mov	sl, r3
 8008bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd4:	b10a      	cbz	r2, 8008bda <_vfiprintf_r+0xa2>
 8008bd6:	2a25      	cmp	r2, #37	; 0x25
 8008bd8:	d1f9      	bne.n	8008bce <_vfiprintf_r+0x96>
 8008bda:	ebba 0b04 	subs.w	fp, sl, r4
 8008bde:	d00b      	beq.n	8008bf8 <_vfiprintf_r+0xc0>
 8008be0:	465b      	mov	r3, fp
 8008be2:	4622      	mov	r2, r4
 8008be4:	4629      	mov	r1, r5
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ff93 	bl	8008b12 <__sfputs_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	f000 80aa 	beq.w	8008d46 <_vfiprintf_r+0x20e>
 8008bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf4:	445a      	add	r2, fp
 8008bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80a2 	beq.w	8008d46 <_vfiprintf_r+0x20e>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f04f 32ff 	mov.w	r2, #4294967295
 8008c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c0c:	f10a 0a01 	add.w	sl, sl, #1
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	9307      	str	r3, [sp, #28]
 8008c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c18:	931a      	str	r3, [sp, #104]	; 0x68
 8008c1a:	4654      	mov	r4, sl
 8008c1c:	2205      	movs	r2, #5
 8008c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c22:	4858      	ldr	r0, [pc, #352]	; (8008d84 <_vfiprintf_r+0x24c>)
 8008c24:	f7f7 faec 	bl	8000200 <memchr>
 8008c28:	9a04      	ldr	r2, [sp, #16]
 8008c2a:	b9d8      	cbnz	r0, 8008c64 <_vfiprintf_r+0x12c>
 8008c2c:	06d1      	lsls	r1, r2, #27
 8008c2e:	bf44      	itt	mi
 8008c30:	2320      	movmi	r3, #32
 8008c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c36:	0713      	lsls	r3, r2, #28
 8008c38:	bf44      	itt	mi
 8008c3a:	232b      	movmi	r3, #43	; 0x2b
 8008c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c40:	f89a 3000 	ldrb.w	r3, [sl]
 8008c44:	2b2a      	cmp	r3, #42	; 0x2a
 8008c46:	d015      	beq.n	8008c74 <_vfiprintf_r+0x13c>
 8008c48:	9a07      	ldr	r2, [sp, #28]
 8008c4a:	4654      	mov	r4, sl
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f04f 0c0a 	mov.w	ip, #10
 8008c52:	4621      	mov	r1, r4
 8008c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c58:	3b30      	subs	r3, #48	; 0x30
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d94e      	bls.n	8008cfc <_vfiprintf_r+0x1c4>
 8008c5e:	b1b0      	cbz	r0, 8008c8e <_vfiprintf_r+0x156>
 8008c60:	9207      	str	r2, [sp, #28]
 8008c62:	e014      	b.n	8008c8e <_vfiprintf_r+0x156>
 8008c64:	eba0 0308 	sub.w	r3, r0, r8
 8008c68:	fa09 f303 	lsl.w	r3, r9, r3
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	46a2      	mov	sl, r4
 8008c72:	e7d2      	b.n	8008c1a <_vfiprintf_r+0xe2>
 8008c74:	9b03      	ldr	r3, [sp, #12]
 8008c76:	1d19      	adds	r1, r3, #4
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	9103      	str	r1, [sp, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bfbb      	ittet	lt
 8008c80:	425b      	neglt	r3, r3
 8008c82:	f042 0202 	orrlt.w	r2, r2, #2
 8008c86:	9307      	strge	r3, [sp, #28]
 8008c88:	9307      	strlt	r3, [sp, #28]
 8008c8a:	bfb8      	it	lt
 8008c8c:	9204      	strlt	r2, [sp, #16]
 8008c8e:	7823      	ldrb	r3, [r4, #0]
 8008c90:	2b2e      	cmp	r3, #46	; 0x2e
 8008c92:	d10c      	bne.n	8008cae <_vfiprintf_r+0x176>
 8008c94:	7863      	ldrb	r3, [r4, #1]
 8008c96:	2b2a      	cmp	r3, #42	; 0x2a
 8008c98:	d135      	bne.n	8008d06 <_vfiprintf_r+0x1ce>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	1d1a      	adds	r2, r3, #4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	9203      	str	r2, [sp, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bfb8      	it	lt
 8008ca6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008caa:	3402      	adds	r4, #2
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d94 <_vfiprintf_r+0x25c>
 8008cb2:	7821      	ldrb	r1, [r4, #0]
 8008cb4:	2203      	movs	r2, #3
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	f7f7 faa2 	bl	8000200 <memchr>
 8008cbc:	b140      	cbz	r0, 8008cd0 <_vfiprintf_r+0x198>
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	eba0 000a 	sub.w	r0, r0, sl
 8008cc4:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc8:	9b04      	ldr	r3, [sp, #16]
 8008cca:	4303      	orrs	r3, r0
 8008ccc:	3401      	adds	r4, #1
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd4:	482c      	ldr	r0, [pc, #176]	; (8008d88 <_vfiprintf_r+0x250>)
 8008cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cda:	2206      	movs	r2, #6
 8008cdc:	f7f7 fa90 	bl	8000200 <memchr>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d03f      	beq.n	8008d64 <_vfiprintf_r+0x22c>
 8008ce4:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <_vfiprintf_r+0x254>)
 8008ce6:	bb1b      	cbnz	r3, 8008d30 <_vfiprintf_r+0x1f8>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	3307      	adds	r3, #7
 8008cec:	f023 0307 	bic.w	r3, r3, #7
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	9303      	str	r3, [sp, #12]
 8008cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf6:	443b      	add	r3, r7
 8008cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfa:	e767      	b.n	8008bcc <_vfiprintf_r+0x94>
 8008cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d00:	460c      	mov	r4, r1
 8008d02:	2001      	movs	r0, #1
 8008d04:	e7a5      	b.n	8008c52 <_vfiprintf_r+0x11a>
 8008d06:	2300      	movs	r3, #0
 8008d08:	3401      	adds	r4, #1
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f04f 0c0a 	mov.w	ip, #10
 8008d12:	4620      	mov	r0, r4
 8008d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d18:	3a30      	subs	r2, #48	; 0x30
 8008d1a:	2a09      	cmp	r2, #9
 8008d1c:	d903      	bls.n	8008d26 <_vfiprintf_r+0x1ee>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0c5      	beq.n	8008cae <_vfiprintf_r+0x176>
 8008d22:	9105      	str	r1, [sp, #20]
 8008d24:	e7c3      	b.n	8008cae <_vfiprintf_r+0x176>
 8008d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e7f0      	b.n	8008d12 <_vfiprintf_r+0x1da>
 8008d30:	ab03      	add	r3, sp, #12
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	462a      	mov	r2, r5
 8008d36:	4b16      	ldr	r3, [pc, #88]	; (8008d90 <_vfiprintf_r+0x258>)
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f3af 8000 	nop.w
 8008d40:	4607      	mov	r7, r0
 8008d42:	1c78      	adds	r0, r7, #1
 8008d44:	d1d6      	bne.n	8008cf4 <_vfiprintf_r+0x1bc>
 8008d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d48:	07d9      	lsls	r1, r3, #31
 8008d4a:	d405      	bmi.n	8008d58 <_vfiprintf_r+0x220>
 8008d4c:	89ab      	ldrh	r3, [r5, #12]
 8008d4e:	059a      	lsls	r2, r3, #22
 8008d50:	d402      	bmi.n	8008d58 <_vfiprintf_r+0x220>
 8008d52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d54:	f7ff fb9b 	bl	800848e <__retarget_lock_release_recursive>
 8008d58:	89ab      	ldrh	r3, [r5, #12]
 8008d5a:	065b      	lsls	r3, r3, #25
 8008d5c:	f53f af12 	bmi.w	8008b84 <_vfiprintf_r+0x4c>
 8008d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d62:	e711      	b.n	8008b88 <_vfiprintf_r+0x50>
 8008d64:	ab03      	add	r3, sp, #12
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <_vfiprintf_r+0x258>)
 8008d6c:	a904      	add	r1, sp, #16
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f880 	bl	8008e74 <_printf_i>
 8008d74:	e7e4      	b.n	8008d40 <_vfiprintf_r+0x208>
 8008d76:	bf00      	nop
 8008d78:	0800988c 	.word	0x0800988c
 8008d7c:	080098ac 	.word	0x080098ac
 8008d80:	0800986c 	.word	0x0800986c
 8008d84:	080098d0 	.word	0x080098d0
 8008d88:	080098d6 	.word	0x080098d6
 8008d8c:	00000000 	.word	0x00000000
 8008d90:	08008b13 	.word	0x08008b13
 8008d94:	080098cc 	.word	0x080098cc

08008d98 <_printf_common>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	4699      	mov	r9, r3
 8008da0:	688a      	ldr	r2, [r1, #8]
 8008da2:	690b      	ldr	r3, [r1, #16]
 8008da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	bfb8      	it	lt
 8008dac:	4613      	movlt	r3, r2
 8008dae:	6033      	str	r3, [r6, #0]
 8008db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008db4:	4607      	mov	r7, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b10a      	cbz	r2, 8008dbe <_printf_common+0x26>
 8008dba:	3301      	adds	r3, #1
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	0699      	lsls	r1, r3, #26
 8008dc2:	bf42      	ittt	mi
 8008dc4:	6833      	ldrmi	r3, [r6, #0]
 8008dc6:	3302      	addmi	r3, #2
 8008dc8:	6033      	strmi	r3, [r6, #0]
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	f015 0506 	ands.w	r5, r5, #6
 8008dd0:	d106      	bne.n	8008de0 <_printf_common+0x48>
 8008dd2:	f104 0a19 	add.w	sl, r4, #25
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	6832      	ldr	r2, [r6, #0]
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc26      	bgt.n	8008e2e <_printf_common+0x96>
 8008de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008de4:	1e13      	subs	r3, r2, #0
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	2301      	movne	r3, #1
 8008dec:	0692      	lsls	r2, r2, #26
 8008dee:	d42b      	bmi.n	8008e48 <_printf_common+0xb0>
 8008df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008df4:	4649      	mov	r1, r9
 8008df6:	4638      	mov	r0, r7
 8008df8:	47c0      	blx	r8
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d01e      	beq.n	8008e3c <_printf_common+0xa4>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	68e5      	ldr	r5, [r4, #12]
 8008e02:	6832      	ldr	r2, [r6, #0]
 8008e04:	f003 0306 	and.w	r3, r3, #6
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	bf08      	it	eq
 8008e0c:	1aad      	subeq	r5, r5, r2
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	bf0c      	ite	eq
 8008e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e18:	2500      	movne	r5, #0
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bfc4      	itt	gt
 8008e1e:	1a9b      	subgt	r3, r3, r2
 8008e20:	18ed      	addgt	r5, r5, r3
 8008e22:	2600      	movs	r6, #0
 8008e24:	341a      	adds	r4, #26
 8008e26:	42b5      	cmp	r5, r6
 8008e28:	d11a      	bne.n	8008e60 <_printf_common+0xc8>
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e008      	b.n	8008e40 <_printf_common+0xa8>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4652      	mov	r2, sl
 8008e32:	4649      	mov	r1, r9
 8008e34:	4638      	mov	r0, r7
 8008e36:	47c0      	blx	r8
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d103      	bne.n	8008e44 <_printf_common+0xac>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	3501      	adds	r5, #1
 8008e46:	e7c6      	b.n	8008dd6 <_printf_common+0x3e>
 8008e48:	18e1      	adds	r1, r4, r3
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	2030      	movs	r0, #48	; 0x30
 8008e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e52:	4422      	add	r2, r4
 8008e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	e7c7      	b.n	8008df0 <_printf_common+0x58>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4622      	mov	r2, r4
 8008e64:	4649      	mov	r1, r9
 8008e66:	4638      	mov	r0, r7
 8008e68:	47c0      	blx	r8
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d0e6      	beq.n	8008e3c <_printf_common+0xa4>
 8008e6e:	3601      	adds	r6, #1
 8008e70:	e7d9      	b.n	8008e26 <_printf_common+0x8e>
	...

08008e74 <_printf_i>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	7e0f      	ldrb	r7, [r1, #24]
 8008e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e7c:	2f78      	cmp	r7, #120	; 0x78
 8008e7e:	4691      	mov	r9, r2
 8008e80:	4680      	mov	r8, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	469a      	mov	sl, r3
 8008e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e8a:	d807      	bhi.n	8008e9c <_printf_i+0x28>
 8008e8c:	2f62      	cmp	r7, #98	; 0x62
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x32>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 80d8 	beq.w	8009046 <_printf_i+0x1d2>
 8008e96:	2f58      	cmp	r7, #88	; 0x58
 8008e98:	f000 80a3 	beq.w	8008fe2 <_printf_i+0x16e>
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea4:	e03a      	b.n	8008f1c <_printf_i+0xa8>
 8008ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eaa:	2b15      	cmp	r3, #21
 8008eac:	d8f6      	bhi.n	8008e9c <_printf_i+0x28>
 8008eae:	a101      	add	r1, pc, #4	; (adr r1, 8008eb4 <_printf_i+0x40>)
 8008eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008e9d 	.word	0x08008e9d
 8008ec0:	08008e9d 	.word	0x08008e9d
 8008ec4:	08008e9d 	.word	0x08008e9d
 8008ec8:	08008e9d 	.word	0x08008e9d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e9d 	.word	0x08008e9d
 8008ed4:	08008e9d 	.word	0x08008e9d
 8008ed8:	08008e9d 	.word	0x08008e9d
 8008edc:	08008e9d 	.word	0x08008e9d
 8008ee0:	0800902d 	.word	0x0800902d
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	0800900f 	.word	0x0800900f
 8008eec:	08008e9d 	.word	0x08008e9d
 8008ef0:	08008e9d 	.word	0x08008e9d
 8008ef4:	0800904f 	.word	0x0800904f
 8008ef8:	08008e9d 	.word	0x08008e9d
 8008efc:	08008f51 	.word	0x08008f51
 8008f00:	08008e9d 	.word	0x08008e9d
 8008f04:	08008e9d 	.word	0x08008e9d
 8008f08:	08009017 	.word	0x08009017
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e0a3      	b.n	8009068 <_printf_i+0x1f4>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	6829      	ldr	r1, [r5, #0]
 8008f24:	0606      	lsls	r6, r0, #24
 8008f26:	f101 0304 	add.w	r3, r1, #4
 8008f2a:	d50a      	bpl.n	8008f42 <_printf_i+0xce>
 8008f2c:	680e      	ldr	r6, [r1, #0]
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	da03      	bge.n	8008f3c <_printf_i+0xc8>
 8008f34:	232d      	movs	r3, #45	; 0x2d
 8008f36:	4276      	negs	r6, r6
 8008f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f3c:	485e      	ldr	r0, [pc, #376]	; (80090b8 <_printf_i+0x244>)
 8008f3e:	230a      	movs	r3, #10
 8008f40:	e019      	b.n	8008f76 <_printf_i+0x102>
 8008f42:	680e      	ldr	r6, [r1, #0]
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f4a:	bf18      	it	ne
 8008f4c:	b236      	sxthne	r6, r6
 8008f4e:	e7ef      	b.n	8008f30 <_printf_i+0xbc>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	6029      	str	r1, [r5, #0]
 8008f58:	0601      	lsls	r1, r0, #24
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0xec>
 8008f5c:	681e      	ldr	r6, [r3, #0]
 8008f5e:	e002      	b.n	8008f66 <_printf_i+0xf2>
 8008f60:	0646      	lsls	r6, r0, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0xe8>
 8008f64:	881e      	ldrh	r6, [r3, #0]
 8008f66:	4854      	ldr	r0, [pc, #336]	; (80090b8 <_printf_i+0x244>)
 8008f68:	2f6f      	cmp	r7, #111	; 0x6f
 8008f6a:	bf0c      	ite	eq
 8008f6c:	2308      	moveq	r3, #8
 8008f6e:	230a      	movne	r3, #10
 8008f70:	2100      	movs	r1, #0
 8008f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f76:	6865      	ldr	r5, [r4, #4]
 8008f78:	60a5      	str	r5, [r4, #8]
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	bfa2      	ittt	ge
 8008f7e:	6821      	ldrge	r1, [r4, #0]
 8008f80:	f021 0104 	bicge.w	r1, r1, #4
 8008f84:	6021      	strge	r1, [r4, #0]
 8008f86:	b90e      	cbnz	r6, 8008f8c <_printf_i+0x118>
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	d04d      	beq.n	8009028 <_printf_i+0x1b4>
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f92:	fb03 6711 	mls	r7, r3, r1, r6
 8008f96:	5dc7      	ldrb	r7, [r0, r7]
 8008f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	d9f4      	bls.n	8008f8e <_printf_i+0x11a>
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d10b      	bne.n	8008fc0 <_printf_i+0x14c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07de      	lsls	r6, r3, #31
 8008fac:	d508      	bpl.n	8008fc0 <_printf_i+0x14c>
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4299      	cmp	r1, r3
 8008fb4:	bfde      	ittt	le
 8008fb6:	2330      	movle	r3, #48	; 0x30
 8008fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fc0:	1b52      	subs	r2, r2, r5
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	464b      	mov	r3, r9
 8008fca:	aa03      	add	r2, sp, #12
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fee2 	bl	8008d98 <_printf_common>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d14c      	bne.n	8009072 <_printf_i+0x1fe>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	b004      	add	sp, #16
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	4835      	ldr	r0, [pc, #212]	; (80090b8 <_printf_i+0x244>)
 8008fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fe8:	6829      	ldr	r1, [r5, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff0:	6029      	str	r1, [r5, #0]
 8008ff2:	061d      	lsls	r5, r3, #24
 8008ff4:	d514      	bpl.n	8009020 <_printf_i+0x1ac>
 8008ff6:	07df      	lsls	r7, r3, #31
 8008ff8:	bf44      	itt	mi
 8008ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8008ffe:	6023      	strmi	r3, [r4, #0]
 8009000:	b91e      	cbnz	r6, 800900a <_printf_i+0x196>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f023 0320 	bic.w	r3, r3, #32
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	2310      	movs	r3, #16
 800900c:	e7b0      	b.n	8008f70 <_printf_i+0xfc>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f043 0320 	orr.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2378      	movs	r3, #120	; 0x78
 8009018:	4828      	ldr	r0, [pc, #160]	; (80090bc <_printf_i+0x248>)
 800901a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800901e:	e7e3      	b.n	8008fe8 <_printf_i+0x174>
 8009020:	0659      	lsls	r1, r3, #25
 8009022:	bf48      	it	mi
 8009024:	b2b6      	uxthmi	r6, r6
 8009026:	e7e6      	b.n	8008ff6 <_printf_i+0x182>
 8009028:	4615      	mov	r5, r2
 800902a:	e7bb      	b.n	8008fa4 <_printf_i+0x130>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	6826      	ldr	r6, [r4, #0]
 8009030:	6961      	ldr	r1, [r4, #20]
 8009032:	1d18      	adds	r0, r3, #4
 8009034:	6028      	str	r0, [r5, #0]
 8009036:	0635      	lsls	r5, r6, #24
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	d501      	bpl.n	8009040 <_printf_i+0x1cc>
 800903c:	6019      	str	r1, [r3, #0]
 800903e:	e002      	b.n	8009046 <_printf_i+0x1d2>
 8009040:	0670      	lsls	r0, r6, #25
 8009042:	d5fb      	bpl.n	800903c <_printf_i+0x1c8>
 8009044:	8019      	strh	r1, [r3, #0]
 8009046:	2300      	movs	r3, #0
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	4615      	mov	r5, r2
 800904c:	e7ba      	b.n	8008fc4 <_printf_i+0x150>
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	1d1a      	adds	r2, r3, #4
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	681d      	ldr	r5, [r3, #0]
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	2100      	movs	r1, #0
 800905a:	4628      	mov	r0, r5
 800905c:	f7f7 f8d0 	bl	8000200 <memchr>
 8009060:	b108      	cbz	r0, 8009066 <_printf_i+0x1f2>
 8009062:	1b40      	subs	r0, r0, r5
 8009064:	6060      	str	r0, [r4, #4]
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	2300      	movs	r3, #0
 800906c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009070:	e7a8      	b.n	8008fc4 <_printf_i+0x150>
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	462a      	mov	r2, r5
 8009076:	4649      	mov	r1, r9
 8009078:	4640      	mov	r0, r8
 800907a:	47d0      	blx	sl
 800907c:	3001      	adds	r0, #1
 800907e:	d0ab      	beq.n	8008fd8 <_printf_i+0x164>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	079b      	lsls	r3, r3, #30
 8009084:	d413      	bmi.n	80090ae <_printf_i+0x23a>
 8009086:	68e0      	ldr	r0, [r4, #12]
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	4298      	cmp	r0, r3
 800908c:	bfb8      	it	lt
 800908e:	4618      	movlt	r0, r3
 8009090:	e7a4      	b.n	8008fdc <_printf_i+0x168>
 8009092:	2301      	movs	r3, #1
 8009094:	4632      	mov	r2, r6
 8009096:	4649      	mov	r1, r9
 8009098:	4640      	mov	r0, r8
 800909a:	47d0      	blx	sl
 800909c:	3001      	adds	r0, #1
 800909e:	d09b      	beq.n	8008fd8 <_printf_i+0x164>
 80090a0:	3501      	adds	r5, #1
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	9903      	ldr	r1, [sp, #12]
 80090a6:	1a5b      	subs	r3, r3, r1
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dcf2      	bgt.n	8009092 <_printf_i+0x21e>
 80090ac:	e7eb      	b.n	8009086 <_printf_i+0x212>
 80090ae:	2500      	movs	r5, #0
 80090b0:	f104 0619 	add.w	r6, r4, #25
 80090b4:	e7f5      	b.n	80090a2 <_printf_i+0x22e>
 80090b6:	bf00      	nop
 80090b8:	080098dd 	.word	0x080098dd
 80090bc:	080098ee 	.word	0x080098ee

080090c0 <_scanf_chars>:
 80090c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	4615      	mov	r5, r2
 80090c6:	688a      	ldr	r2, [r1, #8]
 80090c8:	4680      	mov	r8, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b932      	cbnz	r2, 80090dc <_scanf_chars+0x1c>
 80090ce:	698a      	ldr	r2, [r1, #24]
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	bf0c      	ite	eq
 80090d4:	2201      	moveq	r2, #1
 80090d6:	f04f 32ff 	movne.w	r2, #4294967295
 80090da:	608a      	str	r2, [r1, #8]
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009170 <_scanf_chars+0xb0>
 80090e2:	06d1      	lsls	r1, r2, #27
 80090e4:	bf5f      	itttt	pl
 80090e6:	681a      	ldrpl	r2, [r3, #0]
 80090e8:	1d11      	addpl	r1, r2, #4
 80090ea:	6019      	strpl	r1, [r3, #0]
 80090ec:	6816      	ldrpl	r6, [r2, #0]
 80090ee:	2700      	movs	r7, #0
 80090f0:	69a0      	ldr	r0, [r4, #24]
 80090f2:	b188      	cbz	r0, 8009118 <_scanf_chars+0x58>
 80090f4:	2801      	cmp	r0, #1
 80090f6:	d107      	bne.n	8009108 <_scanf_chars+0x48>
 80090f8:	682a      	ldr	r2, [r5, #0]
 80090fa:	7811      	ldrb	r1, [r2, #0]
 80090fc:	6962      	ldr	r2, [r4, #20]
 80090fe:	5c52      	ldrb	r2, [r2, r1]
 8009100:	b952      	cbnz	r2, 8009118 <_scanf_chars+0x58>
 8009102:	2f00      	cmp	r7, #0
 8009104:	d031      	beq.n	800916a <_scanf_chars+0xaa>
 8009106:	e022      	b.n	800914e <_scanf_chars+0x8e>
 8009108:	2802      	cmp	r0, #2
 800910a:	d120      	bne.n	800914e <_scanf_chars+0x8e>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009114:	071b      	lsls	r3, r3, #28
 8009116:	d41a      	bmi.n	800914e <_scanf_chars+0x8e>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	06da      	lsls	r2, r3, #27
 800911c:	bf5e      	ittt	pl
 800911e:	682b      	ldrpl	r3, [r5, #0]
 8009120:	781b      	ldrbpl	r3, [r3, #0]
 8009122:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009126:	682a      	ldr	r2, [r5, #0]
 8009128:	686b      	ldr	r3, [r5, #4]
 800912a:	3201      	adds	r2, #1
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	68a2      	ldr	r2, [r4, #8]
 8009130:	3b01      	subs	r3, #1
 8009132:	3a01      	subs	r2, #1
 8009134:	606b      	str	r3, [r5, #4]
 8009136:	3701      	adds	r7, #1
 8009138:	60a2      	str	r2, [r4, #8]
 800913a:	b142      	cbz	r2, 800914e <_scanf_chars+0x8e>
 800913c:	2b00      	cmp	r3, #0
 800913e:	dcd7      	bgt.n	80090f0 <_scanf_chars+0x30>
 8009140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009144:	4629      	mov	r1, r5
 8009146:	4640      	mov	r0, r8
 8009148:	4798      	blx	r3
 800914a:	2800      	cmp	r0, #0
 800914c:	d0d0      	beq.n	80090f0 <_scanf_chars+0x30>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f013 0310 	ands.w	r3, r3, #16
 8009154:	d105      	bne.n	8009162 <_scanf_chars+0xa2>
 8009156:	68e2      	ldr	r2, [r4, #12]
 8009158:	3201      	adds	r2, #1
 800915a:	60e2      	str	r2, [r4, #12]
 800915c:	69a2      	ldr	r2, [r4, #24]
 800915e:	b102      	cbz	r2, 8009162 <_scanf_chars+0xa2>
 8009160:	7033      	strb	r3, [r6, #0]
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	443b      	add	r3, r7
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	2000      	movs	r0, #0
 800916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916e:	bf00      	nop
 8009170:	0800991b 	.word	0x0800991b

08009174 <_scanf_i>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	4698      	mov	r8, r3
 800917a:	4b76      	ldr	r3, [pc, #472]	; (8009354 <_scanf_i+0x1e0>)
 800917c:	460c      	mov	r4, r1
 800917e:	4682      	mov	sl, r0
 8009180:	4616      	mov	r6, r2
 8009182:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009186:	b087      	sub	sp, #28
 8009188:	ab03      	add	r3, sp, #12
 800918a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800918e:	4b72      	ldr	r3, [pc, #456]	; (8009358 <_scanf_i+0x1e4>)
 8009190:	69a1      	ldr	r1, [r4, #24]
 8009192:	4a72      	ldr	r2, [pc, #456]	; (800935c <_scanf_i+0x1e8>)
 8009194:	2903      	cmp	r1, #3
 8009196:	bf18      	it	ne
 8009198:	461a      	movne	r2, r3
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	9201      	str	r2, [sp, #4]
 800919e:	1e5a      	subs	r2, r3, #1
 80091a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80091a4:	bf88      	it	hi
 80091a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80091aa:	4627      	mov	r7, r4
 80091ac:	bf82      	ittt	hi
 80091ae:	eb03 0905 	addhi.w	r9, r3, r5
 80091b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80091b6:	60a3      	strhi	r3, [r4, #8]
 80091b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80091bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80091c0:	bf98      	it	ls
 80091c2:	f04f 0900 	movls.w	r9, #0
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	463d      	mov	r5, r7
 80091ca:	f04f 0b00 	mov.w	fp, #0
 80091ce:	6831      	ldr	r1, [r6, #0]
 80091d0:	ab03      	add	r3, sp, #12
 80091d2:	7809      	ldrb	r1, [r1, #0]
 80091d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80091d8:	2202      	movs	r2, #2
 80091da:	f7f7 f811 	bl	8000200 <memchr>
 80091de:	b328      	cbz	r0, 800922c <_scanf_i+0xb8>
 80091e0:	f1bb 0f01 	cmp.w	fp, #1
 80091e4:	d159      	bne.n	800929a <_scanf_i+0x126>
 80091e6:	6862      	ldr	r2, [r4, #4]
 80091e8:	b92a      	cbnz	r2, 80091f6 <_scanf_i+0x82>
 80091ea:	6822      	ldr	r2, [r4, #0]
 80091ec:	2308      	movs	r3, #8
 80091ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091f2:	6063      	str	r3, [r4, #4]
 80091f4:	6022      	str	r2, [r4, #0]
 80091f6:	6822      	ldr	r2, [r4, #0]
 80091f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80091fc:	6022      	str	r2, [r4, #0]
 80091fe:	68a2      	ldr	r2, [r4, #8]
 8009200:	1e51      	subs	r1, r2, #1
 8009202:	60a1      	str	r1, [r4, #8]
 8009204:	b192      	cbz	r2, 800922c <_scanf_i+0xb8>
 8009206:	6832      	ldr	r2, [r6, #0]
 8009208:	1c51      	adds	r1, r2, #1
 800920a:	6031      	str	r1, [r6, #0]
 800920c:	7812      	ldrb	r2, [r2, #0]
 800920e:	f805 2b01 	strb.w	r2, [r5], #1
 8009212:	6872      	ldr	r2, [r6, #4]
 8009214:	3a01      	subs	r2, #1
 8009216:	2a00      	cmp	r2, #0
 8009218:	6072      	str	r2, [r6, #4]
 800921a:	dc07      	bgt.n	800922c <_scanf_i+0xb8>
 800921c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009220:	4631      	mov	r1, r6
 8009222:	4650      	mov	r0, sl
 8009224:	4790      	blx	r2
 8009226:	2800      	cmp	r0, #0
 8009228:	f040 8085 	bne.w	8009336 <_scanf_i+0x1c2>
 800922c:	f10b 0b01 	add.w	fp, fp, #1
 8009230:	f1bb 0f03 	cmp.w	fp, #3
 8009234:	d1cb      	bne.n	80091ce <_scanf_i+0x5a>
 8009236:	6863      	ldr	r3, [r4, #4]
 8009238:	b90b      	cbnz	r3, 800923e <_scanf_i+0xca>
 800923a:	230a      	movs	r3, #10
 800923c:	6063      	str	r3, [r4, #4]
 800923e:	6863      	ldr	r3, [r4, #4]
 8009240:	4947      	ldr	r1, [pc, #284]	; (8009360 <_scanf_i+0x1ec>)
 8009242:	6960      	ldr	r0, [r4, #20]
 8009244:	1ac9      	subs	r1, r1, r3
 8009246:	f000 f8af 	bl	80093a8 <__sccl>
 800924a:	f04f 0b00 	mov.w	fp, #0
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	6822      	ldr	r2, [r4, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d03d      	beq.n	80092d2 <_scanf_i+0x15e>
 8009256:	6831      	ldr	r1, [r6, #0]
 8009258:	6960      	ldr	r0, [r4, #20]
 800925a:	f891 c000 	ldrb.w	ip, [r1]
 800925e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009262:	2800      	cmp	r0, #0
 8009264:	d035      	beq.n	80092d2 <_scanf_i+0x15e>
 8009266:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800926a:	d124      	bne.n	80092b6 <_scanf_i+0x142>
 800926c:	0510      	lsls	r0, r2, #20
 800926e:	d522      	bpl.n	80092b6 <_scanf_i+0x142>
 8009270:	f10b 0b01 	add.w	fp, fp, #1
 8009274:	f1b9 0f00 	cmp.w	r9, #0
 8009278:	d003      	beq.n	8009282 <_scanf_i+0x10e>
 800927a:	3301      	adds	r3, #1
 800927c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009280:	60a3      	str	r3, [r4, #8]
 8009282:	6873      	ldr	r3, [r6, #4]
 8009284:	3b01      	subs	r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	6073      	str	r3, [r6, #4]
 800928a:	dd1b      	ble.n	80092c4 <_scanf_i+0x150>
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	6033      	str	r3, [r6, #0]
 8009292:	68a3      	ldr	r3, [r4, #8]
 8009294:	3b01      	subs	r3, #1
 8009296:	60a3      	str	r3, [r4, #8]
 8009298:	e7d9      	b.n	800924e <_scanf_i+0xda>
 800929a:	f1bb 0f02 	cmp.w	fp, #2
 800929e:	d1ae      	bne.n	80091fe <_scanf_i+0x8a>
 80092a0:	6822      	ldr	r2, [r4, #0]
 80092a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80092a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80092aa:	d1bf      	bne.n	800922c <_scanf_i+0xb8>
 80092ac:	2310      	movs	r3, #16
 80092ae:	6063      	str	r3, [r4, #4]
 80092b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092b4:	e7a2      	b.n	80091fc <_scanf_i+0x88>
 80092b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	780b      	ldrb	r3, [r1, #0]
 80092be:	f805 3b01 	strb.w	r3, [r5], #1
 80092c2:	e7de      	b.n	8009282 <_scanf_i+0x10e>
 80092c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092c8:	4631      	mov	r1, r6
 80092ca:	4650      	mov	r0, sl
 80092cc:	4798      	blx	r3
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d0df      	beq.n	8009292 <_scanf_i+0x11e>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	05db      	lsls	r3, r3, #23
 80092d6:	d50d      	bpl.n	80092f4 <_scanf_i+0x180>
 80092d8:	42bd      	cmp	r5, r7
 80092da:	d909      	bls.n	80092f0 <_scanf_i+0x17c>
 80092dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80092e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092e4:	4632      	mov	r2, r6
 80092e6:	4650      	mov	r0, sl
 80092e8:	4798      	blx	r3
 80092ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80092ee:	464d      	mov	r5, r9
 80092f0:	42bd      	cmp	r5, r7
 80092f2:	d02d      	beq.n	8009350 <_scanf_i+0x1dc>
 80092f4:	6822      	ldr	r2, [r4, #0]
 80092f6:	f012 0210 	ands.w	r2, r2, #16
 80092fa:	d113      	bne.n	8009324 <_scanf_i+0x1b0>
 80092fc:	702a      	strb	r2, [r5, #0]
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	9e01      	ldr	r6, [sp, #4]
 8009302:	4639      	mov	r1, r7
 8009304:	4650      	mov	r0, sl
 8009306:	47b0      	blx	r6
 8009308:	6821      	ldr	r1, [r4, #0]
 800930a:	f8d8 3000 	ldr.w	r3, [r8]
 800930e:	f011 0f20 	tst.w	r1, #32
 8009312:	d013      	beq.n	800933c <_scanf_i+0x1c8>
 8009314:	1d1a      	adds	r2, r3, #4
 8009316:	f8c8 2000 	str.w	r2, [r8]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6018      	str	r0, [r3, #0]
 800931e:	68e3      	ldr	r3, [r4, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60e3      	str	r3, [r4, #12]
 8009324:	1bed      	subs	r5, r5, r7
 8009326:	44ab      	add	fp, r5
 8009328:	6925      	ldr	r5, [r4, #16]
 800932a:	445d      	add	r5, fp
 800932c:	6125      	str	r5, [r4, #16]
 800932e:	2000      	movs	r0, #0
 8009330:	b007      	add	sp, #28
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	f04f 0b00 	mov.w	fp, #0
 800933a:	e7ca      	b.n	80092d2 <_scanf_i+0x15e>
 800933c:	1d1a      	adds	r2, r3, #4
 800933e:	f8c8 2000 	str.w	r2, [r8]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f011 0f01 	tst.w	r1, #1
 8009348:	bf14      	ite	ne
 800934a:	8018      	strhne	r0, [r3, #0]
 800934c:	6018      	streq	r0, [r3, #0]
 800934e:	e7e6      	b.n	800931e <_scanf_i+0x1aa>
 8009350:	2001      	movs	r0, #1
 8009352:	e7ed      	b.n	8009330 <_scanf_i+0x1bc>
 8009354:	08009814 	.word	0x08009814
 8009358:	08009605 	.word	0x08009605
 800935c:	0800951d 	.word	0x0800951d
 8009360:	08009918 	.word	0x08009918

08009364 <_read_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	; (8009384 <_read_r+0x20>)
 8009368:	4604      	mov	r4, r0
 800936a:	4608      	mov	r0, r1
 800936c:	4611      	mov	r1, r2
 800936e:	2200      	movs	r2, #0
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f7f8 fa46 	bl	8001804 <_read>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_read_r+0x1e>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_read_r+0x1e>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000758 	.word	0x20000758

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	; (80093a4 <_sbrk_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 fa88 	bl	80018a8 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000758 	.word	0x20000758

080093a8 <__sccl>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	780b      	ldrb	r3, [r1, #0]
 80093ac:	4604      	mov	r4, r0
 80093ae:	2b5e      	cmp	r3, #94	; 0x5e
 80093b0:	bf0b      	itete	eq
 80093b2:	784b      	ldrbeq	r3, [r1, #1]
 80093b4:	1c48      	addne	r0, r1, #1
 80093b6:	1c88      	addeq	r0, r1, #2
 80093b8:	2200      	movne	r2, #0
 80093ba:	bf08      	it	eq
 80093bc:	2201      	moveq	r2, #1
 80093be:	1e61      	subs	r1, r4, #1
 80093c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80093c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80093c8:	42a9      	cmp	r1, r5
 80093ca:	d1fb      	bne.n	80093c4 <__sccl+0x1c>
 80093cc:	b90b      	cbnz	r3, 80093d2 <__sccl+0x2a>
 80093ce:	3801      	subs	r0, #1
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	f082 0201 	eor.w	r2, r2, #1
 80093d6:	54e2      	strb	r2, [r4, r3]
 80093d8:	4605      	mov	r5, r0
 80093da:	4628      	mov	r0, r5
 80093dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80093e0:	292d      	cmp	r1, #45	; 0x2d
 80093e2:	d006      	beq.n	80093f2 <__sccl+0x4a>
 80093e4:	295d      	cmp	r1, #93	; 0x5d
 80093e6:	d0f3      	beq.n	80093d0 <__sccl+0x28>
 80093e8:	b909      	cbnz	r1, 80093ee <__sccl+0x46>
 80093ea:	4628      	mov	r0, r5
 80093ec:	e7f0      	b.n	80093d0 <__sccl+0x28>
 80093ee:	460b      	mov	r3, r1
 80093f0:	e7f1      	b.n	80093d6 <__sccl+0x2e>
 80093f2:	786e      	ldrb	r6, [r5, #1]
 80093f4:	2e5d      	cmp	r6, #93	; 0x5d
 80093f6:	d0fa      	beq.n	80093ee <__sccl+0x46>
 80093f8:	42b3      	cmp	r3, r6
 80093fa:	dcf8      	bgt.n	80093ee <__sccl+0x46>
 80093fc:	3502      	adds	r5, #2
 80093fe:	4619      	mov	r1, r3
 8009400:	3101      	adds	r1, #1
 8009402:	428e      	cmp	r6, r1
 8009404:	5462      	strb	r2, [r4, r1]
 8009406:	dcfb      	bgt.n	8009400 <__sccl+0x58>
 8009408:	1af1      	subs	r1, r6, r3
 800940a:	3901      	subs	r1, #1
 800940c:	1c58      	adds	r0, r3, #1
 800940e:	42b3      	cmp	r3, r6
 8009410:	bfa8      	it	ge
 8009412:	2100      	movge	r1, #0
 8009414:	1843      	adds	r3, r0, r1
 8009416:	e7e0      	b.n	80093da <__sccl+0x32>

08009418 <_strtol_l.constprop.0>:
 8009418:	2b01      	cmp	r3, #1
 800941a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800941e:	d001      	beq.n	8009424 <_strtol_l.constprop.0+0xc>
 8009420:	2b24      	cmp	r3, #36	; 0x24
 8009422:	d906      	bls.n	8009432 <_strtol_l.constprop.0+0x1a>
 8009424:	f7fe fc66 	bl	8007cf4 <__errno>
 8009428:	2316      	movs	r3, #22
 800942a:	6003      	str	r3, [r0, #0]
 800942c:	2000      	movs	r0, #0
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009518 <_strtol_l.constprop.0+0x100>
 8009436:	460d      	mov	r5, r1
 8009438:	462e      	mov	r6, r5
 800943a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800943e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009442:	f017 0708 	ands.w	r7, r7, #8
 8009446:	d1f7      	bne.n	8009438 <_strtol_l.constprop.0+0x20>
 8009448:	2c2d      	cmp	r4, #45	; 0x2d
 800944a:	d132      	bne.n	80094b2 <_strtol_l.constprop.0+0x9a>
 800944c:	782c      	ldrb	r4, [r5, #0]
 800944e:	2701      	movs	r7, #1
 8009450:	1cb5      	adds	r5, r6, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d05b      	beq.n	800950e <_strtol_l.constprop.0+0xf6>
 8009456:	2b10      	cmp	r3, #16
 8009458:	d109      	bne.n	800946e <_strtol_l.constprop.0+0x56>
 800945a:	2c30      	cmp	r4, #48	; 0x30
 800945c:	d107      	bne.n	800946e <_strtol_l.constprop.0+0x56>
 800945e:	782c      	ldrb	r4, [r5, #0]
 8009460:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009464:	2c58      	cmp	r4, #88	; 0x58
 8009466:	d14d      	bne.n	8009504 <_strtol_l.constprop.0+0xec>
 8009468:	786c      	ldrb	r4, [r5, #1]
 800946a:	2310      	movs	r3, #16
 800946c:	3502      	adds	r5, #2
 800946e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009472:	f108 38ff 	add.w	r8, r8, #4294967295
 8009476:	f04f 0c00 	mov.w	ip, #0
 800947a:	fbb8 f9f3 	udiv	r9, r8, r3
 800947e:	4666      	mov	r6, ip
 8009480:	fb03 8a19 	mls	sl, r3, r9, r8
 8009484:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009488:	f1be 0f09 	cmp.w	lr, #9
 800948c:	d816      	bhi.n	80094bc <_strtol_l.constprop.0+0xa4>
 800948e:	4674      	mov	r4, lr
 8009490:	42a3      	cmp	r3, r4
 8009492:	dd24      	ble.n	80094de <_strtol_l.constprop.0+0xc6>
 8009494:	f1bc 0f00 	cmp.w	ip, #0
 8009498:	db1e      	blt.n	80094d8 <_strtol_l.constprop.0+0xc0>
 800949a:	45b1      	cmp	r9, r6
 800949c:	d31c      	bcc.n	80094d8 <_strtol_l.constprop.0+0xc0>
 800949e:	d101      	bne.n	80094a4 <_strtol_l.constprop.0+0x8c>
 80094a0:	45a2      	cmp	sl, r4
 80094a2:	db19      	blt.n	80094d8 <_strtol_l.constprop.0+0xc0>
 80094a4:	fb06 4603 	mla	r6, r6, r3, r4
 80094a8:	f04f 0c01 	mov.w	ip, #1
 80094ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094b0:	e7e8      	b.n	8009484 <_strtol_l.constprop.0+0x6c>
 80094b2:	2c2b      	cmp	r4, #43	; 0x2b
 80094b4:	bf04      	itt	eq
 80094b6:	782c      	ldrbeq	r4, [r5, #0]
 80094b8:	1cb5      	addeq	r5, r6, #2
 80094ba:	e7ca      	b.n	8009452 <_strtol_l.constprop.0+0x3a>
 80094bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80094c0:	f1be 0f19 	cmp.w	lr, #25
 80094c4:	d801      	bhi.n	80094ca <_strtol_l.constprop.0+0xb2>
 80094c6:	3c37      	subs	r4, #55	; 0x37
 80094c8:	e7e2      	b.n	8009490 <_strtol_l.constprop.0+0x78>
 80094ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80094ce:	f1be 0f19 	cmp.w	lr, #25
 80094d2:	d804      	bhi.n	80094de <_strtol_l.constprop.0+0xc6>
 80094d4:	3c57      	subs	r4, #87	; 0x57
 80094d6:	e7db      	b.n	8009490 <_strtol_l.constprop.0+0x78>
 80094d8:	f04f 3cff 	mov.w	ip, #4294967295
 80094dc:	e7e6      	b.n	80094ac <_strtol_l.constprop.0+0x94>
 80094de:	f1bc 0f00 	cmp.w	ip, #0
 80094e2:	da05      	bge.n	80094f0 <_strtol_l.constprop.0+0xd8>
 80094e4:	2322      	movs	r3, #34	; 0x22
 80094e6:	6003      	str	r3, [r0, #0]
 80094e8:	4646      	mov	r6, r8
 80094ea:	b942      	cbnz	r2, 80094fe <_strtol_l.constprop.0+0xe6>
 80094ec:	4630      	mov	r0, r6
 80094ee:	e79e      	b.n	800942e <_strtol_l.constprop.0+0x16>
 80094f0:	b107      	cbz	r7, 80094f4 <_strtol_l.constprop.0+0xdc>
 80094f2:	4276      	negs	r6, r6
 80094f4:	2a00      	cmp	r2, #0
 80094f6:	d0f9      	beq.n	80094ec <_strtol_l.constprop.0+0xd4>
 80094f8:	f1bc 0f00 	cmp.w	ip, #0
 80094fc:	d000      	beq.n	8009500 <_strtol_l.constprop.0+0xe8>
 80094fe:	1e69      	subs	r1, r5, #1
 8009500:	6011      	str	r1, [r2, #0]
 8009502:	e7f3      	b.n	80094ec <_strtol_l.constprop.0+0xd4>
 8009504:	2430      	movs	r4, #48	; 0x30
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1b1      	bne.n	800946e <_strtol_l.constprop.0+0x56>
 800950a:	2308      	movs	r3, #8
 800950c:	e7af      	b.n	800946e <_strtol_l.constprop.0+0x56>
 800950e:	2c30      	cmp	r4, #48	; 0x30
 8009510:	d0a5      	beq.n	800945e <_strtol_l.constprop.0+0x46>
 8009512:	230a      	movs	r3, #10
 8009514:	e7ab      	b.n	800946e <_strtol_l.constprop.0+0x56>
 8009516:	bf00      	nop
 8009518:	0800991b 	.word	0x0800991b

0800951c <_strtol_r>:
 800951c:	f7ff bf7c 	b.w	8009418 <_strtol_l.constprop.0>

08009520 <_strtoul_l.constprop.0>:
 8009520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009524:	4f36      	ldr	r7, [pc, #216]	; (8009600 <_strtoul_l.constprop.0+0xe0>)
 8009526:	4686      	mov	lr, r0
 8009528:	460d      	mov	r5, r1
 800952a:	4628      	mov	r0, r5
 800952c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009530:	5de6      	ldrb	r6, [r4, r7]
 8009532:	f016 0608 	ands.w	r6, r6, #8
 8009536:	d1f8      	bne.n	800952a <_strtoul_l.constprop.0+0xa>
 8009538:	2c2d      	cmp	r4, #45	; 0x2d
 800953a:	d12f      	bne.n	800959c <_strtoul_l.constprop.0+0x7c>
 800953c:	782c      	ldrb	r4, [r5, #0]
 800953e:	2601      	movs	r6, #1
 8009540:	1c85      	adds	r5, r0, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d057      	beq.n	80095f6 <_strtoul_l.constprop.0+0xd6>
 8009546:	2b10      	cmp	r3, #16
 8009548:	d109      	bne.n	800955e <_strtoul_l.constprop.0+0x3e>
 800954a:	2c30      	cmp	r4, #48	; 0x30
 800954c:	d107      	bne.n	800955e <_strtoul_l.constprop.0+0x3e>
 800954e:	7828      	ldrb	r0, [r5, #0]
 8009550:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009554:	2858      	cmp	r0, #88	; 0x58
 8009556:	d149      	bne.n	80095ec <_strtoul_l.constprop.0+0xcc>
 8009558:	786c      	ldrb	r4, [r5, #1]
 800955a:	2310      	movs	r3, #16
 800955c:	3502      	adds	r5, #2
 800955e:	f04f 38ff 	mov.w	r8, #4294967295
 8009562:	2700      	movs	r7, #0
 8009564:	fbb8 f8f3 	udiv	r8, r8, r3
 8009568:	fb03 f908 	mul.w	r9, r3, r8
 800956c:	ea6f 0909 	mvn.w	r9, r9
 8009570:	4638      	mov	r0, r7
 8009572:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009576:	f1bc 0f09 	cmp.w	ip, #9
 800957a:	d814      	bhi.n	80095a6 <_strtoul_l.constprop.0+0x86>
 800957c:	4664      	mov	r4, ip
 800957e:	42a3      	cmp	r3, r4
 8009580:	dd22      	ble.n	80095c8 <_strtoul_l.constprop.0+0xa8>
 8009582:	2f00      	cmp	r7, #0
 8009584:	db1d      	blt.n	80095c2 <_strtoul_l.constprop.0+0xa2>
 8009586:	4580      	cmp	r8, r0
 8009588:	d31b      	bcc.n	80095c2 <_strtoul_l.constprop.0+0xa2>
 800958a:	d101      	bne.n	8009590 <_strtoul_l.constprop.0+0x70>
 800958c:	45a1      	cmp	r9, r4
 800958e:	db18      	blt.n	80095c2 <_strtoul_l.constprop.0+0xa2>
 8009590:	fb00 4003 	mla	r0, r0, r3, r4
 8009594:	2701      	movs	r7, #1
 8009596:	f815 4b01 	ldrb.w	r4, [r5], #1
 800959a:	e7ea      	b.n	8009572 <_strtoul_l.constprop.0+0x52>
 800959c:	2c2b      	cmp	r4, #43	; 0x2b
 800959e:	bf04      	itt	eq
 80095a0:	782c      	ldrbeq	r4, [r5, #0]
 80095a2:	1c85      	addeq	r5, r0, #2
 80095a4:	e7cd      	b.n	8009542 <_strtoul_l.constprop.0+0x22>
 80095a6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80095aa:	f1bc 0f19 	cmp.w	ip, #25
 80095ae:	d801      	bhi.n	80095b4 <_strtoul_l.constprop.0+0x94>
 80095b0:	3c37      	subs	r4, #55	; 0x37
 80095b2:	e7e4      	b.n	800957e <_strtoul_l.constprop.0+0x5e>
 80095b4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80095b8:	f1bc 0f19 	cmp.w	ip, #25
 80095bc:	d804      	bhi.n	80095c8 <_strtoul_l.constprop.0+0xa8>
 80095be:	3c57      	subs	r4, #87	; 0x57
 80095c0:	e7dd      	b.n	800957e <_strtoul_l.constprop.0+0x5e>
 80095c2:	f04f 37ff 	mov.w	r7, #4294967295
 80095c6:	e7e6      	b.n	8009596 <_strtoul_l.constprop.0+0x76>
 80095c8:	2f00      	cmp	r7, #0
 80095ca:	da07      	bge.n	80095dc <_strtoul_l.constprop.0+0xbc>
 80095cc:	2322      	movs	r3, #34	; 0x22
 80095ce:	f8ce 3000 	str.w	r3, [lr]
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	b932      	cbnz	r2, 80095e6 <_strtoul_l.constprop.0+0xc6>
 80095d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095dc:	b106      	cbz	r6, 80095e0 <_strtoul_l.constprop.0+0xc0>
 80095de:	4240      	negs	r0, r0
 80095e0:	2a00      	cmp	r2, #0
 80095e2:	d0f9      	beq.n	80095d8 <_strtoul_l.constprop.0+0xb8>
 80095e4:	b107      	cbz	r7, 80095e8 <_strtoul_l.constprop.0+0xc8>
 80095e6:	1e69      	subs	r1, r5, #1
 80095e8:	6011      	str	r1, [r2, #0]
 80095ea:	e7f5      	b.n	80095d8 <_strtoul_l.constprop.0+0xb8>
 80095ec:	2430      	movs	r4, #48	; 0x30
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1b5      	bne.n	800955e <_strtoul_l.constprop.0+0x3e>
 80095f2:	2308      	movs	r3, #8
 80095f4:	e7b3      	b.n	800955e <_strtoul_l.constprop.0+0x3e>
 80095f6:	2c30      	cmp	r4, #48	; 0x30
 80095f8:	d0a9      	beq.n	800954e <_strtoul_l.constprop.0+0x2e>
 80095fa:	230a      	movs	r3, #10
 80095fc:	e7af      	b.n	800955e <_strtoul_l.constprop.0+0x3e>
 80095fe:	bf00      	nop
 8009600:	0800991b 	.word	0x0800991b

08009604 <_strtoul_r>:
 8009604:	f7ff bf8c 	b.w	8009520 <_strtoul_l.constprop.0>

08009608 <__submore>:
 8009608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009614:	4299      	cmp	r1, r3
 8009616:	d11d      	bne.n	8009654 <__submore+0x4c>
 8009618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800961c:	f7ff f81c 	bl	8008658 <_malloc_r>
 8009620:	b918      	cbnz	r0, 800962a <__submore+0x22>
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800962e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009630:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009634:	6360      	str	r0, [r4, #52]	; 0x34
 8009636:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800963a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800963e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009642:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009646:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800964a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800964e:	6020      	str	r0, [r4, #0]
 8009650:	2000      	movs	r0, #0
 8009652:	e7e8      	b.n	8009626 <__submore+0x1e>
 8009654:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009656:	0077      	lsls	r7, r6, #1
 8009658:	463a      	mov	r2, r7
 800965a:	f000 f84b 	bl	80096f4 <_realloc_r>
 800965e:	4605      	mov	r5, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	d0de      	beq.n	8009622 <__submore+0x1a>
 8009664:	eb00 0806 	add.w	r8, r0, r6
 8009668:	4601      	mov	r1, r0
 800966a:	4632      	mov	r2, r6
 800966c:	4640      	mov	r0, r8
 800966e:	f000 f827 	bl	80096c0 <memcpy>
 8009672:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009676:	f8c4 8000 	str.w	r8, [r4]
 800967a:	e7e9      	b.n	8009650 <__submore+0x48>

0800967c <_fstat_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d07      	ldr	r5, [pc, #28]	; (800969c <_fstat_r+0x20>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	4611      	mov	r1, r2
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f7f8 f8e4 	bl	8001856 <_fstat>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	d102      	bne.n	8009698 <_fstat_r+0x1c>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	b103      	cbz	r3, 8009698 <_fstat_r+0x1c>
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	bd38      	pop	{r3, r4, r5, pc}
 800969a:	bf00      	nop
 800969c:	20000758 	.word	0x20000758

080096a0 <_isatty_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d06      	ldr	r5, [pc, #24]	; (80096bc <_isatty_r+0x1c>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7f8 f8e3 	bl	8001876 <_isatty>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_isatty_r+0x1a>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_isatty_r+0x1a>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	20000758 	.word	0x20000758

080096c0 <memcpy>:
 80096c0:	440a      	add	r2, r1
 80096c2:	4291      	cmp	r1, r2
 80096c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096c8:	d100      	bne.n	80096cc <memcpy+0xc>
 80096ca:	4770      	bx	lr
 80096cc:	b510      	push	{r4, lr}
 80096ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096d6:	4291      	cmp	r1, r2
 80096d8:	d1f9      	bne.n	80096ce <memcpy+0xe>
 80096da:	bd10      	pop	{r4, pc}

080096dc <__malloc_lock>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__malloc_lock+0x8>)
 80096de:	f7fe bed5 	b.w	800848c <__retarget_lock_acquire_recursive>
 80096e2:	bf00      	nop
 80096e4:	2000074c 	.word	0x2000074c

080096e8 <__malloc_unlock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__malloc_unlock+0x8>)
 80096ea:	f7fe bed0 	b.w	800848e <__retarget_lock_release_recursive>
 80096ee:	bf00      	nop
 80096f0:	2000074c 	.word	0x2000074c

080096f4 <_realloc_r>:
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	4680      	mov	r8, r0
 80096fa:	4614      	mov	r4, r2
 80096fc:	460e      	mov	r6, r1
 80096fe:	b921      	cbnz	r1, 800970a <_realloc_r+0x16>
 8009700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	4611      	mov	r1, r2
 8009706:	f7fe bfa7 	b.w	8008658 <_malloc_r>
 800970a:	b92a      	cbnz	r2, 8009718 <_realloc_r+0x24>
 800970c:	f7fe ff38 	bl	8008580 <_free_r>
 8009710:	4625      	mov	r5, r4
 8009712:	4628      	mov	r0, r5
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	f000 f81b 	bl	8009752 <_malloc_usable_size_r>
 800971c:	4284      	cmp	r4, r0
 800971e:	4607      	mov	r7, r0
 8009720:	d802      	bhi.n	8009728 <_realloc_r+0x34>
 8009722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009726:	d812      	bhi.n	800974e <_realloc_r+0x5a>
 8009728:	4621      	mov	r1, r4
 800972a:	4640      	mov	r0, r8
 800972c:	f7fe ff94 	bl	8008658 <_malloc_r>
 8009730:	4605      	mov	r5, r0
 8009732:	2800      	cmp	r0, #0
 8009734:	d0ed      	beq.n	8009712 <_realloc_r+0x1e>
 8009736:	42bc      	cmp	r4, r7
 8009738:	4622      	mov	r2, r4
 800973a:	4631      	mov	r1, r6
 800973c:	bf28      	it	cs
 800973e:	463a      	movcs	r2, r7
 8009740:	f7ff ffbe 	bl	80096c0 <memcpy>
 8009744:	4631      	mov	r1, r6
 8009746:	4640      	mov	r0, r8
 8009748:	f7fe ff1a 	bl	8008580 <_free_r>
 800974c:	e7e1      	b.n	8009712 <_realloc_r+0x1e>
 800974e:	4635      	mov	r5, r6
 8009750:	e7df      	b.n	8009712 <_realloc_r+0x1e>

08009752 <_malloc_usable_size_r>:
 8009752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009756:	1f18      	subs	r0, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfbc      	itt	lt
 800975c:	580b      	ldrlt	r3, [r1, r0]
 800975e:	18c0      	addlt	r0, r0, r3
 8009760:	4770      	bx	lr
	...

08009764 <_init>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	bf00      	nop
 8009768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976a:	bc08      	pop	{r3}
 800976c:	469e      	mov	lr, r3
 800976e:	4770      	bx	lr

08009770 <_fini>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	bf00      	nop
 8009774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009776:	bc08      	pop	{r3}
 8009778:	469e      	mov	lr, r3
 800977a:	4770      	bx	lr
